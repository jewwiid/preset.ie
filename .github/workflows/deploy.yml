name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  deploy-web:
    name: Deploy Web to Vercel
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://web-brown-three-40.vercel.app
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token="$VERCEL_TOKEN" --scope="jewwiids-projects"

      - name: Build Project Artifacts
        run: vercel build --prod --token="$VERCEL_TOKEN" --scope="jewwiids-projects"

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token="$VERCEL_TOKEN" --scope="jewwiids-projects"

  deploy-edge-functions:
    name: Deploy Edge Functions to Supabase
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Supabase CLI
        run: |
          if ! command -v supabase &> /dev/null; then
            rm -rf supabase
            curl -fsSL https://github.com/supabase/cli/releases/download/v1.200.3/supabase_linux_amd64.tar.gz | tar -xz
            sudo mv supabase /usr/local/bin/
          else
            echo "Supabase CLI already installed"
          fi

      - name: Deploy Edge Functions
        run: |
          git checkout HEAD -- supabase/
          cd supabase && supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: [deploy-web, deploy-edge-functions]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Supabase CLI
        run: |
          if ! command -v supabase &> /dev/null; then
            rm -rf supabase
            curl -fsSL https://github.com/supabase/cli/releases/download/v1.200.3/supabase_linux_amd64.tar.gz | tar -xz
            sudo mv supabase /usr/local/bin/
          else
            echo "Supabase CLI already installed"
          fi

      - name: Run Migrations
        run: |
          git checkout HEAD -- supabase/
          cd supabase && supabase db push --db-url "postgresql://postgres:${{ secrets.SUPABASE_DB_PASSWORD }}@db.${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co:5432/postgres?sslmode=require"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-edge-functions, migrate-database]
    if: always()
    steps:
      - name: Send Slack notification
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text": "Deployment to production ${{ job.status }}", "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "*Deployment Status:* ${{ job.status }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Message:* ${{ github.event.head_commit.message }}"}}]}' \
              ${{ secrets.SLACK_WEBHOOK }}
          else
            echo "Slack webhook not configured, skipping notification"
          fi