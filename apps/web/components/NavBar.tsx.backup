'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { usePathname, useRouter } from 'next/navigation'
import { useAuth } from '../lib/auth-context'
import { supabase } from '../lib/supabase'
import { Button } from './ui/button'
import { Badge } from './ui/badge'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from './ui/dropdown-menu'
import {
  Home,
  Search,
  Briefcase,
  MessageSquare,
  Image,
  Plus,
  Menu,
  X,
  User,
  LogOut,
  Shield,
  Settings,
  Heart,
  ChevronDown,
  Target,
  ShoppingBag,
  ShoppingCart,
  Store,
  Calendar,
  Palette,
  Users,
  FileText,
  Sparkles,
  Camera,
  Video,
  Wand2,
  Clock,
  TrendingUp,
  Package
} from 'lucide-react'
import { NotificationBell } from './NotificationBell'
import { ThemeToggle } from './ThemeToggle'

export function NavBar() {
  const { user, userRole, loading, signOut } = useAuth()
  const pathname = usePathname()
  const [isAdmin, setIsAdmin] = useState(false)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  
  // Close mobile menu on window resize to desktop size
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768) { // md breakpoint
        setMobileMenuOpen(false)
      }
    }
    
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false)
  const [profile, setProfile] = useState<any>(null)
  const [profileLoading, setProfileLoading] = useState(false)
  const [profileFetchFailed, setProfileFetchFailed] = useState(false)


  const getNavItemsForRole = () => {
    // Not authenticated - minimal landing page navigation
    if (!user) {
      return []
    }

    // Base items for all authenticated users
    const baseItems = [
      { label: 'Messages', href: '/messages', icon: MessageSquare, requiresAuth: true },
      { label: 'Collaborate', href: '/collaborate', icon: Users, requiresAuth: true },
      // Presets, Showcases, Treatments now accessible via Create menu
      // Marketplace is handled by dropdown, not as a base item
      // Matchmaking is accessible via dashboard, not as a main nav item
      // Applications moved to Dashboard dropdown
    ]

    // Role-specific additions
    const roleSpecificItems: any[] = []
    
    // Contributor-specific items
    if (profile?.role_flags?.includes('CONTRIBUTOR')) {
      roleSpecificItems.push(
        // My Gigs is now accessible via Gigs dropdown, not as a standalone nav item
        // Showcases now accessible via Create menu
      )
    }
    
    // Talent-specific items (users who are not contributors)
    // Showcases now accessible via Create menu for all users

    return [...baseItems, ...roleSpecificItems]
  }

  const mainNavItems = getNavItemsForRole()

  useEffect(() => {
    // Fetch profile when user is authenticated and loading is complete
    console.log('🔄 NavBar: useEffect triggered with:', {
      user: !!user,
      userRole: !!userRole,
      loading,
      condition: user && !loading,
      userEmail: user?.email,
      userId: user?.id
    })

    // Timeout safety: if auth is loading for more than 5 seconds, proceed anyway
    const loadingTimeoutId = setTimeout(() => {
      if (loading && user) {
        console.warn('⚠️ NavBar: Auth loading timeout exceeded (5s), proceeding with profile fetch anyway')
        fetchProfileSimple()
      }
    }, 5000) // 5 second timeout

    // Debounce profile fetching to prevent rapid re-fetches
    const debounceTimeout = setTimeout(() => {
      if (user && !loading) {
        // Directly fetch profile - trust AuthContext's session management
        console.log('🎯 NavBar: User authenticated, fetching profile...')
        fetchProfileSimple()
      } else if (user && loading) {
        console.log('⏳ NavBar: User found but auth still loading, waiting...')
        // Don't clear profileLoading here - let the timeout handle it
      } else {
        console.log('⏸️ NavBar: No user, clearing profile and loading state')
        setProfile(null)
        setIsAdmin(false)
        setProfileLoading(false) // Always clear loading when no user
        setProfileFetchFailed(false)
      }
    }, 100) // 100ms debounce

    return () => {
      clearTimeout(debounceTimeout)
      clearTimeout(loadingTimeoutId)
    }
  }, [user, loading]) // Removed userRole from dependencies - it was causing loops

  // Listen for OAuth callback completion to retry profile fetch
  useEffect(() => {
    const handleOAuthCallbackComplete = () => {
      console.log('🚀 NavBar: OAuth callback complete, retrying profile fetch')
      // Add a small delay to ensure auth context has processed the session
      setTimeout(() => {
        if (user && !loading) {
          console.log('🚀 NavBar: Retrying profile fetch after OAuth callback')
          fetchProfileSimple()
        } else {
          console.log('🚀 NavBar: User not ready for profile fetch:', { user: !!user, loading })
        }
      }, 500)
    }

    window.addEventListener('oauth-callback-complete', handleOAuthCallbackComplete)
    
    return () => {
      window.removeEventListener('oauth-callback-complete', handleOAuthCallbackComplete)
    }
  }, [user, loading])

  const fetchProfileSimple = async () => {
    if (!user) {
      // Clear loading if no user
      setProfileLoading(false)
      return
    }
    if (!supabase) {
      console.error('Supabase client not available')
      setProfileLoading(false)
      return
    }

    // Check if profile fetching is disabled (e.g., during OAuth callback)
    if ((window as any).__disableNavBarProfileFetch) {
      console.log('⏸️ NavBar: Profile fetching disabled, skipping...')
      setProfileLoading(false)
      return
    }

    // Check if we should trigger a retry (from OAuth callback)
    if ((window as any).__triggerNavBarProfileFetch) {
      console.log('🚀 NavBar: Triggered profile fetch retry from OAuth callback')
      ;(window as any).__triggerNavBarProfileFetch = false
    }

    console.log('🚀 NavBar: Fetching profile...')
    setProfileLoading(true)
    setProfileFetchFailed(false)

    // Create an AbortController for timeout
    try {
      const { data, error } = await supabase
        .from('users_profile')
        .select('avatar_url, display_name, role_flags, handle')
        .eq('user_id', user.id)
        .maybeSingle()

      if (error) {
        console.warn('❌ NavBar: Profile fetch failed:', error.message)
        setProfile(null)
        setProfileFetchFailed(true)
      } else if (data) {
        console.log('✅ NavBar: Profile fetch success')
        setProfile(data)
        setIsAdmin(data.role_flags?.includes('ADMIN'))
        setProfileFetchFailed(false)
      } else {
        console.log('ℹ️ NavBar: No profile found for user')
        setProfile(null)
      }
    } catch (error: any) {
      if (error.name === 'AbortError') {
        console.error('💥 NavBar: Profile fetch timed out')
        setProfileFetchFailed(true)
      } else {
        console.error('💥 NavBar: Profile fetch error:', error.message)
        setProfileFetchFailed(true)
      }
      setProfile(null)
    } finally {
      setProfileLoading(false)
    }
  }

  // Handle clicks outside dropdown to close it
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (profileDropdownOpen) {
        const target = event.target as Element
        // Check if click is outside both the dropdown and the button
        const isClickInsideDropdown = target.closest('[data-dropdown="profile"]')
        const isClickOnButton = target.closest('[data-dropdown-button="profile"]')
        
        if (!isClickInsideDropdown && !isClickOnButton) {
          setProfileDropdownOpen(false)
        }
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [profileDropdownOpen])


  const router = useRouter()

  const handleSignOut = async () => {
    await signOut()
    setProfileDropdownOpen(false)
    setMobileMenuOpen(false)
    // Redirect to homepage after sign out
    router.push('/')
  }

  const isActive = (href: string) => {
    if (href === '/') return pathname === '/'
    return pathname?.startsWith(href)
  }

  // Filter nav items based on auth status
  const visibleNavItems = mainNavItems.filter(item => {
    if (item.requiresAuth && !user) return false
    if ((item as any).adminOnly && !isAdmin) return false
    return true
  })

  // Check if user is contributor
  const isContributor = profile?.role_flags?.includes('CONTRIBUTOR')

  return (
    <>
      <nav className="bg-background border-b border-border sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16 gap-2 md:gap-3 lg:gap-6">
          {/* Logo */}
          <div className="flex items-center">
            <Link href="/" className="flex items-center">
              <div className="flex items-center justify-center w-10 h-10 mr-3">
                <img
                  src="/logo.svg"
                  alt="Preset"
                  className="w-10 h-10"
                />
              </div>
              <span className="text-xl font-bold text-primary preset-branding">Preset</span>
            </Link>
          </div>

          {/* Desktop Navigation - Right aligned - Single unified container */}
          <div className="hidden md:flex md:items-center md:gap-2 lg:gap-3 xl:gap-4 flex-1">
              {/* Dashboard Dropdown */}
              {user && (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button
                      className={`
                        inline-flex items-center h-10 px-2 md:px-3 text-sm md:text-base rounded-lg transition-colors nav-menu-item
                        ${(isActive('/dashboard') || isActive('/profile') || isActive('/matchmaking'))
                          ? 'text-primary bg-primary/10'
                          : 'text-foreground hover:bg-accent/50'
                        }
                      `}
                    >
                      <Home className="w-4 h-4 md:mr-2" />
                      <span className="hidden md:inline">Dashboard</span>
                      <ChevronDown className="w-3 h-3 md:w-4 md:h-4 md:ml-1" />
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-48" align="start">
                    <DropdownMenuItem asChild>
                      <Link href="/dashboard" className="flex items-center nav-submenu-item">
                        <Home className="mr-2 h-4 w-4" />
                        Dashboard
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/profile" className="flex items-center nav-submenu-item">
                        <User className="mr-2 h-4 w-4" />
                        Profile
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/matchmaking" className="flex items-center nav-submenu-item">
                        <Target className="mr-2 h-4 w-4" />
                        Matchmaking
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/applications" className="flex items-center nav-submenu-item">
                        <Briefcase className="mr-2 h-4 w-4" />
                        My Applications
                      </Link>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              )}

              {/* Gigs Dropdown */}
              {user && (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button
                      className={`
                        inline-flex items-center h-10 px-2 md:px-3 text-sm md:text-base rounded-lg transition-colors nav-menu-item
                        ${(isActive('/gigs'))
                          ? 'text-primary bg-primary/10'
                          : 'text-foreground hover:bg-accent/50'
                        }
                      `}
                    >
                      <Search className="w-4 h-4 md:mr-2" />
                      <span className="hidden md:inline">Gigs</span>
                      <ChevronDown className="w-3 h-3 md:w-4 md:h-4 md:ml-1" />
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-48" align="start">
                    <DropdownMenuItem asChild>
                      <Link href="/gigs" className="flex items-center nav-submenu-item">
                        <Search className="mr-2 h-4 w-4" />
                        Browse Gigs
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/gigs/saved" className="flex items-center nav-submenu-item">
                        <Heart className="mr-2 h-4 w-4" />
                        Saved Gigs
                      </Link>
                    </DropdownMenuItem>
                    {isContributor && (
                      <DropdownMenuItem asChild>
                        <Link href="/gigs/my-gigs" className="flex items-center nav-submenu-item">
                          <Briefcase className="mr-2 h-4 w-4" />
                          My Gigs
                        </Link>
                      </DropdownMenuItem>
                    )}
                  </DropdownMenuContent>
                </DropdownMenu>
              )}

              {/* Marketplace Dropdown */}
              {user && (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button
                      className={`
                        inline-flex items-center h-10 px-2 md:px-3 text-sm md:text-base rounded-lg transition-colors nav-menu-item
                        ${(isActive('/gear') || isActive('/presets/marketplace'))
                          ? 'text-primary bg-primary/10'
                          : 'text-foreground hover:bg-accent/50'
                        }
                      `}
                    >
                      <Store className="w-4 h-4 md:mr-2" />
                      <span className="hidden md:inline">Marketplace</span>
                      <ChevronDown className="w-3 h-3 md:w-4 md:h-4 md:ml-1" />
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-48" align="start">
                    <DropdownMenuLabel className="nav-submenu-title">Preset Marketplace</DropdownMenuLabel>
                    <DropdownMenuItem asChild>
                      <Link href="/presets/marketplace" className="flex items-center nav-submenu-item">
                        <Palette className="mr-2 h-4 w-4" />
                        Browse Presets
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/presets/marketplace/my-listings" className="flex items-center nav-submenu-item">
                        <ShoppingBag className="mr-2 h-4 w-4" />
                        My Preset Listings
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/presets/marketplace/purchases" className="flex items-center nav-submenu-item">
                        <ShoppingCart className="mr-2 h-4 w-4" />
                        Purchase History
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/presets/marketplace/analytics" className="flex items-center nav-submenu-item">
                        <TrendingUp className="mr-2 h-4 w-4" />
                        Analytics
                      </Link>
                    </DropdownMenuItem>

                    <DropdownMenuSeparator />
                    <DropdownMenuLabel className="nav-submenu-title">Equipment Marketplace</DropdownMenuLabel>
                    <DropdownMenuItem asChild>
                      <Link href="/gear" className="flex items-center nav-submenu-item">
                        <Camera className="mr-2 h-4 w-4" />
                        Browse Equipment
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/gear/create" className="flex items-center nav-submenu-item">
                        <Plus className="mr-2 h-4 w-4" />
                        Create Listing
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/gear/my-listings" className="flex items-center nav-submenu-item">
                        <Package className="mr-2 h-4 w-4" />
                        My Equipment Listings
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/gear/orders" className="flex items-center nav-submenu-item">
                        <Briefcase className="mr-2 h-4 w-4" />
                        My Orders
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuSub>
                      <DropdownMenuSubTrigger className="nav-submenu-title">
                        <MessageSquare className="mr-2 h-4 w-4" />
                        Requests
                      </DropdownMenuSubTrigger>
                      <DropdownMenuSubContent className="w-48">
                        <DropdownMenuItem asChild>
                          <Link href="/gear/requests?create=true" className="flex items-center nav-submenu-item">
                            <Plus className="mr-2 h-4 w-4" />
                            Create Request
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link href="/gear/requests" className="flex items-center nav-submenu-item">
                            <MessageSquare className="mr-2 h-4 w-4" />
                            Browse Requests
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link href="/gear/my-requests" className="flex items-center nav-submenu-item">
                            <Clock className="mr-2 h-4 w-4" />
                            My Requests
                          </Link>
                        </DropdownMenuItem>
                      </DropdownMenuSubContent>
                    </DropdownMenuSub>
                  </DropdownMenuContent>
                </DropdownMenu>
              )}

              {/* Create Menu */}
              {user && (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button
                      className={`
                        inline-flex items-center h-10 px-2 md:px-3 text-sm md:text-base rounded-lg transition-colors nav-menu-item
                        ${(isActive('/presets') || isActive('/presets/create') || isActive('/showcases') || isActive('/showcases/create') || isActive('/treatments') || isActive('/treatments/create') || isActive('/playground') || isActive('/moodboards'))
                          ? 'text-primary bg-primary/10'
                          : 'text-foreground hover:bg-accent/50'
                        }
                      `}
                    >
                      <Plus className="w-4 h-4 md:mr-2" />
                      <span className="hidden md:inline">Create</span>
                      <ChevronDown className="w-3 h-3 md:w-4 md:h-4 md:ml-1" />
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-56" align="start">
                    <DropdownMenuItem asChild>
                      <Link href="/playground" className="flex items-center nav-submenu-item">
                        <Camera className="mr-2 h-4 w-4" />
                        Media (Playground)
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem asChild>
                      <Link href="/moodboards" className="flex items-center nav-submenu-item">
                        <Image className="mr-2 h-4 w-4" />
                        Moodboards
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem asChild>
                      <Link href="/presets" className="flex items-center nav-submenu-item">
                        <Palette className="mr-2 h-4 w-4" />
                        Presets
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem asChild>
                      <Link href="/showcases" className="flex items-center nav-submenu-item">
                        <Sparkles className="mr-2 h-4 w-4" />
                        Showcases
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem asChild>
                      <Link href="/treatments" className="flex items-center nav-submenu-item">
                        <Wand2 className="mr-2 h-4 w-4" />
                        Treatments
                      </Link>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              )}

              {/* Regular Nav Items */}
              {visibleNavItems.map((item) => {
                const Icon = item.icon
                return (
                  <Link
                    key={item.href}
                    href={item.href}
                    className={`
                      inline-flex items-center h-10 px-2 md:px-3 text-sm md:text-base rounded-lg transition-colors nav-menu-item
                      ${isActive(item.href)
                        ? 'text-primary bg-primary/10'
                        : 'text-foreground hover:bg-accent/50'
                      }
                    `}
                  >
                    <Icon className="w-4 h-4 md:mr-2" />
                    <span className="hidden md:inline">{item.label}</span>
                  </Link>
                )
              })}

              {/* Right side items - now in same container - Desktop only */}
            {loading ? (
              // Show loading state
              <div className="animate-pulse flex space-x-3">
                <div className="hidden md:block h-9 w-24 bg-muted-200 rounded-md"></div>
                <div className="h-8 w-8 bg-muted-200 rounded-full"></div>
              </div>
            ) : user ? (
              <>
                {/* Create Gig Button - Desktop */}
                {profile?.role_flags?.includes('CONTRIBUTOR') && (
                  <Button asChild className="hidden md:inline-flex h-10 px-2 md:px-3 lg:px-4 rounded-lg nav-menu-item text-sm md:text-base">
                    <Link href="/gigs/create">
                      <Plus className="w-4 h-4 md:mr-2" />
                      <span className="hidden md:inline">Gig</span>
                    </Link>
                  </Button>
                )}

                {/* Theme Toggle - Desktop */}
                <div className="hidden md:block">
                  <ThemeToggle />
                </div>

                {/* Notifications - Desktop */}
                <div className="hidden md:block">
                  <NotificationBell />
                </div>

                {/* Profile Dropdown - Desktop */}
                <div className="hidden md:block">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="relative h-10 w-10 rounded-full p-0 hover:ring-2 hover:ring-primary/20 transition-all">
                        {(() => {
                          if (profileLoading) {
                            return (
                              <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-background"></div>
                              </div>
                            )
                          } else if (profile?.avatar_url) {
                            return (
                              <div className="relative w-10 h-10">
                                <img
                                  src={profile.avatar_url}
                                  alt={profile.display_name || 'User'}
                                  className="w-10 h-10 rounded-full object-cover border-2 border-border"
                                  onLoad={() => console.log('✅ NavBar: Avatar image loaded successfully')}
                                  onError={(e) => {
                                    console.error('❌ NavBar: Avatar image failed to load:', profile.avatar_url)
                                    // Fallback to default avatar on error
                                    const target = e.target as HTMLImageElement
                                    target.style.display = 'none'
                                    const fallback = target.parentElement?.querySelector('.fallback-avatar')
                                    if (fallback) {
                                      (fallback as HTMLElement).style.display = 'flex'
                                    }
                                  }}
                                />
                                <div className="fallback-avatar absolute inset-0 w-10 h-10 bg-primary rounded-full items-center justify-center hidden border-2 border-border">
                                  <User className="w-5 h-5 text-primary-foreground" />
                                </div>
                              </div>
                            )
                          } else {
                            return (
                              <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center border-2 border-border">
                                <User className="w-5 h-5 text-primary-foreground" />
                              </div>
                            )
                          }
                        })()}
                      </Button>
                    </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-72 p-4" align="end" forceMount>
                    {/* Profile Header */}
                    <div className="flex flex-col space-y-2 pb-3">
                      {profileLoading ? (
                        <div className="flex items-center gap-3">
                          <div className="w-12 h-12 bg-muted rounded-full flex items-center justify-center">
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
                          </div>
                          <div className="flex-1">
                            <div className="h-4 bg-muted rounded w-24 mb-2"></div>
                            <div className="h-3 bg-muted rounded w-32"></div>
                          </div>
                        </div>
                      ) : profile ? (
                        <>
                          <div className="flex items-center justify-between gap-2">
                            <h3 className="text-lg font-bold leading-tight">
                              {profile.display_name || 'User'}
                            </h3>
                            <p className="text-sm text-muted-foreground">
                              @{profile.handle || 'handle'}
                            </p>
                          </div>
                          <div className="inline-flex">
                            {profile?.role_flags?.includes('CONTRIBUTOR') ? (
                              <Badge className="text-xs font-medium bg-primary text-primary-foreground hover:bg-primary/90">
                                Contributor
                              </Badge>
                            ) : (
                              <Badge className="text-xs font-medium bg-primary text-primary-foreground hover:bg-primary/90">
                                Talent
                              </Badge>
                            )}
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="flex items-center justify-between gap-2">
                            <h3 className="text-lg font-bold leading-tight">User</h3>
                            <p className="text-sm text-muted-foreground">
                              @{user?.email?.split('@')[0] || 'user'}
                            </p>
                          </div>
                        </>
                      )}
                    </div>

                    <DropdownMenuSeparator className="my-2" />

                    {/* Menu Items */}
                    <div className="space-y-0">
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/dashboard" className="flex items-center nav-submenu-item">
                          <Home className="mr-3 h-4 w-4" />
                          Dashboard
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/profile" className="flex items-center nav-submenu-item">
                          <User className="mr-3 h-4 w-4" />
                          Profile
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/settings" className="flex items-center nav-submenu-item">
                          <Settings className="mr-3 h-4 w-4" />
                          Settings
                        </Link>
                      </DropdownMenuItem>
                      {isAdmin && (
                        <DropdownMenuItem asChild className="py-2 cursor-pointer">
                          <Link href="/admin" className="flex items-center nav-submenu-item">
                            <Shield className="mr-3 h-4 w-4" />
                            Admin Dashboard
                          </Link>
                        </DropdownMenuItem>
                      )}

                      {/* Sign Out */}
                      <DropdownMenuItem
                        onClick={handleSignOut}
                        className="py-2 cursor-pointer text-destructive focus:text-destructive focus:bg-destructive/10 nav-submenu-item"
                      >
                        <LogOut className="mr-3 h-4 w-4" />
                        Sign Out
                      </DropdownMenuItem>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>
                </div>
              </>
            ) : (
              <div className="hidden md:flex items-center space-x-3">
                <Button variant="ghost" asChild className="preset-branding">
                  <Link href="/auth/signin">Sign In</Link>
                </Button>
                <Button asChild className="preset-branding">
                  <Link href="/auth/signup">Sign Up</Link>
                </Button>
              </div>
            )}
          </div>
          {/* End of unified navigation container */}

          {/* Mobile Right Side Icons */}
          <div className="flex md:hidden items-center gap-3">
            {user && (
              <>
                {/* Create Gig Button - Mobile */}
                {profile?.role_flags?.includes('CONTRIBUTOR') && (
                  <Button asChild size="icon" className="h-10 w-10 rounded-lg">
                    <Link href="/gigs/create">
                      <Plus className="w-5 h-5" />
                    </Link>
                  </Button>
                )}

                {/* Theme Toggle - Mobile */}
                <ThemeToggle />

                {/* Notifications - Mobile */}
                <NotificationBell />

                {/* Profile Avatar - Mobile */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="relative h-10 w-10 rounded-full p-0">
                      {(() => {
                        if (profileLoading) {
                          return (
                            <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-background"></div>
                            </div>
                          )
                        } else if (profile?.avatar_url) {
                          return (
                            <img
                              src={profile.avatar_url}
                              alt={profile.display_name || 'User'}
                              className="w-10 h-10 rounded-full object-cover border-2 border-border"
                            />
                          )
                        } else {
                          return (
                            <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center border-2 border-border">
                              <User className="w-5 h-5 text-primary-foreground" />
                            </div>
                          )
                        }
                      })()}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-72 p-4" align="end" forceMount>
                    {/* Same dropdown content as desktop */}
                    <div className="flex flex-col space-y-2 pb-3">
                      {profileLoading ? (
                        <div className="flex items-center gap-3">
                          <div className="w-12 h-12 bg-muted rounded-full flex items-center justify-center">
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
                          </div>
                          <div className="flex-1">
                            <div className="h-4 bg-muted rounded w-24 mb-2"></div>
                            <div className="h-3 bg-muted rounded w-32"></div>
                          </div>
                        </div>
                      ) : profile ? (
                        <>
                          <div className="flex items-center justify-between gap-2">
                            <h3 className="text-lg font-bold leading-tight">
                              {profile.display_name || 'User'}
                            </h3>
                            <p className="text-sm text-muted-foreground">
                              @{profile.handle || 'handle'}
                            </p>
                          </div>
                          <div className="inline-flex pt-1">
                            {profile?.role_flags?.includes('CONTRIBUTOR') ? (
                              <Badge className="text-xs font-medium bg-primary text-primary-foreground hover:bg-primary/90">
                                Contributor
                              </Badge>
                            ) : (
                              <Badge className="text-xs font-medium bg-primary text-primary-foreground hover:bg-primary/90">
                                Talent
                              </Badge>
                            )}
                          </div>
                        </>
                      ) : (
                        <div className="flex items-center justify-between gap-2">
                          <h3 className="text-lg font-bold leading-tight">User</h3>
                          <p className="text-sm text-muted-foreground">
                            @{user?.email?.split('@')[0] || 'user'}
                          </p>
                        </div>
                      )}
                    </div>

                    <DropdownMenuSeparator className="my-2" />

                    <div className="space-y-0">
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/dashboard" className="flex items-center nav-submenu-item">
                          <Home className="mr-3 h-4 w-4" />
                          Dashboard
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/profile" className="flex items-center nav-submenu-item">
                          <User className="mr-3 h-4 w-4" />
                          Profile
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild className="py-2 cursor-pointer">
                        <Link href="/settings" className="flex items-center nav-submenu-item">
                          <Settings className="mr-3 h-4 w-4" />
                          Settings
                        </Link>
                      </DropdownMenuItem>
                      {isAdmin && (
                        <DropdownMenuItem asChild className="py-2 cursor-pointer">
                          <Link href="/admin" className="flex items-center nav-submenu-item">
                            <Shield className="mr-3 h-4 w-4" />
                            Admin Dashboard
                          </Link>
                        </DropdownMenuItem>
                      )}

                      <DropdownMenuItem
                        onClick={handleSignOut}
                        className="py-2 cursor-pointer text-destructive focus:text-destructive focus:bg-destructive/10 nav-submenu-item"
                      >
                        <LogOut className="mr-3 h-4 w-4" />
                        Sign Out
                      </DropdownMenuItem>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>
              </>
            )}

            {!user && (
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm" asChild className="preset-branding">
                  <Link href="/auth/signin">Sign In</Link>
                </Button>
                <Button size="sm" asChild className="preset-branding">
                  <Link href="/auth/signup">Sign Up</Link>
                </Button>
              </div>
            )}

            {/* Mobile menu button */}
            <button
              onClick={(e) => {
                e.stopPropagation()
                setMobileMenuOpen(!mobileMenuOpen)
              }}
              className="p-2 rounded-md nav-item relative z-50"
              aria-label={mobileMenuOpen ? 'Close menu' : 'Open menu'}
            >
              {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {mobileMenuOpen && (
          <div>
            {/* Backdrop */}
            <div 
              className="md:hidden fixed inset-0 bg-black/50 z-40"
              onClick={() => setMobileMenuOpen(false)}
            />
            {/* Mobile Menu Slide-in Panel */}
            <div className="md:hidden fixed inset-y-0 left-0 w-80 max-w-[85vw] bg-background shadow-xl z-50 transform transition-transform duration-300 ease-in-out">
              <div className="flex flex-col h-full">
                {/* Mobile Menu Header */}
                <div className="flex items-center justify-between p-4 border-b border-border">
                  <div className="flex items-center">
                    <div className="flex items-center justify-center w-10 h-10 mr-3">
                      <img
                        src="/logo.svg"
                        alt="Preset"
                        className="w-10 h-10"
                      />
                    </div>
                    <span className="text-xl font-bold text-primary preset-branding">Preset</span>
                  </div>
                  <button
                    onClick={() => setMobileMenuOpen(false)}
                    className="p-2 rounded-md hover:bg-accent transition-colors"
                  >
                    <X className="h-6 w-6" />
                  </button>
                </div>
                
                {/* Mobile Menu Content */}
                <div className="flex-1 overflow-y-auto px-4 py-6 space-y-1">
            {/* Dashboard Section */}
            {user && (
              <>
                <div className="px-3 py-2 text-xs font-semibold text-muted-foreground-500 uppercase tracking-wider preset-branding">
                  Dashboard
                </div>
                <Link
                  href="/dashboard"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/dashboard')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Home className="w-5 h-5 inline mr-3" />
                  Dashboard
                </Link>
                <Link
                  href="/profile"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/profile')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <User className="w-5 h-5 inline mr-3" />
                  Profile
                </Link>
                <Link
                  href="/matchmaking"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/matchmaking')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Target className="w-5 h-5 inline mr-3" />
                  Matchmaking
                </Link>
                <Link
                  href="/applications"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/applications')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Briefcase className="w-5 h-5 inline mr-3" />
                  My Applications
                </Link>
              </>
            )}

            {/* Gigs Section */}
            {user && (
              <>
                <div className="px-3 py-2 text-xs font-semibold text-muted-foreground-500 uppercase tracking-wider preset-branding">
                  Gigs
                </div>
                <Link
                  href="/gigs"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gigs')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Search className="w-5 h-5 inline mr-3" />
                  Browse Gigs
                </Link>
                <Link
                  href="/gigs/saved"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gigs/saved')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Heart className="w-5 h-5 inline mr-3" />
                  Saved Gigs
                </Link>
                {isContributor && (
                  <Link
                    href="/gigs/my-gigs"
                    className={`
                      block px-3 py-2 text-base font-medium rounded-md preset-branding
                      ${isActive('/gigs/my-gigs')
                        ? 'text-primary bg-primary/10'
                        : 'nav-item'
                      }
                    `}
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <Briefcase className="w-5 h-5 inline mr-3" />
                    My Gigs
                  </Link>
                )}
              </>
            )}

            {/* Marketplace Section */}
            {user && (
              <>
                <div className="px-3 py-2 text-xs font-semibold text-muted-foreground-500 uppercase tracking-wider preset-branding">
                  Marketplace
                </div>
                <Link
                  href="/gear"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Store className="w-5 h-5 inline mr-3" />
                  Browse Marketplace
                </Link>
                <Link
                  href="/gear/create"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/create')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Plus className="w-5 h-5 inline mr-3" />
                  Create Listing
                </Link>
                <Link
                  href="/gear/requests?create=true"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/requests')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <MessageSquare className="w-5 h-5 inline mr-3" />
                  Create Request
                </Link>
                <Link
                  href="/gear/my-listings"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/my-listings')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <ShoppingBag className="w-5 h-5 inline mr-3" />
                  My Listings
                </Link>
                <Link
                  href="/gear/orders"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/orders')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Briefcase className="w-5 h-5 inline mr-3" />
                  My Orders
                </Link>
                <Link
                  href="/gear/requests"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/requests')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <MessageSquare className="w-5 h-5 inline mr-3" />
                  Equipment Requests
                </Link>
                <Link
                  href="/gear/my-requests"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/gear/my-requests')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Clock className="w-5 h-5 inline mr-3" />
                  My Requests
                </Link>
              </>
            )}

            {/* Create & Browse Section */}
            {user && (
              <>
                <div className="px-3 py-2 text-xs font-semibold text-muted-foreground-500 uppercase tracking-wider preset-branding">
                  Create
                </div>
                <Link
                  href="/playground"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/playground')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Camera className="w-5 h-5 inline mr-3" />
                  Media (Playground)
                </Link>
                <Link
                  href="/moodboards"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/moodboards')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Image className="w-5 h-5 inline mr-3" />
                  Moodboards
                </Link>
                <Link
                  href="/presets"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/presets')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Palette className="w-5 h-5 inline mr-3" />
                  Presets
                </Link>
                <Link
                  href="/showcases"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/showcases')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Sparkles className="w-5 h-5 inline mr-3" />
                  Showcases
                </Link>
                <Link
                  href="/treatments"
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive('/treatments')
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Wand2 className="w-5 h-5 inline mr-3" />
                  Treatments
                </Link>
              </>
            )}

            {/* Regular Nav Items */}
            {visibleNavItems.map((item) => {
              const Icon = item.icon
              return (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`
                    block px-3 py-2 text-base font-medium rounded-md preset-branding
                    ${isActive(item.href)
                      ? 'text-primary bg-primary/10'
                      : 'nav-item'
                    }
                  `}
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Icon className="w-5 h-5 inline mr-3" />
                  {item.label}
                </Link>
              )
            })}


            {!loading && user && profile?.role_flags?.includes('CONTRIBUTOR') && (
              <Link
                href="/gigs/create"
                className="block px-3 py-2 text-base font-medium nav-item preset-branding"
                onClick={() => setMobileMenuOpen(false)}
              >
                <Plus className="w-5 h-5 inline mr-3" />
                Create Gig
              </Link>
            )}

            {!loading && user && (
              <div className="mt-3 border-t border-border-200 pt-3">
                {isAdmin && (
                  <Link
                    href="/admin"
                    className="block px-3 py-2 text-base font-medium nav-item preset-branding"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <Shield className="w-5 h-5 inline mr-3" />
                    Dashboard - Admin View
                  </Link>
                )}
                <Link
                  href="/profile"
                  className="block px-3 py-2 text-base font-medium text-muted-foreground-600 hover:text-muted-foreground-900 preset-branding"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <User className="w-5 h-5 inline mr-3" />
                  Profile
                </Link>
                <Link
                  href="/settings"
                  className="block px-3 py-2 text-base font-medium text-muted-foreground-600 hover:text-muted-foreground-900 preset-branding"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Settings className="w-5 h-5 inline mr-3" />
                  Settings
                </Link>
                <button
                  onClick={handleSignOut}
                  className="block w-full text-left px-3 py-2 text-base font-medium text-destructive-600 hover:text-destructive-900 preset-branding"
                >
                  <LogOut className="w-5 h-5 inline mr-3" />
                  Sign Out
                </button>
              </div>
            )}

                {/* Theme Toggle for Mobile */}
                <div className="mt-3 border-t border-border-200 pt-3">
                  <div className="flex items-center justify-between px-3 py-2">
                    <span className="text-sm font-medium text-muted-foreground-600 preset-branding">Theme</span>
                    <ThemeToggle />
                  </div>
                </div>

                {!loading && !user && (
                  <div className="mt-3 border-t border-border-200 pt-3">
                    <Link
                      href="/auth/signin"
                      className="block px-3 py-2 text-base font-medium text-muted-foreground-600 hover:text-muted-foreground-900 preset-branding"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      Sign In
                    </Link>
                    <Link
                      href="/auth/signup"
                      className="block px-3 py-2 text-base font-medium nav-item preset-branding"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      Sign Up
                    </Link>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
      </div>
    </nav>
    </>
  )
}