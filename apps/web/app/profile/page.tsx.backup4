'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect, Suspense } from 'react'
import { useAuth } from '../../lib/auth-context'
import { supabase } from '../../lib/supabase'
import { useRouter, useSearchParams } from 'next/navigation'
import CreditsDashboard from '../../components/profile/CreditsDashboard'
import UserSettingsTab from '../../components/profile/UserSettingsTab'
import { AvatarUpload } from '../../components/AvatarUpload'
import { HeaderBannerUpload } from '../../components/HeaderBannerUpload'
import { validateAndCheckTag } from '../../lib/contentModeration'
import { 
  User, 
  Camera, 
  MapPin, 
  Briefcase, 
  Star, 
  Edit3, 
  Save, 
  X,
  Mail,
  Calendar,
  Shield,
  CheckCircle,
  Tag,
  Plus,
  Sparkles,
  AlertTriangle,
  CreditCard,
  Settings,
  Bell,
  Eye,
  Lock,
  Globe,
  Users,
  UserX,
  DollarSign,
  Radius,
  Filter,
  Target,
  Palette,
  MessageSquare,
  Hash,
  ArrowLeft,
  TrendingUp,
  Coins,
  History,
  ShoppingCart,
  Building,
  Clock,
  ChevronDown
} from 'lucide-react'

// Predefined vibe options  
const PREDEFINED_VIBES = [
  'Professional', 'Creative', 'Experimental', 'Classic',
  'Bold', 'Natural', 'Dramatic', 'Soft', 'Edgy', 'Timeless'
]

// Predefined style options
const PREDEFINED_STYLES = [
  'Portrait', 'Fashion', 'Editorial', 'Commercial', 'Beauty',
  'Lifestyle', 'Street', 'Documentary', 'Fine Art', 'Conceptual',
  'Wedding', 'Event', 'Product', 'Architecture', 'Nature'
]

// These will be populated from the database
let PREDEFINED_TALENT_CATEGORIES: string[] = []
let PREDEFINED_SPECIALIZATIONS: string[] = []

// Safety and validation functions
const validateCustomInput = (input: string, type: 'talent_category' | 'specialization' | 'eye_color' | 'hair_color'): { isValid: boolean; error?: string } => {
  const trimmed = input.trim()
  
  // Character limits
  if (trimmed.length < 2) {
    return { isValid: false, error: 'Must be at least 2 characters long' }
  }
  
  if (trimmed.length > 50) {
    return { isValid: false, error: 'Must be 50 characters or less' }
  }
  
  // Check for inappropriate content
  const inappropriateWords = [
    'nude', 'naked', 'sex', 'sexual', 'porn', 'pornographic', 'adult', 'explicit',
    'xxx', 'nsfw', 'fetish', 'bdsm', 'escort', 'prostitute', 'hooker', 'slut',
    'whore', 'bitch', 'fuck', 'shit', 'damn', 'hell', 'crap', 'asshole',
    'dick', 'pussy', 'cock', 'tits', 'boobs', 'ass', 'butt', 'penis', 'vagina'
  ]
  
  const lowerInput = trimmed.toLowerCase()
  for (const word of inappropriateWords) {
    if (lowerInput.includes(word)) {
      return { isValid: false, error: 'Contains inappropriate content' }
    }
  }
  
  // Check for spam patterns
  if (trimmed.match(/(.)\1{3,}/)) { // Repeated characters like "aaaa"
    return { isValid: false, error: 'Cannot contain repeated characters' }
  }
  
  if (trimmed.match(/[0-9]{4,}/)) { // Too many numbers
    return { isValid: false, error: 'Cannot contain excessive numbers' }
  }
  
  // Check for special characters (allow basic punctuation)
  if (!trimmed.match(/^[a-zA-Z0-9\s\-&.,()]+$/)) {
    return { isValid: false, error: 'Only letters, numbers, spaces, and basic punctuation allowed' }
  }
  
  // Check for URLs or contact info
  if (trimmed.match(/(www\.|http|@|\.com|\.net|\.org|phone|call|email|contact)/i)) {
    return { isValid: false, error: 'Cannot contain URLs or contact information' }
  }
  
  return { isValid: true }
}

const sanitizeInput = (input: string): string => {
  return input
    .trim()
    .replace(/\s+/g, ' ') // Replace multiple spaces with single space
    .replace(/[^\w\s\-&.,()]/g, '') // Remove special characters except allowed ones
    .substring(0, 50) // Enforce character limit
}

interface UserProfile {
  id: string
  user_id: string
  display_name: string
  handle: string
  avatar_url?: string
  header_banner_url?: string
  header_banner_position?: string // JSON string of BannerPosition
  bio?: string
  city?: string
  country?: string
  date_of_birth?: string
  age_verified?: boolean
  account_status?: string
  phone_number?: string
  instagram_handle?: string
  tiktok_handle?: string
  website_url?: string
  portfolio_url?: string
  years_experience?: number
  specializations?: string[]
  equipment_list?: string[]
  editing_software?: string[]
  languages?: string[]
  hourly_rate_min?: number
  hourly_rate_max?: number
  available_for_travel?: boolean
  travel_radius_km?: number
  travel_unit_preference?: string
  studio_name?: string
  has_studio?: boolean
  studio_address?: string
  show_location?: boolean
  typical_turnaround_days?: number
  turnaround_unit_preference?: string
  height_cm?: number
  measurements?: string
  eye_color?: string
  hair_color?: string
  shoe_size?: string
  clothing_sizes?: string[]
  tattoos?: boolean
  piercings?: boolean
  talent_categories?: string[]
  role_flags: string[]
  style_tags: string[]
  vibe_tags: string[]
  subscription_tier: string
  subscription_status: string
  verified_id: boolean
  created_at: string
  updated_at: string
}

interface BannerPosition {
  y: number
  scale: number
}

interface UserSettings {
  id: string
  user_id: string
  email_notifications: boolean
  push_notifications: boolean
  marketing_emails: boolean
  profile_visibility: 'public' | 'private'
  show_contact_info: boolean
  two_factor_enabled: boolean
  message_notifications: boolean
  message_read_receipts: boolean
  allow_stranger_messages: boolean
  created_at: string
  updated_at: string
}

interface NotificationPreferences {
  id?: string
  user_id: string
  location_radius: number
  max_budget: number | null
  min_budget: number | null
  preferred_purposes: string[]
  preferred_vibes: string[]
  preferred_styles: string[]
  notify_on_match: boolean
  created_at: string
  updated_at: string
}

// Purpose types from gig creation
type PurposeType = 'PORTFOLIO' | 'COMMERCIAL' | 'EDITORIAL' | 'FASHION' | 'BEAUTY' | 'LIFESTYLE' | 'WEDDING' | 'EVENT' | 'PRODUCT' | 'ARCHITECTURE' | 'STREET' | 'CONCEPTUAL' | 'OTHER'

const PURPOSE_LABELS: Record<PurposeType, string> = {
  'PORTFOLIO': 'Portfolio Building',
  'COMMERCIAL': 'Commercial',
  'EDITORIAL': 'Editorial',
  'FASHION': 'Fashion',
  'BEAUTY': 'Beauty',
  'LIFESTYLE': 'Lifestyle',
  'WEDDING': 'Wedding',
  'EVENT': 'Event',
  'PRODUCT': 'Product',
  'ARCHITECTURE': 'Architecture',
  'STREET': 'Street Photography',
  'CONCEPTUAL': 'Conceptual',
  'OTHER': 'Other'
}



function ProfilePageContent() {
  const { user, userRole, loading: authLoading } = useAuth()
  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [loading, setLoading] = useState(true)
  const [editing, setEditing] = useState(false)
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isDraggingHeader, setIsDraggingHeader] = useState(false)
  const [headerPosition, setHeaderPosition] = useState({ y: 0, scale: 1 })
  const [showHeaderOptions, setShowHeaderOptions] = useState(false)
  const [isHoveringHeader, setIsHoveringHeader] = useState(false)
  const [isEditingHeader, setIsEditingHeader] = useState(false)
  const [stats, setStats] = useState({
    gigsCreated: 0,
    applications: 0,
    showcases: 0,
    profileViews: 0
  })
  const [statsLoading, setStatsLoading] = useState(true)
  const router = useRouter()
  const searchParams = useSearchParams()
  const [activeTab, setActiveTab] = useState<'profile' | 'credits' | 'settings'>('profile')

  // Predefined options from database
  const [predefinedTalentCategories, setPredefinedTalentCategories] = useState<string[]>([])
  const [predefinedSpecializations, setPredefinedSpecializations] = useState<string[]>([])
  const [predefinedEyeColors, setPredefinedEyeColors] = useState<string[]>([])
  const [predefinedHairColors, setPredefinedHairColors] = useState<string[]>([])
  const [loadingPredefinedOptions, setLoadingPredefinedOptions] = useState(true)
  
  // Structured measurements and sizes data
  const [clothingSizeSystems, setClothingSizeSystems] = useState<any[]>([])
  const [clothingSizes, setClothingSizes] = useState<any[]>([])
  const [shoeSizeSystems, setShoeSizeSystems] = useState<any[]>([])
  const [shoeSizes, setShoeSizes] = useState<any[]>([])
  const [userMeasurements, setUserMeasurements] = useState<any[]>([])
  const [userClothingSizes, setUserClothingSizes] = useState<any[]>([])
  const [userShoeSizes, setUserShoeSizes] = useState<any[]>([])
  const [loadingMeasurementsData, setLoadingMeasurementsData] = useState(true)
  
  // Dropdown selection states
  const [selectedSpecializationCategory, setSelectedSpecializationCategory] = useState<string>('')
  const [selectedTalentCategory, setSelectedTalentCategory] = useState<string>('')
  
  // Dropdown visibility states
  const [showSpecializationCategoryDropdown, setShowSpecializationCategoryDropdown] = useState(false)
  const [showSpecializationOptionsDropdown, setShowSpecializationOptionsDropdown] = useState(false)
  const [showTalentCategoryDropdown, setShowTalentCategoryDropdown] = useState(false)
  const [showTalentOptionsDropdown, setShowTalentOptionsDropdown] = useState(false)

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement
      if (!target.closest('.dropdown-container')) {
        setShowSpecializationCategoryDropdown(false)
        setShowSpecializationOptionsDropdown(false)
        setShowTalentCategoryDropdown(false)
        setShowTalentOptionsDropdown(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Form state
  const [formData, setFormData] = useState({
    display_name: '',
    handle: '',
    bio: '',
    city: '',
    country: '',
    date_of_birth: '',
    header_banner_url: '',
    header_banner_position: '',
    phone_number: '',
    instagram_handle: '',
    tiktok_handle: '',
    website_url: '',
    portfolio_url: '',
    years_experience: 0,
    specializations: [] as string[],
    equipment_list: [] as string[],
    editing_software: [] as string[],
    languages: [] as string[],
    hourly_rate_min: 25,
    hourly_rate_max: 100,
    available_for_travel: false,
    travel_radius_km: 50,
    travel_unit_preference: 'km',
    studio_name: '',
    has_studio: false,
    studio_address: '',
    show_location: true,
    typical_turnaround_days: 0,
    turnaround_unit_preference: 'days',
    height_cm: 0,
    measurements: '',
    eye_color: '',
    hair_color: '',
    shoe_size: '',
    clothing_sizes: [] as string[],
    tattoos: false,
    piercings: false,
    talent_categories: [] as string[],
    style_tags: [] as string[],
  })

  const [newStyleTag, setNewStyleTag] = useState('')
  const [newSpecialization, setNewSpecialization] = useState('')
  const [newTalentCategory, setNewTalentCategory] = useState('')
  const [newEyeColor, setNewEyeColor] = useState('')
  const [newHairColor, setNewHairColor] = useState('')
  
  // New measurement form state
  const [newMeasurementType, setNewMeasurementType] = useState('')
  const [newMeasurementValue, setNewMeasurementValue] = useState('')
  const [newMeasurementUnit, setNewMeasurementUnit] = useState('cm')
  
  // New shoe size form state
  const [newShoeSizeSystem, setNewShoeSizeSystem] = useState('')
  const [newShoeSizeValue, setNewShoeSizeValue] = useState('')
  
  // New clothing size form state
  const [newClothingType, setNewClothingType] = useState('')
  const [newClothingSizeSystem, setNewClothingSizeSystem] = useState('')
  const [newClothingSizeValue, setNewClothingSizeValue] = useState('')
  
  // Equipment form state
  const [newEquipment, setNewEquipment] = useState('')
  const [equipmentTypes, setEquipmentTypes] = useState<any[]>([])
  const [equipmentBrands, setEquipmentBrands] = useState<any[]>([])
  const [equipmentModels, setEquipmentModels] = useState<any[]>([])
  const [userEquipment, setUserEquipment] = useState<any[]>([])
  const [loadingEquipmentData, setLoadingEquipmentData] = useState(false)
  const [selectedEquipmentType, setSelectedEquipmentType] = useState('')
  const [selectedEquipmentBrand, setSelectedEquipmentBrand] = useState('')
  const [selectedEquipmentModel, setSelectedEquipmentModel] = useState('')
  const [newEquipmentBrand, setNewEquipmentBrand] = useState('')
  const [newEquipmentModel, setNewEquipmentModel] = useState('')
  const [newEquipmentDescription, setNewEquipmentDescription] = useState('')
  const [newEquipmentCondition, setNewEquipmentCondition] = useState('good')
  const [showEquipmentTypeDropdown, setShowEquipmentTypeDropdown] = useState(false)
  const [showEquipmentBrandDropdown, setShowEquipmentBrandDropdown] = useState(false)
  const [showEquipmentModelDropdown, setShowEquipmentModelDropdown] = useState(false)
  const [allowCustomModel, setAllowCustomModel] = useState(false)
  const [equipmentValidationError, setEquipmentValidationError] = useState<string | null>(null)
  
  // Studio editing toggles
  const [editingStudioName, setEditingStudioName] = useState(false)
  const [editingStudioAddress, setEditingStudioAddress] = useState(false)
  const [showStudioAddress, setShowStudioAddress] = useState(true)
  
  // Location visibility toggle
  const [showLocation, setShowLocation] = useState(true)
  
  // Sync showLocation state with formData
  useEffect(() => {
    setFormData(prev => ({ ...prev, show_location: showLocation }))
  }, [showLocation])
  
  // Validation states
  const [talentCategoryError, setTalentCategoryError] = useState<string | null>(null)
  const [specializationError, setSpecializationError] = useState<string | null>(null)
  const [eyeColorError, setEyeColorError] = useState<string | null>(null)
  const [hairColorError, setHairColorError] = useState<string | null>(null)
  const [talentCategoryValidating, setTalentCategoryValidating] = useState(false)
  const [specializationValidating, setSpecializationValidating] = useState(false)
  const [eyeColorValidating, setEyeColorValidating] = useState(false)
  const [hairColorValidating, setHairColorValidating] = useState(false)
  
  // Vibe tags management state
  const [vibeTags, setVibeTags] = useState<string[]>([])
  const [customVibeInput, setCustomVibeInput] = useState('')
  const [showCustomVibeInput, setShowCustomVibeInput] = useState(false)
  
  // Profile tabs state - three main tabs
  const [activeProfileTab, setActiveProfileTab] = useState<'personal' | 'style' | 'professional'>('personal')

  // Tag validation state
  const [styleTagError, setStyleTagError] = useState<string | null>(null)
  const [vibeTagError, setVibeTagError] = useState<string | null>(null)
  const [styleTagValidating, setStyleTagValidating] = useState(false)
  const [vibeTagValidating, setVibeTagValidating] = useState(false)

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/auth/signin')
      return
    }

    if (user) {
      fetchProfile()
    }
  }, [user, authLoading, router])

  // Handle URL tab parameter
  useEffect(() => {
    const tab = searchParams.get('tab')
    if (tab === 'credits' || tab === 'settings') {
      setActiveTab(tab)
    }
  }, [searchParams])

  // Fetch stats when profile is loaded
  useEffect(() => {
    if (profile && user) {
      fetchStats()
    }
  }, [profile, user])

  // Initialize header position from profile data
  useEffect(() => {
    if (profile?.header_banner_position) {
      try {
        const position = JSON.parse(profile.header_banner_position)
        setHeaderPosition(position)
      } catch {
        setHeaderPosition({ y: 0, scale: 1 })
      }
    }
  }, [profile?.header_banner_position])

  // Close header options dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showHeaderOptions) {
        setShowHeaderOptions(false)
      }
    }

    if (showHeaderOptions) {
      document.addEventListener('click', handleClickOutside)
      return () => document.removeEventListener('click', handleClickOutside)
    }
  }, [showHeaderOptions])

  // Keyboard support for header positioning
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (!profile?.header_banner_url) return
      
      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
        event.preventDefault()
        const step = 10 // pixels to move per keypress
        const newY = event.key === 'ArrowUp' 
          ? headerPosition.y - step 
          : headerPosition.y + step
        
        const newPosition = { ...headerPosition, y: newY }
        setHeaderPosition(newPosition)
        
        // Save position after keyboard adjustment
        if (user && supabase) {
          supabase
            .from('users_profile')
            .update({
              header_banner_position: JSON.stringify(newPosition),
              updated_at: new Date().toISOString()
            })
            .eq('user_id', user.id)
            .then(({ error }) => {
              if (error) console.error('Error updating header position:', error)
            })
        }
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [profile?.header_banner_url, headerPosition, user])

  // Global mouse event handling for drag
  useEffect(() => {
    if (!isDraggingHeader) return

    const handleGlobalMouseMove = (e: MouseEvent) => {
      if (!profile?.header_banner_url) {
        console.log('❌ No header banner URL in global mouse move')
        return
      }
      
      console.log('🌍 Global mouse move while dragging:', { 
        clientY: e.clientY, 
        isDraggingHeader,
        hasBanner: !!profile.header_banner_url 
      })
      
      // Get the header container bounds
      const headerContainer = document.querySelector('[data-header-container]') as HTMLElement
      if (!headerContainer) {
        console.log('❌ Header container not found')
        return
      }
      
      const rect = headerContainer.getBoundingClientRect()
      const relativeY = e.clientY - rect.top
      const percentage = relativeY / rect.height
      const y = (percentage - 0.5) * 200 // Limit movement to ±200px
      
      console.log('🌍 Global drag update:', { 
        relativeY, 
        percentage, 
        y, 
        rectTop: rect.top,
        rectHeight: rect.height,
        newPosition: { y }
      })
      
      setHeaderPosition(prevPosition => {
        const newPos = { ...prevPosition, y }
        console.log('🔄 Setting new position:', newPos)
        return newPos
      })
    }

    const handleGlobalMouseUp = () => {
      console.log('🌍 Global mouse up - ending drag')
      handleHeaderDragEnd()
    }

    document.addEventListener('mousemove', handleGlobalMouseMove)
    document.addEventListener('mouseup', handleGlobalMouseUp)

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove)
      document.removeEventListener('mouseup', handleGlobalMouseUp)
    }
  }, [isDraggingHeader, profile?.header_banner_url])

  // Fetch predefined options when component mounts
  useEffect(() => {
    if (user) {
      fetchPredefinedOptions()
      fetchMeasurementsData()
      fetchEquipmentData()
    }
  }, [user])

  // Debug logging for clothing sizes
  useEffect(() => {
    // Reset clothing size value when system changes
    if (newClothingSizeSystem) {
      setNewClothingSizeValue('')
    }
  }, [newClothingSizeSystem])

  useEffect(() => {
    // Reset clothing size value when type changes
    setNewClothingSizeValue('')
  }, [newClothingType])

  const fetchPredefinedOptions = async () => {
    try {
      setLoadingPredefinedOptions(true)
      console.log('🔍 Starting to fetch predefined options...')
      
      if (!supabase) {
        console.error('❌ Supabase client not available')
        return
      }
      
      console.log('✅ Supabase client available, fetching talent categories...')
      
      // Fetch predefined talent categories
      const { data: categoriesData, error: categoriesError } = await supabase!
        .from('predefined_talent_categories')
        .select('category_name')
        .eq('is_active', true)
        .order('sort_order')

      console.log('📊 Talent categories query result:', { categoriesData, categoriesError })

      if (categoriesError) {
        console.error('❌ Error fetching talent categories:', categoriesError)
        // If table doesn't exist, use fallback data
        const fallbackCategories = [
          'Portrait Photographer', 'Fashion Photographer', 'Wedding Photographer', 'Event Photographer',
          'Commercial Photographer', 'Editorial Photographer', 'Street Photographer', 'Documentary Photographer',
          'Fine Art Photographer', 'Product Photographer', 'Architecture Photographer', 'Nature Photographer',
          'Sports Photographer', 'Concert Photographer', 'Food Photographer', 'Real Estate Photographer',
          'Aerial Photographer', 'Underwater Photographer', 'Macro Photographer', 'Astrophotographer',
          'Fashion Model', 'Commercial Model', 'Portrait Model', 'Fitness Model',
          'Plus Size Model', 'Petite Model', 'Runway Model', 'Print Model',
          'Lingerie Model', 'Swimwear Model', 'Beauty Model', 'Hand Model',
          'Foot Model', 'Art Model', 'Character Model', 'Mature Model',
          'Videographer', 'Cinematographer', 'Documentary Filmmaker', 'Commercial Videographer',
          'Wedding Videographer', 'Event Videographer', 'Music Video Director', 'Short Film Director',
          'Corporate Videographer', 'Drone Videographer', 'Live Stream Producer', 'Video Editor',
          'Hair Stylist', 'Makeup Artist', 'Bridal Hair & Makeup', 'Editorial Hair Stylist',
          'Editorial Makeup Artist', 'Special Effects Makeup', 'Beauty Hair Stylist', 'Beauty Makeup Artist',
          'Fashion Hair Stylist', 'Fashion Makeup Artist', 'Commercial Hair Stylist', 'Commercial Makeup Artist',
          'Fashion Stylist', 'Wardrobe Stylist', 'Set Designer', 'Prop Stylist',
          'Food Stylist', 'Interior Stylist', 'Event Stylist', 'Bridal Stylist',
          'Commercial Stylist', 'Editorial Stylist', 'Costume Designer', 'Art Director',
          'Creative Director', 'Art Director', 'Graphic Designer', 'Web Designer',
          'Social Media Manager', 'Content Creator', 'Influencer', 'Brand Ambassador',
          'Voice Actor', 'Actor', 'Dancer', 'Performer',
          'Other'
        ]
        setPredefinedTalentCategories(fallbackCategories)
        PREDEFINED_TALENT_CATEGORIES = fallbackCategories
      } else {
        const categories = categoriesData?.map(item => item.category_name) || []
        console.log('✅ Loaded talent categories:', categories.length)
        setPredefinedTalentCategories(categories)
        PREDEFINED_TALENT_CATEGORIES = categories
      }

      console.log('🔍 Fetching specializations...')
      
      // Fetch predefined specializations
      const { data: specializationsData, error: specializationsError } = await supabase!
        .from('predefined_specializations')
        .select('specialization_name')
        .eq('is_active', true)
        .order('sort_order')

      console.log('📊 Specializations query result:', { specializationsData, specializationsError })

      if (specializationsError) {
        console.error('❌ Error fetching specializations:', specializationsError)
        // If table doesn't exist, use fallback data
        const fallbackSpecializations = [
          'Studio Photography', 'Natural Light Photography', 'Flash Photography', 'Low Light Photography',
          'Black & White Photography', 'Color Photography', 'HDR Photography', 'Panoramic Photography',
          'Time-lapse Photography', 'Long Exposure Photography', 'Candid Photography', 'Posed Photography',
          'Group Photography', 'Individual Photography', 'Couple Photography', 'Family Photography',
          'Photoshop Expert', 'Lightroom Expert', 'Capture One Expert', 'Premiere Pro Expert',
          'After Effects Expert', 'Final Cut Pro Expert', 'DaVinci Resolve Expert', 'Color Grading',
          'Photo Retouching', 'Video Editing', 'Motion Graphics', '3D Modeling',
          'Drone Operation', 'Gimbal Operation', 'Live Streaming', 'Audio Recording',
          'Fashion Industry', 'Beauty Industry', 'Wedding Industry', 'Corporate Photography',
          'Event Photography', 'Sports Photography', 'Music Industry', 'Film Industry',
          'Advertising Industry', 'Magazine Industry', 'Social Media Content', 'E-commerce Photography',
          'Real Estate Photography', 'Food Photography', 'Travel Photography', 'Pet Photography',
          'Canon Specialist', 'Nikon Specialist', 'Sony Specialist', 'Fujifilm Specialist',
          'Medium Format Photography', 'Film Photography', 'Digital Photography', 'Mirrorless Photography',
          'DSLR Photography', 'Mobile Photography', 'Action Camera Photography', '360 Photography',
          'Virtual Reality Content', 'Augmented Reality Content', 'Live Event Coverage', 'Behind-the-Scenes',
          'Brand Photography', 'Product Photography', 'Lifestyle Photography', 'Editorial Photography',
          'Commercial Photography', 'Portfolio Development', 'Social Media Strategy', 'Content Strategy',
          'Brand Development', 'Marketing Photography', 'PR Photography', 'Press Photography',
          'Trade Show Photography', 'Conference Photography', 'Workshop Photography', 'Educational Content',
          'Minimalist Style', 'Vintage Style', 'Modern Style', 'Artistic Style',
          'Documentary Style', 'Fine Art Style', 'Street Style', 'Urban Style',
          'Natural Style', 'Glamour Style', 'Editorial Style', 'Commercial Style',
          'Conceptual Photography', 'Abstract Photography', 'Surreal Photography', 'Experimental Photography',
          'Other'
        ]
        setPredefinedSpecializations(fallbackSpecializations)
        PREDEFINED_SPECIALIZATIONS = fallbackSpecializations
      } else {
        const specializations = specializationsData?.map(item => item.specialization_name) || []
        console.log('✅ Loaded specializations:', specializations.length)
        setPredefinedSpecializations(specializations)
        PREDEFINED_SPECIALIZATIONS = specializations
      }

      console.log('🔍 Fetching eye colors...')
      
      // Fetch predefined eye colors
      const { data: eyeColorsData, error: eyeColorsError } = await supabase!
        .from('predefined_eye_colors')
        .select('color_name')
        .eq('is_active', true)
        .order('sort_order')

      console.log('📊 Eye colors query result:', { eyeColorsData, eyeColorsError })

      if (eyeColorsError) {
        console.error('❌ Error fetching eye colors:', eyeColorsError)
        // If table doesn't exist, use fallback data
        const fallbackEyeColors = [
          'Brown', 'Blue', 'Green', 'Hazel', 'Gray', 'Amber', 
          'Heterochromia', 'Violet', 'Red', 'Other'
        ]
        setPredefinedEyeColors(fallbackEyeColors)
      } else {
        const eyeColors = eyeColorsData?.map(item => item.color_name) || []
        console.log('✅ Loaded eye colors:', eyeColors.length)
        setPredefinedEyeColors(eyeColors)
      }

      console.log('🔍 Fetching hair colors...')
      
      // Fetch predefined hair colors
      const { data: hairColorsData, error: hairColorsError } = await supabase!
        .from('predefined_hair_colors')
        .select('color_name')
        .eq('is_active', true)
        .order('sort_order')

      console.log('📊 Hair colors query result:', { hairColorsData, hairColorsError })

      if (hairColorsError) {
        console.error('❌ Error fetching hair colors:', hairColorsError)
        // If table doesn't exist, use fallback data
        const fallbackHairColors = [
          'Black', 'Dark Brown', 'Brown', 'Light Brown', 'Blonde', 'Light Blonde', 'Red', 'Auburn', 'Gray', 'White',
          'Blue', 'Green', 'Purple', 'Pink', 'Orange', 'Silver', 'Platinum', 'Bald', 'Other'
        ]
        setPredefinedHairColors(fallbackHairColors)
      } else {
        const hairColors = hairColorsData?.map(item => item.color_name) || []
        console.log('✅ Loaded hair colors:', hairColors.length)
        setPredefinedHairColors(hairColors)
      }
    } catch (error) {
      console.error('❌ Error fetching predefined options:', error)
    } finally {
      setLoadingPredefinedOptions(false)
      console.log('🏁 Finished fetching predefined options')
    }
  }

  const fetchMeasurementsData = async () => {
    try {
      setLoadingMeasurementsData(true)
      console.log('🔍 Starting to fetch measurements data...')
      
      if (!supabase || !user) {
        console.error('❌ Supabase client or user not available')
        return
      }

      // Fetch clothing size systems
      const { data: clothingSystemsData, error: clothingSystemsError } = await supabase!
        .from('predefined_clothing_size_systems')
        .select('*')
        .eq('is_active', true)
        .order('sort_order')

      if (clothingSystemsError) {
        console.error('❌ Error fetching clothing size systems:', clothingSystemsError)
        // Fallback to hardcoded systems if database fails
        const fallbackSystems = [
          { id: 1, system_name: 'US Letter Sizes', system_type: 'letter', region: 'US', sort_order: 1 },
          { id: 2, system_name: 'EU Letter Sizes', system_type: 'letter', region: 'EU', sort_order: 2 },
          { id: 3, system_name: 'UK Letter Sizes', system_type: 'letter', region: 'UK', sort_order: 3 },
          { id: 4, system_name: 'US Number Sizes', system_type: 'number', region: 'US', sort_order: 4 },
          { id: 5, system_name: 'EU Number Sizes', system_type: 'number', region: 'EU', sort_order: 5 },
          { id: 6, system_name: 'UK Number Sizes', system_type: 'number', region: 'UK', sort_order: 6 }
        ]
        setClothingSizeSystems(fallbackSystems)
      } else {
        console.log('✅ Loaded clothing size systems:', clothingSystemsData?.length || 0)
        setClothingSizeSystems(clothingSystemsData || [])
      }

      // Fetch clothing sizes
      const { data: clothingSizesData, error: clothingSizesError } = await supabase!
        .from('predefined_clothing_sizes')
        .select('*')
        .eq('is_active', true)
        .order('sort_order')

      if (clothingSizesError) {
        console.error('❌ Error fetching clothing sizes:', clothingSizesError)
        // Fallback to hardcoded sizes if database fails
        const fallbackSizes = [
          // US Letter Sizes (id: 1)
          { id: 1, size_system_id: 1, size_value: 'XXS', size_label: 'Extra Extra Small', sort_order: 1 },
          { id: 2, size_system_id: 1, size_value: 'XS', size_label: 'Extra Small', sort_order: 2 },
          { id: 3, size_system_id: 1, size_value: 'S', size_label: 'Small', sort_order: 3 },
          { id: 4, size_system_id: 1, size_value: 'M', size_label: 'Medium', sort_order: 4 },
          { id: 5, size_system_id: 1, size_value: 'L', size_label: 'Large', sort_order: 5 },
          { id: 6, size_system_id: 1, size_value: 'XL', size_label: 'Extra Large', sort_order: 6 },
          { id: 7, size_system_id: 1, size_value: 'XXL', size_label: 'Extra Extra Large', sort_order: 7 },
          
          // EU Letter Sizes (id: 2)
          { id: 8, size_system_id: 2, size_value: 'XXS', size_label: 'Extra Extra Small', sort_order: 1 },
          { id: 9, size_system_id: 2, size_value: 'XS', size_label: 'Extra Small', sort_order: 2 },
          { id: 10, size_system_id: 2, size_value: 'S', size_label: 'Small', sort_order: 3 },
          { id: 11, size_system_id: 2, size_value: 'M', size_label: 'Medium', sort_order: 4 },
          { id: 12, size_system_id: 2, size_value: 'L', size_label: 'Large', sort_order: 5 },
          { id: 13, size_system_id: 2, size_value: 'XL', size_label: 'Extra Large', sort_order: 6 },
          { id: 14, size_system_id: 2, size_value: 'XXL', size_label: 'Extra Extra Large', sort_order: 7 },
          
          // UK Letter Sizes (id: 3)
          { id: 15, size_system_id: 3, size_value: 'XXS', size_label: 'Extra Extra Small', sort_order: 1 },
          { id: 16, size_system_id: 3, size_value: 'XS', size_label: 'Extra Small', sort_order: 2 },
          { id: 17, size_system_id: 3, size_value: 'S', size_label: 'Small', sort_order: 3 },
          { id: 18, size_system_id: 3, size_value: 'M', size_label: 'Medium', sort_order: 4 },
          { id: 19, size_system_id: 3, size_value: 'L', size_label: 'Large', sort_order: 5 },
          { id: 20, size_system_id: 3, size_value: 'XL', size_label: 'Extra Large', sort_order: 6 },
          { id: 21, size_system_id: 3, size_value: 'XXL', size_label: 'Extra Extra Large', sort_order: 7 },
          
          // US Number Sizes (id: 4)
          { id: 22, size_system_id: 4, size_value: '0', size_label: 'Size 0', sort_order: 1 },
          { id: 23, size_system_id: 4, size_value: '2', size_label: 'Size 2', sort_order: 2 },
          { id: 24, size_system_id: 4, size_value: '4', size_label: 'Size 4', sort_order: 3 },
          { id: 25, size_system_id: 4, size_value: '6', size_label: 'Size 6', sort_order: 4 },
          { id: 26, size_system_id: 4, size_value: '8', size_label: 'Size 8', sort_order: 5 },
          { id: 27, size_system_id: 4, size_value: '10', size_label: 'Size 10', sort_order: 6 },
          { id: 28, size_system_id: 4, size_value: '12', size_label: 'Size 12', sort_order: 7 },
          { id: 29, size_system_id: 4, size_value: '14', size_label: 'Size 14', sort_order: 8 },
          { id: 30, size_system_id: 4, size_value: '16', size_label: 'Size 16', sort_order: 9 },
          { id: 31, size_system_id: 4, size_value: '18', size_label: 'Size 18', sort_order: 10 },
          { id: 32, size_system_id: 4, size_value: '20', size_label: 'Size 20', sort_order: 11 },
          
          // EU Number Sizes (id: 5)
          { id: 33, size_system_id: 5, size_value: '32', size_label: 'Size 32', sort_order: 1 },
          { id: 34, size_system_id: 5, size_value: '34', size_label: 'Size 34', sort_order: 2 },
          { id: 35, size_system_id: 5, size_value: '36', size_label: 'Size 36', sort_order: 3 },
          { id: 36, size_system_id: 5, size_value: '38', size_label: 'Size 38', sort_order: 4 },
          { id: 37, size_system_id: 5, size_value: '40', size_label: 'Size 40', sort_order: 5 },
          { id: 38, size_system_id: 5, size_value: '42', size_label: 'Size 42', sort_order: 6 },
          { id: 39, size_system_id: 5, size_value: '44', size_label: 'Size 44', sort_order: 7 },
          { id: 40, size_system_id: 5, size_value: '46', size_label: 'Size 46', sort_order: 8 },
          { id: 41, size_system_id: 5, size_value: '48', size_label: 'Size 48', sort_order: 9 },
          
          // UK Number Sizes (id: 6)
          { id: 42, size_system_id: 6, size_value: '4', size_label: 'Size 4', sort_order: 1 },
          { id: 43, size_system_id: 6, size_value: '6', size_label: 'Size 6', sort_order: 2 },
          { id: 44, size_system_id: 6, size_value: '8', size_label: 'Size 8', sort_order: 3 },
          { id: 45, size_system_id: 6, size_value: '10', size_label: 'Size 10', sort_order: 4 },
          { id: 46, size_system_id: 6, size_value: '12', size_label: 'Size 12', sort_order: 5 },
          { id: 47, size_system_id: 6, size_value: '14', size_label: 'Size 14', sort_order: 6 },
          { id: 48, size_system_id: 6, size_value: '16', size_label: 'Size 16', sort_order: 7 },
          { id: 49, size_system_id: 6, size_value: '18', size_label: 'Size 18', sort_order: 8 },
          { id: 50, size_system_id: 6, size_value: '20', size_label: 'Size 20', sort_order: 9 }
        ]
        setClothingSizes(fallbackSizes)
      } else {
        console.log('✅ Loaded clothing sizes:', clothingSizesData?.length || 0)
        setClothingSizes(clothingSizesData || [])
      }

      // Fetch shoe size systems
      const { data: shoeSystemsData, error: shoeSystemsError } = await supabase!
        .from('predefined_shoe_size_systems')
        .select('*')
        .eq('is_active', true)
        .order('sort_order')

      if (shoeSystemsError) {
        console.error('❌ Error fetching shoe size systems:', shoeSystemsError)
      } else {
        setShoeSizeSystems(shoeSystemsData || [])
      }

      // Fetch shoe sizes
      const { data: shoeSizesData, error: shoeSizesError } = await supabase!
        .from('predefined_shoe_sizes')
        .select('*')
        .eq('is_active', true)
        .order('sort_order')

      if (shoeSizesError) {
        console.error('❌ Error fetching shoe sizes:', shoeSizesError)
      } else {
        setShoeSizes(shoeSizesData || [])
      }

      // Fetch user's existing measurements
      const { data: measurementsData, error: measurementsError } = await supabase!
        .from('user_measurements')
        .select('*')
        .eq('user_id', user.id)

      if (measurementsError) {
        console.error('❌ Error fetching user measurements:', measurementsError)
      } else {
        setUserMeasurements(measurementsData || [])
      }

      // Fetch user's existing clothing sizes
      const { data: userClothingSizesData, error: userClothingSizesError } = await supabase!
        .from('user_clothing_sizes')
        .select('*')
        .eq('user_id', user.id)

      if (userClothingSizesError) {
        console.error('❌ Error fetching user clothing sizes:', userClothingSizesError)
      } else {
        setUserClothingSizes(userClothingSizesData || [])
      }

      // Fetch user's existing shoe sizes
      const { data: userShoeSizesData, error: userShoeSizesError } = await supabase!
        .from('user_shoe_sizes')
        .select('*')
        .eq('user_id', user.id)

      if (userShoeSizesError) {
        console.error('❌ Error fetching user shoe sizes:', userShoeSizesError)
      } else {
        setUserShoeSizes(userShoeSizesData || [])
      }

    } catch (error) {
      console.error('❌ Error fetching measurements data:', error)
    } finally {
      setLoadingMeasurementsData(false)
      console.log('🏁 Finished fetching measurements data')
    }
  }

  const fetchEquipmentData = async () => {
    if (!user || !supabase) return

    setLoadingEquipmentData(true)
    try {
      // Fetch equipment types
      const { data: typesData, error: typesError } = await supabase
        .from('equipment_types')
        .select('*')
        .eq('is_active', true)
        .order('sort_order')

      if (typesError) throw typesError
      setEquipmentTypes(typesData || [])

      // Fetch predefined brands and models
      const { data: brandsData, error: brandsError } = await supabase
        .from('equipment_brands')
        .select('*')
        .order('sort_order')

      if (brandsError) throw brandsError
      setEquipmentBrands(brandsData || [])

      const { data: modelsData, error: modelsError } = await supabase
        .from('equipment_predefined_models')
        .select('*')
        .order('sort_order')

      if (modelsError) throw modelsError
      setEquipmentModels(modelsData || [])

      // Fetch user equipment using the view
      const { data: equipmentData, error: equipmentError } = await supabase
        .from('user_equipment_view')
        .select('*')
        .eq('user_id', user.id)

      if (equipmentError) throw equipmentError
      setUserEquipment(equipmentData || [])

    } catch (error) {
      console.error('Error fetching equipment data:', error)
    } finally {
      setLoadingEquipmentData(false)
    }
  }

  const addEquipment = async () => {
    if (!user || !supabase || !selectedEquipmentType) return
    
    setEquipmentValidationError(null)
    
    // Determine the brand and model to use
    const brandToUse = allowCustomModel ? newEquipmentBrand.trim() : getBrandDisplayName(selectedEquipmentBrand)
    const modelToUse = allowCustomModel ? newEquipmentModel.trim() : getModelDisplayName(selectedEquipmentModel)
    
    if (!brandToUse || !modelToUse) {
      setEquipmentValidationError('Please select or enter both brand and model')
      return
    }

    // Validate custom inputs
    if (allowCustomModel) {
      const brandValidation = validateEquipmentInput(brandToUse, 'brand')
      if (!brandValidation.isValid) {
        setEquipmentValidationError(brandValidation.error!)
        return
      }
      
      const modelValidation = validateEquipmentInput(modelToUse, 'model')
      if (!modelValidation.isValid) {
        setEquipmentValidationError(modelValidation.error!)
        return
      }
      
      // Check if brand already exists
      const brandExists = await checkBrandExists(brandToUse, selectedEquipmentType)
      if (brandExists) {
        setEquipmentValidationError('This brand already exists for this equipment type. Please select it from the dropdown instead.')
        return
      }
      
      // Check if model already exists for the brand
      if (selectedEquipmentBrand) {
        const modelExists = await checkModelExists(modelToUse, selectedEquipmentBrand)
        if (modelExists) {
          setEquipmentValidationError('This model already exists for this brand. Please select it from the dropdown instead.')
          return
        }
      }
    }

    try {
      // Create equipment model
      const { data: modelData, error: modelError } = await supabase
        .from('equipment_models')
        .insert({
          user_id: user.id,
          equipment_type_id: selectedEquipmentType,
          brand: brandToUse,
          model: modelToUse,
          description: null, // Disabled for now
          condition: 'good' // Default condition
        })
        .select()
        .single()

      if (modelError) throw modelError

      // Link to user equipment
      const { error: userEquipmentError } = await supabase
        .from('user_equipment')
        .insert({
          user_id: user.id,
          equipment_model_id: modelData.id,
          is_primary: false,
          display_order: userEquipment.length
        })

      if (userEquipmentError) throw userEquipmentError

      // Refresh equipment data
      await fetchEquipmentData()

      // Reset form
      setSelectedEquipmentType('')
      setSelectedEquipmentBrand('')
      setSelectedEquipmentModel('')
      setNewEquipmentBrand('')
      setNewEquipmentModel('')
      setAllowCustomModel(false)
      setEquipmentValidationError(null)

    } catch (error) {
      console.error('Error adding equipment:', error)
      setEquipmentValidationError('Failed to add equipment. Please try again.')
    }
  }

  const removeEquipment = async (equipmentId: string) => {
    if (!user || !supabase) return

    try {
      // Remove from user_equipment (this will cascade delete the equipment_model)
      const { error } = await supabase
        .from('user_equipment')
        .delete()
        .eq('id', equipmentId)
        .eq('user_id', user.id)

      if (error) throw error

      // Refresh equipment data
      await fetchEquipmentData()

    } catch (error) {
      console.error('Error removing equipment:', error)
    }
  }

  // Helper functions for equipment form
  const getBrandsForType = (equipmentTypeId: string) => {
    return equipmentBrands.filter(brand => brand.equipment_type_id === equipmentTypeId)
  }

  const getModelsForBrand = (brandId: string) => {
    return equipmentModels.filter(model => model.brand_id === brandId)
  }

  const getBrandDisplayName = (brandId: string) => {
    const brand = equipmentBrands.find(b => b.id === brandId)
    return brand ? brand.display_name : ''
  }

  const getModelDisplayName = (modelId: string) => {
    const model = equipmentModels.find(m => m.id === modelId)
    return model ? model.model_name : ''
  }

  // Equipment validation functions
  const validateEquipmentInput = (input: string, type: 'brand' | 'model'): { isValid: boolean; error?: string } => {
    const normalized = input.toLowerCase().trim()
    
    // Check length
    if (normalized.length < 2) {
      return { isValid: false, error: `${type} must be at least 2 characters long` }
    }
    
    if (normalized.length > 50) {
      return { isValid: false, error: `${type} must be 50 characters or less` }
    }
    
    // Check for inappropriate content (using existing patterns)
    const inappropriateWords = [
      'fuck', 'shit', 'damn', 'bitch', 'asshole', 'bastard', 'crap',
      'nude', 'naked', 'sex', 'porn', 'xxx', 'nsfw', 'adult',
      'hate', 'nazi', 'racist', 'sexist', 'homophobic', 'transphobic',
      'illegal', 'drugs', 'violence', 'weapon', 'blood', 'gore'
    ]
    
    for (const word of inappropriateWords) {
      if (normalized.includes(word)) {
        return { isValid: false, error: `${type} contains inappropriate content` }
      }
    }
    
    // Check for only letters, numbers, spaces, hyphens, and parentheses
    if (!/^[a-z0-9\s\-()]+$/i.test(input)) {
      return { isValid: false, error: `${type} can only contain letters, numbers, spaces, hyphens, and parentheses` }
    }
    
    // Check for excessive repetition
    if (/(.)\1{3,}/.test(normalized)) {
      return { isValid: false, error: `${type} contains excessive repetition` }
    }
    
    return { isValid: true }
  }

  const checkBrandExists = async (brandName: string, equipmentTypeId: string): Promise<boolean> => {
    if (!supabase) return false
    
    try {
      const { data, error } = await supabase
        .from('equipment_brands')
        .select('id')
        .eq('name', brandName.toLowerCase().trim())
        .eq('equipment_type_id', equipmentTypeId)
        .single()
      
      return !error && !!data
    } catch (error) {
      console.error('Error checking brand existence:', error)
      return false
    }
  }

  const checkModelExists = async (modelName: string, brandId: string): Promise<boolean> => {
    if (!supabase) return false
    
    try {
      const { data, error } = await supabase
        .from('equipment_predefined_models')
        .select('id')
        .eq('model_name', modelName.trim())
        .eq('brand_id', brandId)
        .single()
      
      return !error && !!data
    } catch (error) {
      console.error('Error checking model existence:', error)
      return false
    }
  }

  const fetchProfile = async () => {
    if (!user) return

    try {
      if (!supabase) {
        console.error('Supabase client not available')
        return
      }

      const { data, error } = await supabase!
        .from('users_profile')
        .select('*')
        .eq('user_id', user.id)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          router.push('/auth/create-profile')
          return
        }
        console.error('Error fetching profile:', error)
        setError('Failed to load profile')
      } else {
        setProfile(data)
        setShowLocation(data.show_location !== undefined ? data.show_location : true)
        
        // Sanitize array fields from database to ensure they're proper arrays
        const sanitizeArrayField = (field: any): string[] => {
          if (Array.isArray(field)) {
            return field.filter(item => item && typeof item === 'string' && item.trim())
          }
          if (typeof field === 'string' && field.trim()) {
            // If it's a string, try to parse it as JSON array
            try {
              const parsed = JSON.parse(field)
              return Array.isArray(parsed) ? parsed.filter(item => item && typeof item === 'string' && item.trim()) : []
            } catch {
              return []
            }
          }
          return []
        }
        
        setFormData({
          display_name: data.display_name || '',
          handle: data.handle || '',
          bio: data.bio || '',
          city: data.city || '',
          country: data.country || '',
          show_location: data.show_location !== undefined ? data.show_location : true,
          date_of_birth: data.date_of_birth && data.date_of_birth.trim() ? data.date_of_birth : '',
          header_banner_url: data.header_banner_url || '',
          header_banner_position: data.header_banner_position || '',
          phone_number: data.phone_number || '',
          instagram_handle: data.instagram_handle || '',
          tiktok_handle: data.tiktok_handle || '',
          website_url: data.website_url || '',
          portfolio_url: data.portfolio_url || '',
          years_experience: data.years_experience || 0,
          specializations: sanitizeArrayField(data.specializations),
          equipment_list: sanitizeArrayField(data.equipment_list),
          editing_software: sanitizeArrayField(data.editing_software),
          languages: sanitizeArrayField(data.languages),
          hourly_rate_min: data.hourly_rate_min || 25,
          hourly_rate_max: data.hourly_rate_max || 100,
          available_for_travel: data.available_for_travel || false,
          travel_radius_km: data.travel_radius_km || 50,
          travel_unit_preference: data.travel_unit_preference || 'km',
          studio_name: data.studio_name || '',
          has_studio: data.has_studio || false,
          studio_address: data.studio_address || '',
          typical_turnaround_days: data.typical_turnaround_days || 0,
          turnaround_unit_preference: data.turnaround_unit_preference || 'days',
          height_cm: data.height_cm || 0,
          measurements: data.measurements || '',
          eye_color: data.eye_color || '',
          hair_color: data.hair_color || '',
          shoe_size: data.shoe_size || '',
          clothing_sizes: sanitizeArrayField(data.clothing_sizes),
          tattoos: data.tattoos || false,
          piercings: data.piercings || false,
          talent_categories: sanitizeArrayField(data.talent_categories),
          style_tags: sanitizeArrayField(data.style_tags),
        })
        setVibeTags(sanitizeArrayField(data.vibe_tags))
        
        // Fetch user measurements, clothing sizes, and shoe sizes
        await fetchUserMeasurements(data.id)
        await fetchUserClothingSizes(data.id)
        await fetchUserShoeSizes(data.id)
      }
    } catch (err) {
      console.error('Error:', err)
      setError('Failed to load profile')
    } finally {
      setLoading(false)
    }
  }

  const fetchUserMeasurements = async (profileId: string) => {
    if (!supabase) return

    try {
      const { data, error } = await supabase
        .from('user_measurements')
        .select('*')
        .eq('user_id', profileId)
        .order('measurement_type')

      if (error) {
        console.error('Error fetching user measurements:', error)
      } else {
        setUserMeasurements(data || [])
      }
    } catch (error) {
      console.error('Error fetching user measurements:', error)
    }
  }

  const fetchUserClothingSizes = async (profileId: string) => {
    if (!supabase) return

    try {
      const { data, error } = await supabase
        .from('user_clothing_sizes')
        .select('*')
        .eq('user_id', profileId)
        .order('clothing_type')

      if (error) {
        console.error('Error fetching user clothing sizes:', error)
      } else {
        setUserClothingSizes(data || [])
      }
    } catch (error) {
      console.error('Error fetching user clothing sizes:', error)
    }
  }

  const fetchUserShoeSizes = async (profileId: string) => {
    if (!supabase) return

    try {
      const { data, error } = await supabase
        .from('user_shoe_sizes')
        .select('*')
        .eq('user_id', profileId)
        .order('size_value')

      if (error) {
        console.error('Error fetching user shoe sizes:', error)
      } else {
        setUserShoeSizes(data || [])
      }
    } catch (error) {
      console.error('Error fetching user shoe sizes:', error)
    }
  }

  const handleSave = async () => {
    if (!user || !profile) return

    // Ensure array fields are properly formatted - filter out empty strings and ensure arrays
    const sanitizeArray = (arr: any): string[] => {
      if (!arr) return []
      if (typeof arr === 'string') {
        if (arr.trim() === '') return []
        try {
          const parsed = JSON.parse(arr)
          return Array.isArray(parsed) ? parsed.filter(item => item && typeof item === 'string' && item.trim()) : []
        } catch {
          return []
        }
      }
      if (Array.isArray(arr)) {
        return arr.filter(item => item && typeof item === 'string' && item.trim())
      }
      return []
    }

    const sanitizedTalentCategories = sanitizeArray(formData.talent_categories)
    const sanitizedStyleTags = sanitizeArray(formData.style_tags)
    const sanitizedVibeTags = sanitizeArray(vibeTags)
    const sanitizedSpecializations = sanitizeArray(formData.specializations)
    const sanitizedLanguages = sanitizeArray(formData.languages)
    const sanitizedEquipmentList = sanitizeArray(formData.equipment_list)
    const sanitizedEditingSoftware = sanitizeArray(formData.editing_software)
    const sanitizedClothingSizes = sanitizeArray(formData.clothing_sizes)
    
    // Sanitize date fields - convert empty strings to null
    const sanitizedDateOfBirth = formData.date_of_birth && formData.date_of_birth.trim() 
      ? formData.date_of_birth 
      : null
    
    // Sanitize numeric fields with constraints
    const sanitizedHeightCm = formData.height_cm && formData.height_cm >= 100 && formData.height_cm <= 250
      ? formData.height_cm 
      : null
    
    const sanitizedYearsExperience = formData.years_experience && formData.years_experience >= 0 && formData.years_experience <= 50
      ? formData.years_experience 
      : null
    
    const sanitizedTravelRadiusKm = formData.travel_radius_km && formData.travel_radius_km >= 0 && formData.travel_radius_km <= 10000
      ? formData.travel_radius_km 
      : null
    
    const sanitizedTurnaroundDays = formData.typical_turnaround_days && formData.typical_turnaround_days >= 1 && formData.typical_turnaround_days <= 365
      ? formData.typical_turnaround_days 
      : null
    
    const sanitizedHourlyRateMin = formData.hourly_rate_min && formData.hourly_rate_min >= 0
      ? formData.hourly_rate_min 
      : null
    
    const sanitizedHourlyRateMax = formData.hourly_rate_max && formData.hourly_rate_max >= 0 && 
      (sanitizedHourlyRateMin === null || formData.hourly_rate_max >= sanitizedHourlyRateMin)
      ? formData.hourly_rate_max 
      : null

    console.log('🔄 Starting profile save...')
    console.log('📋 Data to save:', {
      display_name: formData.display_name,
      handle: formData.handle,
      bio: formData.bio,
      city: formData.city,
      country: formData.country,
      date_of_birth: sanitizedDateOfBirth,
      header_banner_url: formData.header_banner_url,
      header_banner_position: formData.header_banner_position,
      phone_number: formData.phone_number,
      instagram_handle: formData.instagram_handle,
      tiktok_handle: formData.tiktok_handle,
      website_url: formData.website_url,
      portfolio_url: formData.portfolio_url,
      years_experience: formData.years_experience,
      specializations: sanitizedSpecializations,
      equipment_list: formData.equipment_list,
      editing_software: formData.editing_software,
      languages: sanitizedLanguages,
      hourly_rate_min: formData.hourly_rate_min,
      hourly_rate_max: formData.hourly_rate_max,
      available_for_travel: formData.available_for_travel,
      travel_radius_km: formData.travel_radius_km,
      travel_unit_preference: formData.travel_unit_preference,
      studio_name: formData.studio_name,
      has_studio: formData.has_studio,
      studio_address: formData.studio_address,
      show_location: formData.show_location,
      typical_turnaround_days: sanitizedTurnaroundDays,
      turnaround_unit_preference: formData.turnaround_unit_preference,
      height_cm: sanitizedHeightCm,
      measurements: formData.measurements,
      eye_color: formData.eye_color,
      hair_color: formData.hair_color,
      shoe_size: formData.shoe_size,
      clothing_sizes: sanitizedClothingSizes,
      tattoos: formData.tattoos,
      piercings: formData.piercings,
      talent_categories: sanitizedTalentCategories,
      style_tags: sanitizedStyleTags,
      vibe_tags: sanitizedVibeTags,
    })

    setSaving(true)
    setError(null)

    try {
      if (!supabase) {
        console.error('Supabase client not available')
        setSaving(false)
        return
      }

      // Debug: Log the exact data being sent to database
      const updateData = {
        display_name: formData.display_name,
        handle: formData.handle,
        bio: formData.bio,
        city: formData.city,
        country: formData.country,
        date_of_birth: sanitizedDateOfBirth,
        header_banner_url: formData.header_banner_url,
        header_banner_position: formData.header_banner_position,
        phone_number: formData.phone_number,
        instagram_handle: formData.instagram_handle,
        tiktok_handle: formData.tiktok_handle,
        website_url: formData.website_url,
        portfolio_url: formData.portfolio_url,
      years_experience: sanitizedYearsExperience,
      specializations: sanitizedSpecializations,
      equipment_list: sanitizedEquipmentList,
      editing_software: sanitizedEditingSoftware,
      languages: sanitizedLanguages,
      hourly_rate_min: sanitizedHourlyRateMin,
      hourly_rate_max: sanitizedHourlyRateMax,
      available_for_travel: formData.available_for_travel,
      travel_radius_km: sanitizedTravelRadiusKm,
        travel_unit_preference: formData.travel_unit_preference,
        studio_name: formData.studio_name,
        has_studio: formData.has_studio,
        studio_address: formData.studio_address,
        show_location: formData.show_location,
        typical_turnaround_days: sanitizedTurnaroundDays,
        turnaround_unit_preference: formData.turnaround_unit_preference,
        height_cm: sanitizedHeightCm,
        measurements: formData.measurements,
        eye_color: formData.eye_color,
        hair_color: formData.hair_color,
        shoe_size: formData.shoe_size,
        clothing_sizes: sanitizedClothingSizes,
        tattoos: formData.tattoos,
        piercings: formData.piercings,
        talent_categories: sanitizedTalentCategories,
        style_tags: sanitizedStyleTags,
        vibe_tags: sanitizedVibeTags,
        updated_at: new Date().toISOString(),
      }
      
      console.log('🔍 Array fields being sent to database:', {
        talent_categories: sanitizedTalentCategories,
        style_tags: sanitizedStyleTags,
        vibe_tags: sanitizedVibeTags,
        specializations: sanitizedSpecializations,
        languages: sanitizedLanguages,
        equipment_list: sanitizedEquipmentList,
        editing_software: sanitizedEditingSoftware,
        clothing_sizes: sanitizedClothingSizes,
      })
      
      console.log('📅 Date field being sent to database:', {
        date_of_birth: sanitizedDateOfBirth,
        original_value: formData.date_of_birth,
      })
      
      console.log('📏 Numeric fields being sent to database:', {
        height_cm: { sanitized: sanitizedHeightCm, original: formData.height_cm, constraint: '100-250 cm' },
        years_experience: { sanitized: sanitizedYearsExperience, original: formData.years_experience, constraint: '0-50 years' },
        travel_radius_km: { sanitized: sanitizedTravelRadiusKm, original: formData.travel_radius_km, constraint: '0-10000 km' },
        typical_turnaround_days: { sanitized: sanitizedTurnaroundDays, original: formData.typical_turnaround_days, constraint: '1-365 days' },
        hourly_rate_min: { sanitized: sanitizedHourlyRateMin, original: formData.hourly_rate_min, constraint: '>= 0' },
        hourly_rate_max: { sanitized: sanitizedHourlyRateMax, original: formData.hourly_rate_max, constraint: '>= min rate' },
      })

      const { error, data } = await supabase!
        .from('users_profile')
        .update(updateData)
        .eq('user_id', user.id)
        .select()

      if (error) {
        console.error('❌ Error updating profile:', JSON.stringify(error, null, 2))
        setError(`Failed to update profile: ${error.message}`)
      } else {
        console.log('✅ Profile updated successfully:', data)
        setProfile({
          ...profile,
          ...formData,
          vibe_tags: vibeTags,
          updated_at: new Date().toISOString(),
        })
        setEditing(false)
        console.log('✅ Edit mode disabled, save completed')
      }
    } catch (err) {
      console.error('❌ Unexpected error:', err)
      setError('Failed to update profile - check console for details')
    } finally {
      setSaving(false)
      console.log('🏁 Save process finished')
    }
  }

  const handleCancel = () => {
    if (profile) {
      setFormData({
        display_name: profile.display_name || '',
        handle: profile.handle || '',
        bio: profile.bio || '',
        city: profile.city || '',
        country: profile.country || '',
        show_location: profile.show_location !== undefined ? profile.show_location : true,
        date_of_birth: profile.date_of_birth && profile.date_of_birth.trim() ? profile.date_of_birth : '',
        header_banner_url: profile.header_banner_url || '',
        header_banner_position: profile.header_banner_position || '',
        phone_number: profile.phone_number || '',
        instagram_handle: profile.instagram_handle || '',
        tiktok_handle: profile.tiktok_handle || '',
        website_url: profile.website_url || '',
        portfolio_url: profile.portfolio_url || '',
        years_experience: profile.years_experience || 0,
        specializations: profile.specializations || [],
        equipment_list: profile.equipment_list || [],
        editing_software: profile.editing_software || [],
        languages: profile.languages || [],
        hourly_rate_min: profile.hourly_rate_min || 25,
        hourly_rate_max: profile.hourly_rate_max || 100,
        available_for_travel: profile.available_for_travel || false,
        travel_radius_km: profile.travel_radius_km || 50,
        travel_unit_preference: profile.travel_unit_preference || 'km',
        studio_name: profile.studio_name || '',
        has_studio: profile.has_studio || false,
        studio_address: profile.studio_address || '',
        typical_turnaround_days: profile.typical_turnaround_days || 0,
        turnaround_unit_preference: profile.turnaround_unit_preference || 'days',
        height_cm: profile.height_cm || 0,
        measurements: profile.measurements || '',
        eye_color: profile.eye_color || '',
        hair_color: profile.hair_color || '',
        shoe_size: profile.shoe_size || '',
        clothing_sizes: Array.isArray(profile.clothing_sizes) ? profile.clothing_sizes : [],
        tattoos: profile.tattoos || false,
        piercings: profile.piercings || false,
        talent_categories: profile.talent_categories || [],
        style_tags: profile.style_tags || [],
      })
    }
    setEditing(false)
    setError(null)
  }

  const addStyleTag = async () => {
    const trimmed = newStyleTag.trim()
    if (!trimmed) return

    console.log('🏷️ Adding style tag:', trimmed)

    // Clear any previous errors
    setStyleTagError(null)
    setStyleTagValidating(true)

    try {
      // Check for duplicates in current form data
      if (formData.style_tags.includes(trimmed)) {
        console.log('⚠️ Duplicate style tag detected')
        setStyleTagError('This style already exists in your profile')
        setStyleTagValidating(false)
        return
      }

      console.log('🔍 Validating style tag...')
      // Validate content and check for database duplicates
      const validation = await validateAndCheckTag(trimmed, 'style')
      console.log('✅ Validation result:', validation)
      
      if (!validation.isValid) {
        console.log('❌ Validation failed:', validation.reason)
        setStyleTagError(validation.reason || 'Invalid style tag')
        setStyleTagValidating(false)
        return
      }

      // Add the tag if validation passes
      console.log('✅ Adding style tag to form data')
      setFormData({
        ...formData,
        style_tags: [...formData.style_tags, trimmed],
      })
      setNewStyleTag('')
      setStyleTagError(null)
      console.log('✅ Style tag added successfully')
    } catch (error) {
      console.error('❌ Error validating style tag:', error)
      setStyleTagError('Error validating tag. Please try again.')
    } finally {
      setStyleTagValidating(false)
    }
  }

  const removeStyleTag = (tag: string) => {
    setFormData({
      ...formData,
      style_tags: formData.style_tags.filter(t => t !== tag),
    })
  }

  const toggleStyleTag = (tag: string) => {
    if (formData.style_tags.includes(tag)) {
      removeStyleTag(tag)
    } else {
      setFormData({
        ...formData,
        style_tags: [...formData.style_tags, tag],
      })
    }
  }

  const addCustomTalentCategory = async () => {
    const trimmed = sanitizeInput(newTalentCategory)
    if (!trimmed) return

    setTalentCategoryError(null)
    setTalentCategoryValidating(true)

    try {
      // Check for duplicates
      if (formData.talent_categories.includes(trimmed)) {
        setTalentCategoryError('This talent category already exists in your profile')
        setTalentCategoryValidating(false)
        return
      }

      // Validate input
      const validation = validateCustomInput(trimmed, 'talent_category')
      if (!validation.isValid) {
        setTalentCategoryError(validation.error!)
        setTalentCategoryValidating(false)
        return
      }

      // Add the category
      setFormData({
        ...formData,
        talent_categories: [...formData.talent_categories, trimmed],
      })
      setNewTalentCategory('')
      setTalentCategoryError(null)
    } catch (error) {
      console.error('Error adding talent category:', error)
      setTalentCategoryError('Failed to add talent category')
    } finally {
      setTalentCategoryValidating(false)
    }
  }

  const addCustomSpecialization = async () => {
    const trimmed = sanitizeInput(newSpecialization)
    if (!trimmed) return

    setSpecializationError(null)
    setSpecializationValidating(true)

    try {
      // Check for duplicates
      if (formData.specializations.includes(trimmed)) {
        setSpecializationError('This specialization already exists in your profile')
        setSpecializationValidating(false)
        return
      }

      // Validate input
      const validation = validateCustomInput(trimmed, 'specialization')
      if (!validation.isValid) {
        setSpecializationError(validation.error!)
        setSpecializationValidating(false)
        return
      }

      // Add the specialization
      setFormData({
        ...formData,
        specializations: [...formData.specializations, trimmed],
      })
      setNewSpecialization('')
      setSpecializationError(null)
    } catch (error) {
      console.error('Error adding specialization:', error)
      setSpecializationError('Failed to add specialization')
    } finally {
      setSpecializationValidating(false)
    }
  }

  const addCustomEyeColor = async () => {
    const trimmed = sanitizeInput(newEyeColor)
    if (!trimmed) return

    setEyeColorError(null)
    setEyeColorValidating(true)

    try {
      // Check for duplicates
      if (formData.eye_color === trimmed) {
        setEyeColorError('This eye color is already selected')
        setEyeColorValidating(false)
        return
      }

      // Validate input
      const validation = validateCustomInput(trimmed, 'eye_color')
      if (!validation.isValid) {
        setEyeColorError(validation.error!)
        setEyeColorValidating(false)
        return
      }

      // Add the eye color
      setFormData({
        ...formData,
        eye_color: trimmed,
      })
      setNewEyeColor('')
      setEyeColorError(null)
    } catch (error) {
      console.error('Error adding eye color:', error)
      setEyeColorError('Failed to add eye color')
    } finally {
      setEyeColorValidating(false)
    }
  }

  const addCustomHairColor = async () => {
    const trimmed = sanitizeInput(newHairColor)
    if (!trimmed) return

    setHairColorError(null)
    setHairColorValidating(true)

    try {
      // Check for duplicates
      if (formData.hair_color === trimmed) {
        setHairColorError('This hair color is already selected')
        setHairColorValidating(false)
        return
      }

      // Validate input
      const validation = validateCustomInput(trimmed, 'hair_color')
      if (!validation.isValid) {
        setHairColorError(validation.error!)
        setHairColorValidating(false)
        return
      }

      // Add the hair color
      setFormData({
        ...formData,
        hair_color: trimmed,
      })
      setNewHairColor('')
      setHairColorError(null)
    } catch (error) {
      console.error('Error adding hair color:', error)
      setHairColorError('Failed to add hair color')
    } finally {
      setHairColorValidating(false)
    }
  }

  const addMeasurement = async () => {
    if (!newMeasurementType || !newMeasurementValue || !user || !supabase || !profile) return

    // Ensure the user has a profile record before adding measurements
    if (!profile.id) {
      console.error('❌ No profile ID found, cannot add measurements')
      setError('Profile not found. Please refresh the page and try again.')
      return
    }

    console.log('🎯 Using profile.id for measurement insert:', profile.id)

    try {
      const { data, error } = await supabase
        .from('user_measurements')
        .insert({
          user_id: profile.id, // Use profile.id (the profile record ID)
          measurement_type: newMeasurementType,
          measurement_value: parseFloat(newMeasurementValue),
          unit: newMeasurementUnit
        })
        .select()
        .single()

      if (error) {
        console.error('Error adding measurement:', error)
        return
      }

      setUserMeasurements([...userMeasurements, data])
      setNewMeasurementType('')
      setNewMeasurementValue('')
      setNewMeasurementUnit('cm')
      
      // Refresh the measurements data
      if (profile?.id) {
        await fetchUserMeasurements(profile.id)
      }
    } catch (error) {
      console.error('Error adding measurement:', error)
    }
  }

  const deleteMeasurement = async (measurementId: string) => {
    if (!supabase) return

    try {
      const { error } = await supabase
        .from('user_measurements')
        .delete()
        .eq('id', measurementId)

      if (error) {
        console.error('Error deleting measurement:', error)
        return
      }

      setUserMeasurements(userMeasurements.filter(m => m.id !== measurementId))
      
      // Refresh the measurements data
      if (profile?.id) {
        await fetchUserMeasurements(profile.id)
      }
    } catch (error) {
      console.error('Error deleting measurement:', error)
    }
  }

  const addShoeSize = async () => {
    if (!newShoeSizeSystem || !newShoeSizeValue || !user || !supabase || !profile) return

    // Ensure the user has a profile record before adding shoe sizes
    if (!profile.id) {
      console.error('❌ No profile ID found, cannot add shoe size')
      setError('Profile not found. Please refresh the page and try again.')
      return
    }

    try {
      const { data, error } = await supabase
        .from('user_shoe_sizes')
        .insert({
          user_id: profile.id, // Use profile.id (the profile record ID)
          size_system_id: parseInt(newShoeSizeSystem),
          size_value: newShoeSizeValue
        })
        .select()
        .single()

      if (error) {
        console.error('Error adding shoe size:', error)
        return
      }

      setUserShoeSizes([...userShoeSizes, data])
      setNewShoeSizeSystem('')
      setNewShoeSizeValue('')
      
      // Refresh the shoe sizes data
      if (profile?.id) {
        await fetchUserShoeSizes(profile.id)
      }
    } catch (error) {
      console.error('Error adding shoe size:', error)
    }
  }

  const deleteShoeSize = async (shoeSizeId: string) => {
    if (!supabase) return

    try {
      const { error } = await supabase
        .from('user_shoe_sizes')
        .delete()
        .eq('id', shoeSizeId)

      if (error) {
        console.error('Error deleting shoe size:', error)
        return
      }

      setUserShoeSizes(userShoeSizes.filter(s => s.id !== shoeSizeId))
    } catch (error) {
      console.error('Error deleting shoe size:', error)
    }
  }

  const addClothingSize = async () => {
    if (!newClothingType || !newClothingSizeValue || !user || !supabase || !profile) return
    
    // For non-custom sizes, we need a size system
    if (newClothingType !== 'custom' && !newClothingSizeSystem) return

    // Ensure the user has a profile record before adding clothing sizes
    if (!profile.id) {
      console.error('❌ No profile ID found, cannot add clothing size')
      setError('Profile not found. Please refresh the page and try again.')
      return
    }

    try {
      const { data, error } = await supabase
        .from('user_clothing_sizes')
        .insert({
          user_id: profile.id, // Use profile.id (the profile record ID)
          clothing_type: newClothingType,
          size_system_id: newClothingType === 'custom' ? null : parseInt(newClothingSizeSystem),
          size_value: newClothingSizeValue
        })
        .select()
        .single()

      if (error) {
        console.error('Error adding clothing size:', error)
        return
      }

      setUserClothingSizes([...userClothingSizes, data])
      setNewClothingType('')
      setNewClothingSizeSystem('')
      setNewClothingSizeValue('')
      
      // Refresh the clothing sizes data
      if (profile?.id) {
        await fetchUserClothingSizes(profile.id)
      }
    } catch (error) {
      console.error('Error adding clothing size:', error)
    }
  }

  const deleteClothingSize = async (clothingSizeId: string) => {
    if (!supabase) return

    try {
      const { error } = await supabase
        .from('user_clothing_sizes')
        .delete()
        .eq('id', clothingSizeId)

      if (error) {
        console.error('Error deleting clothing size:', error)
        return
      }

      setUserClothingSizes(userClothingSizes.filter(c => c.id !== clothingSizeId))
    } catch (error) {
      console.error('Error deleting clothing size:', error)
    }
  }

  const toggleTalentCategory = (category: string) => {
    if (formData.talent_categories.includes(category)) {
      setFormData({
        ...formData,
        talent_categories: formData.talent_categories.filter(c => c !== category),
      })
    } else {
      setFormData({
        ...formData,
        talent_categories: [...formData.talent_categories, category],
      })
    }
  }

  const toggleSpecialization = (specialization: string) => {
    if (formData.specializations.includes(specialization)) {
      setFormData({
        ...formData,
        specializations: formData.specializations.filter(s => s !== specialization),
      })
    } else {
      setFormData({
        ...formData,
        specializations: [...formData.specializations, specialization],
      })
    }
  }

  const getRoleDisplayName = (role: string) => {
    switch (role) {
      case 'CONTRIBUTOR': return 'Contributor'
      case 'TALENT': return 'Talent'
      case 'ADMIN': return 'Admin'
      default: return role
    }
  }

  const getSubscriptionDisplayName = (tier: string) => {
    switch (tier) {
      case 'FREE': return 'Free'
      case 'PLUS': return 'Plus'
      case 'PRO': return 'Pro'
      default: return tier
    }
  }

  const handleAvatarUpdate = (newAvatarUrl: string) => {
    // Update the profile state immediately for UI feedback
    if (profile) {
      setProfile({
        ...profile,
        avatar_url: newAvatarUrl
      })
    }
  }

  const handleBannerUpdate = async (newBannerUrl: string) => {
    if (!user) return

    try {
      if (!supabase) {
        console.error('Supabase client not available')
        return
      }

      const { error } = await supabase!
        .from('users_profile')
        .update({
          header_banner_url: newBannerUrl,
          header_banner_position: JSON.stringify(headerPosition),
          updated_at: new Date().toISOString()
        })
        .eq('user_id', user.id)

      if (error) throw error

    // Update the profile state immediately for UI feedback
    if (profile) {
      setProfile({
        ...profile,
          header_banner_url: newBannerUrl,
          header_banner_position: JSON.stringify(headerPosition)
        })
      }
    } catch (error) {
      console.error('Error updating banner:', error)
      setError('Failed to update banner')
    }
  }

  const handleHeaderDragStart = (e: React.MouseEvent | React.TouchEvent) => {
    if (!profile?.header_banner_url) {
      console.log('❌ No header banner URL, drag start blocked')
      return
    }
    console.log('🎯 Drag START triggered!', { 
      isDraggingHeader, 
      isEditingHeader,
      hasBanner: !!profile.header_banner_url, 
      eventType: e.type,
      target: e.currentTarget,
      clientY: 'touches' in e ? e.touches[0].clientY : e.clientY,
      currentPosition: headerPosition
    })
    setIsDraggingHeader(true)
    setIsEditingHeader(true) // Set editing mode when drag starts
    console.log('✅ Drag state set to true')
    e.preventDefault()
    e.stopPropagation()
  }

  const handleHeaderDrag = (e: React.MouseEvent | React.TouchEvent) => {
    if (!isDraggingHeader || !profile?.header_banner_url) return
    
    e.preventDefault()
    e.stopPropagation()
    
    const rect = e.currentTarget.getBoundingClientRect()
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY
    
    // Simple vertical positioning based on mouse position
    const relativeY = clientY - rect.top
    const percentage = relativeY / rect.height
    const y = (percentage - 0.5) * 200 // Limit movement to ±200px
    
    const newPosition = { ...headerPosition, y }
    
    console.log('🔄 Dragging:', { 
      clientY, 
      relativeY, 
      percentage, 
      y, 
      newPosition
    })
    
    setHeaderPosition(newPosition)
  }

  const handleHeaderDragEnd = () => {
    if (!isDraggingHeader) return
    console.log('🏁 Drag END - position updated locally, waiting for save')
    setIsDraggingHeader(false)
    setShowHeaderOptions(false)
    // Don't reset isEditingHeader here - keep it true so "Save Changes" button stays visible
  }

  const handleHeaderUpload = () => {
    // Trigger file input for header upload
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0]
      if (!file || !user) return

      setIsEditingHeader(true)
      setSaving(true)
      setError(null)
      setShowHeaderOptions(false)

      try {
        const fileExt = file.name.split('.').pop()
        const fileName = `header-${Date.now()}.${fileExt}`
        const filePath = `${user.id}/${fileName}`

        // Upload to Supabase storage
        console.log('📤 Uploading header banner:', { filePath, fileName, fileSize: file.size })
        
        if (!supabase) {
          setError('Database connection not available. Please try again.')
          setSaving(false)
          return
        }

        const { data: uploadData, error: uploadError } = await supabase!.storage
          .from('avatars') // Using avatars bucket for header banners
          .upload(filePath, file, {
            cacheControl: '3600',
            upsert: false,
          })

        if (uploadError) {
          console.error('❌ Upload error:', uploadError)
          throw uploadError
        }

        console.log('✅ Upload successful:', uploadData)

        // Get public URL
        const { data: publicUrlData } = supabase!.storage
          .from('avatars')
          .getPublicUrl(filePath)

        console.log('🔗 Public URL generated:', publicUrlData?.publicUrl)

        if (publicUrlData?.publicUrl) {
          await handleBannerUpdate(publicUrlData.publicUrl)
        } else {
          throw new Error('Failed to get public URL for uploaded banner')
        }
      } catch (err: any) {
        console.error('❌ Error uploading header banner:', err)
        
        // Provide more specific error messages
        let errorMessage = 'Failed to upload header banner'
        if (err.message?.includes('row-level security')) {
          errorMessage = 'Permission denied. Please try again.'
        } else if (err.message?.includes('Bucket not found')) {
          errorMessage = 'Storage bucket not configured. Please contact support.'
        } else if (err.message?.includes('File too large')) {
          errorMessage = 'File is too large. Please choose a smaller image.'
        } else if (err.message) {
          errorMessage = `Upload failed: ${err.message}`
        }
        
        setError(errorMessage)
      } finally {
        setSaving(false)
        setIsEditingHeader(false)
      }
    }
    input.click()
  }

  const handleRepositionHeader = () => {
    setShowHeaderOptions(false)
    setIsEditingHeader(true)
    // Don't set isDraggingHeader here - only when user actually starts dragging
    console.log('🎯 Reposition mode ready - click and drag to reposition!')
  }

  const fetchStats = async () => {
    if (!user || !profile) return

    setStatsLoading(true)
    try {
      // Fetch gigs created by this user (as contributor)
      const { count: gigsCount } = await supabase!
        .from('gigs')
        .select('*', { count: 'exact', head: true })
        .eq('owner_user_id', profile.id)

      // Fetch applications made by this user (as talent)
      const { count: applicationsCount } = await supabase!
        .from('applications')
        .select('*', { count: 'exact', head: true })
        .eq('applicant_user_id', profile.id)

      // Fetch showcases where this user is either creator or talent
      const { count: showcasesCount } = await supabase!
        .from('showcases')
        .select('*', { count: 'exact', head: true })
        .or(`creator_user_id.eq.${profile.id},talent_user_id.eq.${profile.id}`)
        .eq('visibility', 'PUBLIC')

      setStats({
        gigsCreated: gigsCount || 0,
        applications: applicationsCount || 0,
        showcases: showcasesCount || 0,
        profileViews: 0 // Profile views feature not implemented yet
      })
    } catch (error: any) {
      console.error('Error fetching stats:', error)
      // Keep default stats (0) on error
    } finally {
      setStatsLoading(false)
    }
  }

  // Vibe tags management functions
  const toggleVibeTag = (tag: string) => {
    setVibeTags(prev => 
      prev.includes(tag) 
        ? prev.filter(t => t !== tag)
        : [...prev, tag].slice(0, 5) // Max 5 vibe tags
    )
  }

  const addCustomVibeTag = async () => {
    const trimmed = customVibeInput.trim()
    if (!trimmed) return

    // Clear any previous errors
    setVibeTagError(null)
    setVibeTagValidating(true)

    try {
      // Check if at max limit
      if (vibeTags.length >= 5) {
        setVibeTagError('Maximum 5 vibe tags allowed')
        setVibeTagValidating(false)
        return
      }

      // Check for duplicates in current vibe tags
      if (vibeTags.includes(trimmed)) {
        setVibeTagError('This vibe already exists in your profile')
        setVibeTagValidating(false)
        return
      }

      // Validate content and check for database duplicates
      const validation = await validateAndCheckTag(trimmed, 'vibe')
      
      if (!validation.isValid) {
        setVibeTagError(validation.reason || 'Invalid vibe tag')
        setVibeTagValidating(false)
        return
      }

      // Add the tag if validation passes
      setVibeTags(prev => [...prev, trimmed])
      setCustomVibeInput('')
      setShowCustomVibeInput(false)
      setVibeTagError(null)
    } catch (error) {
      console.error('Error validating vibe tag:', error)
      setVibeTagError('Error validating tag. Please try again.')
    } finally {
      setVibeTagValidating(false)
    }
  }

  const removeVibeTag = (tag: string) => {
    setVibeTags(prev => prev.filter(t => t !== tag))
  }

  if (authLoading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-emerald-500"></div>
      </div>
    )
  }

  if (!user || !profile) {
    return null
  }

  const isContributor = userRole?.isContributor || profile.role_flags.includes('CONTRIBUTOR')
  const isTalent = userRole?.isTalent || profile.role_flags.includes('TALENT')
  const isAdmin = userRole?.isAdmin || profile.role_flags.includes('ADMIN')

  const vibeTagsCount = vibeTags.length
  const maxVibeTags = 5

  return (
    <div className="min-h-screen bg-gradient-to-br from-preset-50 to-white dark:from-gray-900 dark:to-gray-800">
      {/* Hero Header - Dashboard Style */}
        <div className="relative overflow-hidden pb-80">
        {/* Custom Banner Background */}
        {profile.header_banner_url ? (
          <div 
            data-header-container
            className={`absolute inset-0 overflow-hidden bg-gradient-to-r from-gray-200 to-gray-300 ${isDraggingHeader ? 'cursor-grabbing select-none' : 'cursor-grab select-none'}`}
            onClick={() => console.log('🎯 Container clicked!')}
            style={{ userSelect: 'none', zIndex: 10 }}
            onMouseDown={(e) => {
              console.log('🖱️ Mouse down on header container', {
                event: e,
                target: e.target,
                currentTarget: e.currentTarget,
                clientX: e.clientX,
                clientY: e.clientY,
                isEditingHeader,
                isDraggingHeader
              })
              e.preventDefault() // Prevent text selection
              handleHeaderDragStart(e)
            }}
            onMouseUp={(e) => {
              console.log('🖱️ Mouse up on header container')
              e.preventDefault() // Prevent text selection
              handleHeaderDragEnd()
            }}
            onMouseLeave={(e) => {
              console.log('🖱️ Mouse leave header container')
              handleHeaderDragEnd()
              setIsHoveringHeader(false)
            }}
            onMouseEnter={() => {
              console.log('🖱️ Mouse enter header container')
              setIsHoveringHeader(true)
            }}
            onTouchStart={handleHeaderDragStart}
            onTouchMove={handleHeaderDrag}
            onTouchEnd={handleHeaderDragEnd}
            onDragStart={(e) => e.preventDefault()} // Prevent image drag
          >
            <img
              src={profile.header_banner_url}
              alt="Header banner"
              className="w-full h-full object-cover transition-transform duration-300 select-none"
              style={{
                transform: `translateY(${headerPosition.y}px)`,
                pointerEvents: 'none', // Prevent image from interfering with drag events
                userSelect: 'none',
                WebkitUserSelect: 'none',
                MozUserSelect: 'none',
                msUserSelect: 'none'
              }}
              draggable={false}
            />
            {/* Dark overlay gradient - same as dashboard */}
            <div className="absolute inset-0 bg-black/40"></div>
            {/* Drag indicator */}
            {isDraggingHeader && (
              <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                <div className="bg-white/90 rounded-lg px-4 py-2 text-sm font-medium text-gray-900">
                  Drag to adjust position
                </div>
              </div>
            )}
            
            
          </div>
        ) : (
          <div className="absolute inset-0 bg-gradient-to-r from-preset-500 to-preset-600">
            <div className="absolute inset-0 bg-gradient-to-r from-preset-600/90 to-preset-500/90"></div>
          </div>
        )}
        
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-20" style={{ zIndex: 0 }}>
          <div className="absolute inset-0" style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
          }}></div>
        </div>
        
        
        <div className="relative z-50 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-8">
          <div className="flex justify-between items-start">
            <div className="text-white select-none" style={{ userSelect: 'none' }}>
              <div className="flex items-center mb-2">
                <button
                  onClick={() => router.push('/dashboard')}
                  className="mr-4 p-2 bg-white/10 hover:bg-white/20 rounded-lg transition-all backdrop-blur-sm border border-white/20"
                >
                  <ArrowLeft className="w-5 h-5 text-white" />
                </button>
                <h1 className="text-4xl md:text-5xl font-bold select-none">Profile Settings</h1>
              </div>
              <p className="text-gray-300 text-lg select-none">Manage your profile, credits, and preferences</p>
            </div>
            
            {/* Action Buttons - Dashboard Style */}
            <div className="flex gap-2">
              {activeTab === 'profile' && !editing && !isEditingHeader && (
                <>
              <button
                onClick={() => setEditing(true)}
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all shadow-lg hover:shadow-xl"
              >
                    <Edit3 className="w-4 h-4 mr-2 inline" />
                Edit Profile
              </button>
                  <button
                    onClick={() => setShowHeaderOptions(!showHeaderOptions)}
                    className="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-xl text-sm font-medium backdrop-blur-sm border border-white/20 transition-all"
                  >
                    <Camera className="w-4 h-4 mr-2 inline" />
                    {profile.header_banner_url ? 'Edit Header' : 'Add Header'}
                  </button>
                </>
              )}
              {(activeTab === 'profile' && editing) || (activeTab === 'profile' && isEditingHeader) ? (
                <>
                  <button
                    onClick={() => {
                      setEditing(false)
                      setIsEditingHeader(false)
                      setIsDraggingHeader(false)
                      setShowHeaderOptions(false)
                    }}
                    className="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-xl text-sm font-medium backdrop-blur-sm border border-white/20 transition-all"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={isEditingHeader ? async () => {
                      // Save header position
                      if (profile?.header_banner_url && user) {
                        setSaving(true)
                        try {
                          const { error } = await supabase!
                            .from('users_profile')
                            .update({
                              header_banner_position: JSON.stringify(headerPosition),
                              updated_at: new Date().toISOString()
                            })
                            .eq('user_id', user.id)

                          if (error) throw error

                          // Update the profile state
                          if (profile) {
                            setProfile({
                              ...profile,
                              header_banner_position: JSON.stringify(headerPosition)
                            })
                          }
                          
                          console.log('✅ Header position saved:', headerPosition)
                        } catch (error) {
                          console.error('Error updating header position:', error)
                          setError('Failed to save header position')
                        } finally {
                          setSaving(false)
                        }
                      }
                      
                      // Reset editing states
                      setIsEditingHeader(false)
                      setIsDraggingHeader(false)
                      setShowHeaderOptions(false)
                    } : handleSave}
                    disabled={saving}
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all shadow-lg hover:shadow-xl disabled:opacity-50"
                  >
                    {saving ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline"></div>
                        Saving...
                      </>
                    ) : (
                      <>
                        <Save className="w-4 h-4 mr-2 inline" />
                        Save Changes
                      </>
                    )}
                  </button>
                </>
              ) : null}
            </div>
          </div>
          </div>

        {/* Header Options Dropdown */}
        {showHeaderOptions && (
          <div className="absolute top-20 right-4 z-50 bg-white rounded-xl shadow-xl border border-gray-200 py-2 min-w-[200px]">
            {profile.header_banner_url ? (
              <>
                <button
                  onClick={handleHeaderUpload}
                  className="w-full px-4 py-3 text-left text-gray-700 hover:bg-gray-50 flex items-center gap-3"
                >
                  <Camera className="w-4 h-4 text-gray-500" />
                  Change Header Image
                </button>
                <button
                  onClick={handleRepositionHeader}
                  className="w-full px-4 py-3 text-left text-gray-700 hover:bg-gray-50 flex items-center gap-3"
                >
                  <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                  </svg>
                  Reposition Header
                </button>
              </>
            ) : (
              <button
                onClick={handleHeaderUpload}
                className="w-full px-4 py-3 text-left text-gray-700 hover:bg-gray-50 flex items-center gap-3"
              >
                <Camera className="w-4 h-4 text-gray-500" />
                Upload Header Image
              </button>
            )}
          </div>
        )}
      </div>


      {/* Main Content */}
      <main className="relative -mt-32">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12">
          {/* Tab Navigation - Dashboard Style */}
          <div className="mb-8">
            <div className="bg-white rounded-xl shadow-lg p-2 relative z-50">
              <nav className="flex space-x-1">
                {[
                  { id: 'profile', label: 'Profile', icon: User },
                  { id: 'credits', label: 'Credits & Billing', icon: CreditCard },
                  { id: 'settings', label: 'Settings', icon: Settings },
                ].map(({ id, label, icon: Icon }) => (
                  <button
                    key={id}
                    onClick={() => setActiveTab(id as any)}
                    className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-lg font-medium text-sm transition-all ${
                      activeTab === id
                        ? 'bg-emerald-600 text-white shadow-md'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {label}
                  </button>
                ))}
              </nav>
        </div>
      </div>

          {/* Tab Content */}
        {error && (
            <div className="mb-6 bg-red-50 border border-red-200 rounded-xl p-4 shadow-sm">
            <p className="text-red-800">{error}</p>
          </div>
        )}

        {activeTab === 'credits' && <div className="relative z-50"><CreditsDashboard /></div>}
        
        {activeTab === 'settings' && <div className="relative z-50"><UserSettingsTab /></div>}

        {activeTab === 'profile' && (
          <>
            {/* Live Preview - Top Row (Only show when editing) */}
            {editing && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6 relative z-50">
              <div className="flex items-center mb-6">
                <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center mr-3">
                  <Eye className="w-4 h-4 text-white" />
                </div>
                <h2 className="text-xl font-bold text-gray-900">Live Preview</h2>
              </div>
            
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Profile Picture & Name Preview */}
                <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100">
                  <div className="relative">
                    {profile.avatar_url ? (
                      <img
                        src={profile.avatar_url}
                        alt={profile.display_name}
                        className="w-16 h-16 rounded-full object-cover border-2 border-blue-200"
                      />
                    ) : (
                      <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center border-2 border-blue-200">
                        <span className="text-white font-bold text-lg">
                          {(editing ? formData.display_name : profile.display_name)?.charAt(0)?.toUpperCase() || 'U'}
                        </span>
                      </div>
                    )}
                    <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-green-400 border-2 border-white rounded-full flex items-center justify-center">
                      <div className="w-1.5 h-1.5 bg-white rounded-full"></div>
                    </div>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="font-semibold text-gray-900 text-lg">
                        {editing ? (formData.display_name || 'Display Name') : profile.display_name}
                      </span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium">PRO</span>
                    </div>
                    <div className="text-sm text-gray-600 mb-1">
                      @{editing ? (formData.handle || 'handle') : profile.handle}
                    </div>
                    <div className="text-xs text-gray-500">
                      {profile.role_flags.map(role => getRoleDisplayName(role)).join(' & ')}
                    </div>
                  </div>
                </div>

                {/* Bio Preview */}
                <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-100">
                  <div className="flex items-center gap-2 mb-3">
                    <MessageSquare className="w-5 h-5 text-green-600" />
                    <span className="text-sm font-medium text-green-800">Bio</span>
                  </div>
                  <p className="text-sm text-gray-700 leading-relaxed">
                    {editing ? (formData.bio || 'Tell us about yourself...') : (profile.bio || 'No bio provided')}
                  </p>
                </div>

                {/* Location Preview */}
                <div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                  <div className="flex items-center gap-2 mb-3">
                    <MapPin className="w-5 h-5 text-purple-600" />
                    <span className="text-sm font-medium text-purple-800">Location</span>
                  </div>
                  {showLocation ? (
                    <p className="text-sm text-gray-700">
                      {editing ? (
                        `${formData.city || 'City'}${formData.country ? `, ${formData.country}` : ''}` || 'City, Country'
                      ) : (
                        `${profile.city || ''}${profile.country ? `, ${profile.country}` : ''}` || 'Location not specified'
                      )}
                    </p>
                  ) : (
                    <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                      </svg>
                      <span>Location is private</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            )}

            <div className="space-y-6 relative z-50">
            {/* Profile Information */}
            <div className="bg-white rounded-xl shadow-lg p-6 relative z-50">
                <div className="flex items-center mb-6">
                  <div className="w-8 h-8 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-lg flex items-center justify-center mr-3">
                    <User className="w-4 h-4 text-white" />
                  </div>
                  <h2 className="text-xl font-bold text-gray-900">Profile Information</h2>
                </div>

                {/* Tab Navigation */}
                <div className="mb-6">
                  <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
                    {[
                      { id: 'personal', label: 'Personal Info', icon: User },
                      { id: 'style', label: 'Style & Vibes', icon: Sparkles },
                      { id: 'professional', label: 'Professional', icon: Briefcase },
                    ].map(({ id, label, icon: Icon }) => (
                      <button
                        key={id}
                        onClick={() => setActiveProfileTab(id as 'personal' | 'style' | 'professional')}
                        className={`flex-1 flex items-center justify-center gap-2 py-2 px-4 rounded-md font-medium text-sm transition-all ${
                          activeProfileTab === id
                            ? 'bg-white dark:bg-gray-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                            : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'
                        }`}
                      >
                        <Icon className="w-4 h-4" />
                        {label}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Tab Content */}
                {activeProfileTab === 'personal' && (
                  <div className="space-y-4">
                    {/* Avatar and Name */}
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-blue-100 dark:border-blue-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <User className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-blue-800 dark:text-blue-200">
                          Profile Picture & Name
                        </label>
                      </div>
                      <div className="flex items-start gap-4">
                        <div className="relative">
                          <div className="relative">
                            {profile.avatar_url ? (
                              <img
                                src={profile.avatar_url}
                                alt={profile.display_name}
                                className="w-16 h-16 rounded-full object-cover border-2 border-blue-200 shadow-lg"
                              />
                            ) : (
                              <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center border-2 border-blue-200 shadow-lg">
                                <span className="text-white font-bold text-lg">
                                  {profile.display_name?.charAt(0)?.toUpperCase() || 'U'}
                                </span>
                              </div>
                            )}
                            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-green-400 border-2 border-white dark:border-gray-800 rounded-full flex items-center justify-center">
                              <div className="w-1.5 h-1.5 bg-white rounded-full"></div>
                            </div>
                            
                            {/* Upload overlay for editing */}
                            {editing && (
                              <div className="absolute inset-0 bg-black/40 rounded-full flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                                <button
                                  onClick={() => {
                                    const input = document.createElement('input')
                                    input.type = 'file'
                                    input.accept = 'image/*'
                                    input.onchange = async (e) => {
                                      const file = (e.target as HTMLInputElement).files?.[0]
                                      if (file) {
                                        try {
                                          const fileExt = file.name.split('.').pop()
                                          const fileName = `${Date.now()}.${fileExt}`
                                          const filePath = `${user?.id}/${fileName}`
                                          
                                          const { error: uploadError } = await supabase!.storage
                                            .from('profile-images')
                                            .upload(filePath, file, {
                                              cacheControl: '3600',
                                              upsert: false
                                            })
                                          
                                          if (uploadError) throw uploadError
                                          
                                          const { data } = supabase!.storage
                                            .from('profile-images')
                                            .getPublicUrl(filePath)
                                          
                                          handleAvatarUpdate(data.publicUrl)
                                        } catch (error) {
                                          console.error('Avatar upload error:', error)
                                          alert('Failed to upload avatar. Please try again.')
                                        }
                                      }
                                    }
                                    input.click()
                                  }}
                                  className="bg-blue-600 hover:bg-blue-700 text-white p-1.5 rounded-full transition-colors"
                                >
                                  <Camera className="w-3 h-3" />
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* Name and Handle */}
                        <div className="flex-1 space-y-3">
                          <div>
                            <label className="block text-xs font-medium text-blue-700 dark:text-blue-300 mb-1">Display Name</label>
                            {editing ? (
                              <input
                                type="text"
                                value={formData.display_name}
                                onChange={(e) => setFormData({ ...formData, display_name: e.target.value })}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-blue-200 dark:border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Display name"
                              />
                            ) : (
                              <div className="flex items-center gap-3">
                                <h3 className="text-lg font-bold text-gray-900 dark:text-white">{profile.display_name}</h3>
                                <span className="px-2 py-0.5 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white text-xs font-bold rounded-full uppercase tracking-wide">
                                  {profile.subscription_tier}
                                </span>
                              </div>
                            )}
                          </div>
                          <div>
                            <label className="block text-xs font-medium text-blue-700 dark:text-blue-300 mb-1">Handle</label>
                            {editing ? (
                              <input
                                type="text"
                                value={formData.handle}
                                onChange={(e) => setFormData({ ...formData, handle: e.target.value })}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-blue-200 dark:border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Handle"
                              />
                            ) : (
                              <div className="flex items-center gap-2 text-gray-600 dark:text-gray-300">
                                <span className="text-sm">@{profile.handle}</span>
                                <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                                <div className="flex items-center gap-2">
                                  <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                                  <span className="text-xs font-medium">
                                    {profile.role_flags?.includes('CONTRIBUTOR') && profile.role_flags?.includes('TALENT') ? 'Contributor & Talent' : 
                                     profile.role_flags?.includes('CONTRIBUTOR') ? 'Contributor' : 'Talent'}
                                  </span>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Bio and Location */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-100 dark:border-green-800/50">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                            <MessageSquare className="w-3 h-3 text-white" />
                          </div>
                          <label className="text-sm font-medium text-green-800 dark:text-green-200">
                            Bio
                          </label>
                        </div>
                        {editing ? (
                          <textarea
                            value={formData.bio}
                            onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                            rows={3}
                            className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-green-200 dark:border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-900 dark:text-white transition-all duration-200"
                            placeholder="Tell us about yourself..."
                          />
                        ) : (
                          <p className="text-sm text-gray-900 dark:text-white">{profile.bio || 'No bio provided'}</p>
                        )}
                      </div>
                      
                      <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-purple-100 dark:border-purple-800/50">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                          <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                            <MapPin className="w-3 h-3 text-white" />
                          </div>
                          <label className="text-sm font-medium text-purple-800 dark:text-purple-200">
                            Location
                          </label>
                          </div>
                          <button
                            type="button"
                            onClick={() => setShowLocation(!showLocation)}
                            className={`relative inline-flex h-4 w-7 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 ${
                              showLocation ? 'bg-green-600' : 'bg-gray-300 dark:bg-gray-600'
                            }`}
                            title={showLocation ? 'Location visible to clients' : 'Location hidden from clients'}
                          >
                            <span
                              className={`inline-block h-2 w-2 transform rounded-full bg-white transition-transform ${
                                showLocation ? 'translate-x-4' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </div>
                        {editing ? (
                          <div className="space-y-3">
                          <input
                            type="text"
                            value={formData.city}
                            onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                            className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-purple-200 dark:border-purple-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-900 dark:text-white transition-all duration-200"
                              placeholder="City"
                            />
                            <input
                              type="text"
                              value={formData.country}
                              onChange={(e) => setFormData({ ...formData, country: e.target.value })}
                              className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-purple-200 dark:border-purple-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-900 dark:text-white transition-all duration-200"
                              placeholder="Country"
                            />
                          </div>
                        ) : (
                          showLocation ? (
                          <p className="text-sm text-gray-900 dark:text-white flex items-center">
                            <MapPin className="w-3 h-3 mr-1" />
                              {`${profile.city || ''}${profile.country ? `, ${profile.country}` : ''}` || 'No location provided'}
                            </p>
                          ) : (
                            <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                              </svg>
                              <span>Location is private</span>
                            </div>
                          )
                        )}
                      </div>
                    </div>

                    {/* Date of Birth */}
                    <div className="bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-900/20 dark:to-blue-900/20 rounded-xl p-4 border border-indigo-100 dark:border-indigo-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center">
                          <Calendar className="w-3 h-3 text-white" />
                  </div>
                        <label className="text-sm font-medium text-indigo-800 dark:text-indigo-200">
                          Date of Birth
                        </label>
                      </div>
                      {editing ? (
                        <input
                          type="date"
                          value={formData.date_of_birth}
                          onChange={(e) => setFormData({ ...formData, date_of_birth: e.target.value })}
                          className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-indigo-200 dark:border-indigo-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 dark:text-white transition-all duration-200"
                        />
                      ) : (
                        <p className="text-sm text-gray-900 dark:text-white flex items-center">
                          <Calendar className="w-3 h-3 mr-1" />
                          {profile.date_of_birth ? new Date(profile.date_of_birth).toLocaleDateString() : 'Not provided'}
                        </p>
                      )}
                    </div>

                  </div>
                )}

                {activeProfileTab === 'style' && (
                  <div className="space-y-4">
                    {/* Style Tags */}
                    <div className="bg-gradient-to-r from-emerald-50 to-green-50 dark:from-emerald-900/20 dark:to-green-900/20 rounded-xl p-4 border border-emerald-100 dark:border-emerald-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-emerald-500 rounded-full flex items-center justify-center">
                          <Tag className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-emerald-800 dark:text-emerald-200">
                          Style Tags
                        </label>
                      </div>
                      {editing ? (
                        <div className="space-y-3">
                          {/* Current Style Tags */}
                          <div className="flex flex-wrap gap-2">
                            {formData.style_tags.map((tag, index) => (
                              <span
                                key={index}
                                className="inline-flex items-center gap-1 px-3 py-1 bg-emerald-100 dark:bg-emerald-800 text-emerald-800 dark:text-emerald-200 text-sm rounded-full border border-emerald-200 dark:border-emerald-700"
                              >
                                {tag}
                                <button
                                  onClick={() => removeStyleTag(tag)}
                                  className="hover:text-emerald-900 dark:hover:text-emerald-100 transition-colors"
                                >
                                  <X className="w-3 h-3" />
                                </button>
                              </span>
                            ))}
                            {formData.style_tags.length === 0 && (
                              <span className="text-sm text-gray-500 italic">No style tags selected</span>
                            )}
                          </div>

                          {/* Predefined Style Tags */}
                          <div>
                            <h4 className="text-sm font-medium text-emerald-700 dark:text-emerald-300 mb-2">Popular Styles</h4>
                            <div className="flex flex-wrap gap-2 mb-3">
                              {PREDEFINED_STYLES.map((style) => (
                                <button
                                  key={style}
                                  onClick={() => toggleStyleTag(style)}
                                  className={`px-3 py-1 rounded-full text-sm font-medium transition-all duration-200 ${
                                    formData.style_tags.includes(style)
                                      ? 'bg-emerald-200 dark:bg-emerald-700 text-emerald-800 dark:text-emerald-200 border border-emerald-300 dark:border-emerald-600'
                                      : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-emerald-50 dark:hover:bg-emerald-800/50 border border-emerald-200 dark:border-emerald-600'
                                  }`}
                                >
                                  {formData.style_tags.includes(style) ? '✓ Added' : style}
                                </button>
                              ))}
                            </div>
                          </div>

                          {/* Custom Style Tag Input */}
                          <div className="space-y-2">
                            <h4 className="text-sm font-medium text-emerald-700 dark:text-emerald-300">Add Custom Style</h4>
                            <div className="flex gap-2">
                              <input
                                type="text"
                                value={newStyleTag}
                                onChange={(e) => {
                                  setNewStyleTag(e.target.value)
                                  if (styleTagError) setStyleTagError(null)
                                }}
                                onKeyDown={(e) => e.key === 'Enter' && addStyleTag()}
                                className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-emerald-200 dark:border-emerald-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Add a custom style tag"
                              />
                              <button
                                onClick={addStyleTag}
                                disabled={styleTagValidating}
                                className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center transition-all duration-200"
                              >
                                {styleTagValidating && (
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                )}
                                Add
                              </button>
                            </div>
                            {styleTagError && (
                              <div className="flex items-center text-red-600 text-sm">
                                <AlertTriangle className="w-4 h-4 mr-1" />
                                {styleTagError}
                              </div>
                            )}
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-wrap gap-2">
                          {profile.style_tags.length > 0 ? (
                            profile.style_tags.map((tag, index) => (
                              <span
                                key={index}
                                className="inline-flex items-center px-3 py-1 bg-emerald-100 dark:bg-emerald-800 text-emerald-800 dark:text-emerald-200 text-sm rounded-full border border-emerald-200 dark:border-emerald-700"
                              >
                                {tag}
                              </span>
                            ))
                          ) : (
                            <p className="text-gray-500">No style tags added</p>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Vibe Tags */}
                    <div className="bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-900/20 dark:to-cyan-900/20 rounded-xl p-4 border border-teal-100 dark:border-teal-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-teal-500 rounded-full flex items-center justify-center">
                          <Sparkles className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-teal-800 dark:text-teal-200">
                          Vibe Tags
                        </label>
                      </div>
                      {editing ? (
                        <div className="space-y-3">
                          {/* Current Vibe Tags */}
                          <div className="flex flex-wrap gap-2">
                            {vibeTags.map((tag, index) => (
                              <span
                                key={index}
                                className="inline-flex items-center gap-1 px-3 py-1 bg-teal-100 dark:bg-teal-800 text-teal-800 dark:text-teal-200 text-sm rounded-full border border-teal-200 dark:border-teal-700"
                              >
                                {tag}
                                <button
                                  onClick={() => removeVibeTag(tag)}
                                  className="hover:text-teal-900 dark:hover:text-teal-100 transition-colors"
                                >
                                  <X className="w-3 h-3" />
                                </button>
                              </span>
                            ))}
                            {vibeTags.length === 0 && (
                              <span className="text-sm text-gray-500 italic">No vibe tags selected</span>
                            )}
                          </div>

                          {/* Predefined Vibe Tags */}
                          <div>
                            <h4 className="text-sm font-medium text-teal-700 dark:text-teal-300 mb-2">Popular Vibes</h4>
                            <div className="flex flex-wrap gap-2 mb-3">
                              {PREDEFINED_VIBES.map((vibe) => (
                                <button
                                  key={vibe}
                                  onClick={() => toggleVibeTag(vibe)}
                                  disabled={!vibeTags.includes(vibe) && vibeTags.length >= 5}
                                  className={`px-3 py-1 rounded-full text-sm font-medium transition-all duration-200 ${
                                    vibeTags.includes(vibe)
                                      ? 'bg-teal-200 dark:bg-teal-700 text-teal-800 dark:text-teal-200 border border-teal-300 dark:border-teal-600'
                                      : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-teal-50 dark:hover:bg-teal-800/50 border border-teal-200 dark:border-teal-600 disabled:opacity-50 disabled:cursor-not-allowed'
                                  }`}
                                >
                                  {vibeTags.includes(vibe) ? '✓ Added' : vibe}
                                </button>
                              ))}
                            </div>
                          </div>

                          {/* Custom Vibe Tag Input */}
                          <div>
                            {!showCustomVibeInput ? (
                              <button
                                onClick={() => setShowCustomVibeInput(true)}
                                disabled={vibeTags.length >= 5}
                                className="inline-flex items-center px-3 py-2 text-sm text-teal-600 hover:text-teal-700 disabled:text-gray-400 disabled:cursor-not-allowed bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg hover:bg-teal-50 dark:hover:bg-teal-800/50 transition-all duration-200"
                              >
                                <Plus className="w-4 h-4 mr-1" />
                                Add Custom Vibe
                              </button>
                            ) : (
                              <div className="flex gap-2">
                                <input
                                  type="text"
                                  value={customVibeInput}
                                  onChange={(e) => {
                                    setCustomVibeInput(e.target.value)
                                    if (vibeTagError) setVibeTagError(null)
                                  }}
                                  onKeyDown={(e) => e.key === 'Enter' && addCustomVibeTag()}
                                  placeholder="Enter custom vibe..."
                                  className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-white transition-all duration-200"
                                  autoFocus
                                />
                                <button
                                  onClick={addCustomVibeTag}
                                  disabled={!customVibeInput.trim() || vibeTagValidating}
                                  className="px-3 py-2 bg-teal-600 hover:bg-teal-700 text-white rounded-lg disabled:bg-gray-300 flex items-center transition-all duration-200"
                                >
                                  {vibeTagValidating && (
                                    <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-1"></div>
                                  )}
                                  Add
                                </button>
                                <button
                                  onClick={() => {
                                    setShowCustomVibeInput(false)
                                    setCustomVibeInput('')
                                    setVibeTagError(null)
                                  }}
                                  className="px-3 py-2 bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-500 transition-all duration-200"
                                >
                                  Cancel
                                </button>
                              </div>
                            )}
                          </div>

                          {vibeTagError && (
                            <div className="flex items-center text-red-600 text-sm">
                              <AlertTriangle className="w-4 h-4 mr-1" />
                              {vibeTagError}
                            </div>
                          )}

                          <div className="text-xs text-gray-500 dark:text-gray-400">
                            {vibeTagsCount} of {maxVibeTags} vibe tags • Save changes when done editing
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-wrap gap-2">
                          {(profile.vibe_tags && profile.vibe_tags.length > 0) ? (
                            profile.vibe_tags.map((tag, index) => (
                              <span
                                key={index}
                                className="inline-flex items-center px-3 py-1 bg-teal-100 dark:bg-teal-800 text-teal-800 dark:text-teal-200 text-sm rounded-full border border-teal-200 dark:border-teal-700"
                              >
                                {tag}
                              </span>
                            ))
                          ) : (
                            <p className="text-gray-500">No vibe tags added</p>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Physical Details */}
                    {isTalent && (profile.height_cm || profile.eye_color || profile.hair_color || profile.tattoos || profile.piercings || (profile.talent_categories && profile.talent_categories.length > 0) || userMeasurements.length > 0 || userClothingSizes.length > 0 || userShoeSizes.length > 0) && (
                      <div className="bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-900/20 dark:to-slate-900/20 rounded-xl p-4 border border-gray-100 dark:border-gray-800/50">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center">
                            <User className="w-3 h-3 text-white" />
                          </div>
                          <span className="text-gray-800 dark:text-gray-200 text-sm font-medium">Physical Details</span>
                        </div>
                        <div className="space-y-2">
                          {profile.height_cm && (
                            <p className="text-sm text-gray-900 dark:text-white">Height: {profile.height_cm}cm</p>
                          )}
                          {profile.eye_color && (
                            <p className="text-sm text-gray-900 dark:text-white">Eyes: {profile.eye_color}</p>
                          )}
                          {profile.hair_color && (
                            <p className="text-sm text-gray-900 dark:text-white">Hair: {profile.hair_color}</p>
                          )}
                          {(profile.tattoos || profile.piercings) && (
                            <div className="flex gap-4">
                              {profile.tattoos && (
                                <span className="text-sm text-gray-900 dark:text-white">Tattoos: Yes</span>
                              )}
                              {profile.piercings && (
                                <span className="text-sm text-gray-900 dark:text-white">Piercings: Yes</span>
                              )}
                            </div>
                          )}
                          {userMeasurements.length > 0 && (
                            <div className="mt-3">
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Body Measurements:</p>
                              <div className="grid grid-cols-2 gap-2">
                                {userMeasurements.map((measurement) => (
                                  <div key={measurement.id} className="text-sm text-gray-700 dark:text-gray-300">
                                    {measurement.measurement_type}: {measurement.measurement_value}{measurement.unit}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                          {userClothingSizes.length > 0 && (
                            <div className="mt-3">
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Clothing Sizes:</p>
                              <div className="flex flex-wrap gap-2">
                                {userClothingSizes.map((size) => {
                                  const system = clothingSizeSystems.find(s => s.id === size.size_system_id)
                                  return (
                                    <span
                                      key={size.id}
                                      className="inline-flex items-center px-2 py-1 bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 text-xs rounded-full"
                                    >
                                      {size.clothing_type}: {size.size_system_id ? 
                                        `${system?.system_name || 'Unknown'}: ${size.size_value}` : 
                                        `Custom: ${size.size_value}`
                                      }
                                    </span>
                                  )
                                })}
                              </div>
                            </div>
                          )}
                          {userShoeSizes.length > 0 && (
                            <div className="mt-3">
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Shoe Sizes:</p>
                              <div className="flex flex-wrap gap-2">
                                {userShoeSizes.map((size) => {
                                  const system = shoeSizeSystems.find(s => s.id === size.size_system_id)
                                  return (
                                    <span
                                      key={size.id}
                                      className="inline-flex items-center px-2 py-1 bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 text-xs rounded-full"
                                    >
                                      {system?.system_name || 'Unknown'}: {size.size_value}
                                    </span>
                                  )
                                })}
                              </div>
                            </div>
                          )}
                          {profile.talent_categories && profile.talent_categories.length > 0 && (
                            <div className="mt-3">
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Talent Categories:</p>
                              <div className="flex flex-wrap gap-2">
                                {profile.talent_categories.map((category, index) => (
                                  <span
                                    key={index}
                                    className="inline-flex items-center px-3 py-1 bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 text-sm rounded-full"
                                  >
                                    {category}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {activeProfileTab === 'professional' && (
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* Experience */}
                {profile.years_experience && (
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-blue-100 dark:border-blue-800/50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <TrendingUp className="w-3 h-3 text-white" />
                        </div>
                        <span className="text-blue-800 dark:text-blue-200 text-sm font-medium">Experience</span>
                      </div>
                      <span className="text-gray-900 dark:text-white font-bold">
                        {profile.years_experience} {profile.years_experience === 1 ? 'year' : 'years'}
                      </span>
                    </div>
                  </div>
                )}

                {/* Specializations */}
                {profile.specializations && profile.specializations.length > 0 && (
                  <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-purple-100 dark:border-purple-800/50">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                        <Target className="w-3 h-3 text-white" />
                      </div>
                      <span className="text-purple-800 dark:text-purple-200 text-sm font-medium">Specializations</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {profile.specializations.map((spec, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-3 py-1 bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 text-sm rounded-full"
                        >
                          {spec}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Equipment */}
                {userEquipment && userEquipment.length > 0 && (
                  <div className="bg-gradient-to-r from-slate-50 to-gray-50 dark:from-slate-900/20 dark:to-gray-900/20 rounded-xl p-4 border border-slate-100 dark:border-slate-800/50">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="w-6 h-6 bg-slate-500 rounded-full flex items-center justify-center">
                        <Camera className="w-3 h-3 text-white" />
                      </div>
                      <span className="text-slate-800 dark:text-slate-200 text-sm font-medium">Equipment</span>
                    </div>
                    <div className="space-y-3">
                      {/* Group equipment by category */}
                      {Object.entries(
                        userEquipment.reduce((acc, equipment: any) => {
                          const category = equipment.equipment_category
                          if (!acc[category]) acc[category] = []
                          acc[category].push(equipment)
                          return acc
                        }, {} as Record<string, any[]>)
                      ).map(([category, equipmentList]) => (
                        <div key={category}>
                          <div className="text-xs font-medium text-slate-600 dark:text-slate-400 mb-2 uppercase tracking-wide">
                            {category}
                          </div>
                          <div className="flex flex-wrap gap-2">
                            {(equipmentList as any[]).map((equipment: any) => (
                              <span
                                key={equipment.id}
                                className="inline-flex items-center gap-1 px-3 py-1 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 text-sm rounded-full border border-slate-200 dark:border-slate-700"
                              >
                                <span className="text-xs">{equipment.equipment_type_icon}</span>
                                <span>
                                  {equipment.brand && equipment.brand.trim() 
                                    ? `${equipment.brand} ${equipment.model}`
                                    : equipment.model
                                  }
                                </span>
                                {equipment.is_primary && (
                                  <span className="text-xs text-blue-600 dark:text-blue-400">★</span>
                                )}
                              </span>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Rate Range */}
                {(profile.hourly_rate_min || profile.hourly_rate_max) && (
                  <div className="bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-xl p-4 border border-yellow-100 dark:border-yellow-800/50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center">
                          <DollarSign className="w-3 h-3 text-white" />
                        </div>
                        <span className="text-yellow-800 dark:text-yellow-200 text-sm font-medium">Rate Range</span>
                      </div>
                      <span className="text-gray-900 dark:text-white font-bold">
                        ${profile.hourly_rate_min || 0} - ${profile.hourly_rate_max || '∞'} / hour
                      </span>
                    </div>
                  </div>
                )}

                {/* Travel Availability */}
                {profile.available_for_travel && (
                  <div className="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-100 dark:border-green-800/50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                          <Radius className="w-3 h-3 text-white" />
                        </div>
                        <span className="text-green-800 dark:text-green-200 text-sm font-medium">Travel Availability</span>
                      </div>
                      <span className="text-gray-900 dark:text-white font-bold">
                        Available ({(() => {
                          const km = profile.travel_radius_km || 50
                          const unitPref = profile.travel_unit_preference || 'km'
                          if (unitPref === 'miles') {
                            const miles = Math.round(km * 0.621371)
                            return `${miles} miles radius`
                          }
                          return `${km} km radius`
                        })()})
                      </span>
                    </div>
                  </div>
                )}

                {/* Studio Information */}
                {profile.has_studio && (
                  <div className="bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-900/20 dark:to-blue-900/20 rounded-xl p-4 border border-indigo-100 dark:border-indigo-800/50">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center">
                        <Building className="w-3 h-3 text-white" />
                      </div>
                      <span className="text-indigo-800 dark:text-indigo-200 text-sm font-medium">Studio Information</span>
                    </div>
                    <div className="space-y-2">
                      {profile.studio_name && (
                        <p className="text-gray-900 dark:text-white font-medium">{profile.studio_name}</p>
                      )}
                      {profile.studio_address && showStudioAddress && (
                        <div className="space-y-2">
                        <p className="text-sm text-gray-600 dark:text-gray-400">{profile.studio_address}</p>
                          <div className="flex gap-2">
                            <button
                              onClick={() => {
                                const query = encodeURIComponent(`${profile.studio_name || ''} ${profile.studio_address}`.trim())
                                window.open(`https://www.google.com/maps/search/?api=1&query=${query}`, '_blank')
                              }}
                              className="flex items-center gap-1 px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium rounded transition-all duration-200"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                              Maps
                            </button>
                            <button
                              onClick={() => {
                                const query = encodeURIComponent(`${profile.studio_name || ''} ${profile.studio_address}`.trim())
                                window.open(`https://www.google.com/search?q=${query}`, '_blank')
                              }}
                              className="flex items-center gap-1 px-2 py-1 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium rounded transition-all duration-200"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                              </svg>
                              Search
                            </button>
                          </div>
                        </div>
                      )}
                      {profile.studio_address && !showStudioAddress && (
                        <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                          </svg>
                          <span>Studio address is private</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Turnaround Time */}
                {profile.typical_turnaround_days && (
                  <div className="bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-xl p-4 border border-orange-100 dark:border-orange-800/50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                          <Clock className="w-3 h-3 text-white" />
                        </div>
                        <span className="text-orange-800 dark:text-orange-200 text-sm font-medium">Turnaround Time</span>
                      </div>
                      <span className="text-gray-900 dark:text-white font-bold">
                        {(() => {
                          const days = profile.typical_turnaround_days || 0
                          const unitPref = profile.turnaround_unit_preference || 'days'
                          
                          if (unitPref === 'weeks') {
                            const weeks = Math.round(days / 7 * 10) / 10 // Round to 1 decimal
                            return `${weeks} ${weeks === 1 ? 'week' : 'weeks'}`
                          } else if (unitPref === 'months') {
                            const months = Math.round(days / 30 * 10) / 10 // Round to 1 decimal
                            return `${months} ${months === 1 ? 'month' : 'months'}`
                          } else {
                            return `${days} ${days === 1 ? 'day' : 'days'}`
                          }
                        })()}
                      </span>
                    </div>
                  </div>
                )}

                {/* Social Media Links */}
                {(profile.instagram_handle || profile.tiktok_handle || profile.website_url || profile.portfolio_url) && (
                  <div className="bg-gradient-to-r from-cyan-50 to-teal-50 dark:from-cyan-900/20 dark:to-teal-900/20 rounded-xl p-4 border border-cyan-100 dark:border-cyan-800/50">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="w-6 h-6 bg-cyan-500 rounded-full flex items-center justify-center">
                        <Globe className="w-3 h-3 text-white" />
                      </div>
                      <span className="text-cyan-800 dark:text-cyan-200 text-sm font-medium">Social & Portfolio</span>
                    </div>
                    <div className="space-y-2">
                      {profile.instagram_handle && (
                        <a
                          href={`https://instagram.com/${profile.instagram_handle}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center text-sm text-cyan-700 dark:text-cyan-300 hover:text-cyan-800 dark:hover:text-cyan-200 transition-colors"
                        >
                          <span className="mr-2">📷</span> @{profile.instagram_handle}
                        </a>
                      )}
                      {profile.tiktok_handle && (
                        <a
                          href={`https://tiktok.com/@${profile.tiktok_handle}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center text-sm text-cyan-700 dark:text-cyan-300 hover:text-cyan-800 dark:hover:text-cyan-200 transition-colors"
                        >
                          <span className="mr-2">🎵</span> @{profile.tiktok_handle}
                        </a>
                      )}
                      {profile.website_url && (
                        <a
                          href={profile.website_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center text-sm text-cyan-700 dark:text-cyan-300 hover:text-cyan-800 dark:hover:text-cyan-200 transition-colors"
                        >
                          <span className="mr-2">🌐</span> Website
                        </a>
                      )}
                      {profile.portfolio_url && (
                        <a
                          href={profile.portfolio_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center text-sm text-cyan-700 dark:text-cyan-300 hover:text-cyan-800 dark:hover:text-cyan-200 transition-colors"
                        >
                          <span className="mr-2">💼</span> Portfolio
                        </a>
                      )}
                    </div>
                  </div>
                )}
                    </div>
                  </div>
                )}

                  {/* Professional Details Form - Only show when editing */}
                  {editing && (
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <div className="flex items-center gap-3 mb-6">
                      <div className="w-8 h-8 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-lg flex items-center justify-center">
                        <Edit3 className="w-4 h-4 text-white" />
                      </div>
                      <h4 className="text-lg font-semibold text-gray-900">Edit Professional Details</h4>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Experience */}
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-blue-100 dark:border-blue-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <TrendingUp className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-blue-800 dark:text-blue-200">
                          Years of Experience
                        </label>
                      </div>
                      <div className="space-y-3">
                        <div className="text-center">
                          <span className="text-lg font-semibold text-blue-600 dark:text-blue-400">
                            {formData.years_experience || 0} years
                          </span>
                        </div>
                        <div className="relative">
                      <input
                            type="range"
                        min="0"
                        max="50"
                            value={formData.years_experience || 0}
                            onChange={(e) => setFormData({ ...formData, years_experience: parseInt(e.target.value) })}
                            className="w-full h-2 bg-blue-200 dark:bg-blue-700 rounded-lg appearance-none cursor-pointer slider"
                            style={{
                              background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${((formData.years_experience || 0) / 50) * 100}%, #e5e7eb ${((formData.years_experience || 0) / 50) * 100}%, #e5e7eb 100%)`
                            }}
                          />
                          <style jsx>{`
                            .slider::-webkit-slider-thumb {
                              appearance: none;
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #3b82f6;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .slider::-moz-range-thumb {
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #3b82f6;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .rate-slider::-webkit-slider-thumb {
                              appearance: none;
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #f59e0b;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .rate-slider::-moz-range-thumb {
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #f59e0b;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .range-slider::-webkit-slider-thumb {
                              appearance: none;
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #f59e0b;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .range-slider::-moz-range-thumb {
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #f59e0b;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .slider::-webkit-slider-thumb {
                              appearance: none;
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #10b981;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                            .slider::-moz-range-thumb {
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #10b981;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            }
                          `}</style>
                        </div>
                        <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                          <span>0 years</span>
                          <span>50+ years</span>
                        </div>
                      </div>
                    </div>

                    {/* Rate Range */}
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-xl p-4 border border-yellow-100 dark:border-yellow-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center">
                          <DollarSign className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                          Hourly Rate Range ($)
                        </label>
                      </div>
                      <div className="space-y-4">
                        {/* Rate Display */}
                        <div className="flex items-center justify-between">
                          <div className="text-center">
                            <div className="text-lg font-semibold text-yellow-600 dark:text-yellow-400">
                              ${formData.hourly_rate_min || 0}
                            </div>
                            <div className="text-xs text-gray-500 dark:text-gray-400">Min Rate</div>
                          </div>
                          <div className="text-center">
                            <div className="text-lg font-semibold text-yellow-600 dark:text-yellow-400">
                              ${formData.hourly_rate_max || 0}
                            </div>
                            <div className="text-xs text-gray-500 dark:text-gray-400">Max Rate</div>
                          </div>
                        </div>


                        {/* Dual Range Slider */}
                        <div className="space-y-3">
                          <div className="relative px-2">
                            <div className="relative h-2 bg-yellow-200 dark:bg-yellow-700 rounded-lg">
                              {/* Active range track */}
                              <div 
                                className="absolute h-2 bg-yellow-500 rounded-lg"
                                style={{
                                  left: `${((formData.hourly_rate_min || 25) - 25) / 475 * 100}%`,
                                  width: `${((formData.hourly_rate_max || 100) - (formData.hourly_rate_min || 25)) / 475 * 100}%`
                                }}
                              />
                              
                              {/* Min thumb (left side) */}
                        <input
                                type="range"
                                min="25"
                                max="500"
                                step="5"
                                value={formData.hourly_rate_min || 25}
                                onChange={(e) => {
                                  const minValue = parseInt(e.target.value)
                                  const maxValue = Math.max(minValue, formData.hourly_rate_max || 100)
                                  setFormData({ 
                                    ...formData, 
                                    hourly_rate_min: minValue,
                                    hourly_rate_max: maxValue
                                  })
                                }}
                                className="absolute top-0 w-full h-2 bg-transparent appearance-none cursor-pointer range-slider z-10"
                              />
                              
                              {/* Max thumb (right side) */}
                        <input
                                type="range"
                                min="25"
                                max="500"
                                step="5"
                                value={formData.hourly_rate_max || 100}
                                onChange={(e) => {
                                  const maxValue = parseInt(e.target.value)
                                  const minValue = Math.min(maxValue, formData.hourly_rate_min || 25)
                                  setFormData({ 
                                    ...formData, 
                                    hourly_rate_max: maxValue,
                                    hourly_rate_min: minValue
                                  })
                                }}
                                className="absolute top-0 w-full h-2 bg-transparent appearance-none cursor-pointer range-slider z-20"
                              />
                            </div>
                          </div>
                          
                          <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 px-2">
                            <span>$25/hr</span>
                            <span>$500+/hr</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Travel Availability */}
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-100 dark:border-green-800/50">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                          <Radius className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-green-800 dark:text-green-200">
                          Travel Availability
                        </label>
                      </div>
                        <button
                          type="button"
                          onClick={() => setFormData({ ...formData, available_for_travel: !formData.available_for_travel })}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 ${
                            formData.available_for_travel ? 'bg-green-600' : 'bg-gray-200 dark:bg-gray-700'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              formData.available_for_travel ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>
                        {formData.available_for_travel && (
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <div className="text-center flex-1">
                              <span className="text-lg font-semibold text-green-600 dark:text-green-400">
                                {(() => {
                                  const km = formData.travel_radius_km || 50
                                  if (formData.travel_unit_preference === 'miles') {
                                    const miles = Math.round(km * 0.621371)
                                    return `${miles} miles radius`
                                  }
                                  return `${km} km radius`
                                })()}
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-gray-600 dark:text-gray-400">Units:</span>
                              <button
                                type="button"
                                onClick={() => setFormData({ 
                                  ...formData, 
                                  travel_unit_preference: formData.travel_unit_preference === 'km' ? 'miles' : 'km' 
                                })}
                                className={`px-2 py-1 text-xs rounded transition-all duration-200 ${
                                  formData.travel_unit_preference === 'km'
                                    ? 'bg-green-600 text-white'
                                    : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                                }`}
                              >
                                km
                              </button>
                              <button
                                type="button"
                                onClick={() => setFormData({ 
                                  ...formData, 
                                  travel_unit_preference: formData.travel_unit_preference === 'miles' ? 'km' : 'miles' 
                                })}
                                className={`px-2 py-1 text-xs rounded transition-all duration-200 ${
                                  formData.travel_unit_preference === 'miles'
                                    ? 'bg-green-600 text-white'
                                    : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                                }`}
                              >
                                miles
                              </button>
                            </div>
                          </div>
                          <div className="relative">
                            <input
                              type="range"
                              min="10"
                              max="500"
                              step="10"
                              value={formData.travel_radius_km || 50}
                              onChange={(e) => setFormData({ ...formData, travel_radius_km: parseInt(e.target.value) })}
                              className="w-full h-2 bg-green-200 dark:bg-green-700 rounded-lg appearance-none cursor-pointer slider"
                              style={{
                                background: `linear-gradient(to right, #10b981 0%, #10b981 ${((formData.travel_radius_km || 50) - 10) / (500 - 10) * 100}%, #e5e7eb ${((formData.travel_radius_km || 50) - 10) / (500 - 10) * 100}%, #e5e7eb 100%)`
                              }}
                            />
                          </div>
                          <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                            <span>
                              {formData.travel_unit_preference === 'miles' ? '6 miles' : '10 km'}
                            </span>
                            <span>
                              {formData.travel_unit_preference === 'miles' ? '310+ miles' : '500+ km'}
                            </span>
                      </div>
                        </div>
                      )}
                    </div>

                    {/* Studio Information */}
                    <div className="bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-900/20 dark:to-blue-900/20 rounded-xl p-4 border border-indigo-100 dark:border-indigo-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center">
                          <Building className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-indigo-800 dark:text-indigo-200">
                          Studio Information
                        </label>
                      </div>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">I have a studio</span>
                          <button
                            type="button"
                            onClick={() => setFormData({ ...formData, has_studio: !formData.has_studio })}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${
                              formData.has_studio ? 'bg-indigo-600' : 'bg-gray-200 dark:bg-gray-700'
                            }`}
                          >
                            <span
                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                formData.has_studio ? 'translate-x-6' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </div>
                        {formData.has_studio && (
                          <div className="space-y-3 ml-7">
                            {/* Studio Name */}
                            <div>
                              <div className="flex items-center justify-between mb-1">
                                <label className="text-xs font-medium text-gray-700 dark:text-gray-300">
                                  Studio Name
                                </label>
                                <button
                                  type="button"
                                  onClick={() => setEditingStudioName(!editingStudioName)}
                                  className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1 ${
                                    editingStudioName ? 'bg-indigo-600' : 'bg-gray-200 dark:bg-gray-700'
                                  }`}
                                >
                                  <span
                                    className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${
                                      editingStudioName ? 'translate-x-5' : 'translate-x-1'
                                    }`}
                                  />
                                </button>
                              </div>
                              {editingStudioName ? (
                            <input
                              type="text"
                              value={formData.studio_name || ''}
                              onChange={(e) => setFormData({ ...formData, studio_name: e.target.value })}
                              className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-indigo-200 dark:border-indigo-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 dark:text-white transition-all duration-200"
                                  placeholder="Enter studio name"
                                  autoFocus
                                />
                              ) : (
                                <div className="px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white">
                                  {formData.studio_name || 'No studio name entered'}
                                </div>
                              )}
                            </div>

                            {/* Studio Address */}
                            <div>
                              <div className="flex items-center justify-between mb-1">
                                <div className="flex items-center gap-2">
                                  <label className="text-xs font-medium text-gray-700 dark:text-gray-300">
                                    Studio Address
                                  </label>
                                  <button
                                    type="button"
                                    onClick={() => setShowStudioAddress(!showStudioAddress)}
                                    className={`relative inline-flex h-4 w-7 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1 ${
                                      showStudioAddress ? 'bg-green-600' : 'bg-gray-300 dark:bg-gray-600'
                                    }`}
                                    title={showStudioAddress ? 'Address visible to clients' : 'Address hidden from clients'}
                                  >
                                    <span
                                      className={`inline-block h-2 w-2 transform rounded-full bg-white transition-transform ${
                                        showStudioAddress ? 'translate-x-4' : 'translate-x-1'
                                      }`}
                                    />
                                  </button>
                                </div>
                                <button
                                  type="button"
                                  onClick={() => setEditingStudioAddress(!editingStudioAddress)}
                                  className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1 ${
                                    editingStudioAddress ? 'bg-indigo-600' : 'bg-gray-200 dark:bg-gray-700'
                                  }`}
                                >
                                  <span
                                    className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${
                                      editingStudioAddress ? 'translate-x-5' : 'translate-x-1'
                                    }`}
                                  />
                                </button>
                              </div>
                              {editingStudioAddress ? (
                                <div className="space-y-2">
                            <input
                              type="text"
                              value={formData.studio_address || ''}
                              onChange={(e) => setFormData({ ...formData, studio_address: e.target.value })}
                              className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-indigo-200 dark:border-indigo-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 dark:text-white transition-all duration-200"
                                    placeholder="Enter full address (street, city, state, zip)"
                                    autoFocus
                            />
                          </div>
                              ) : (
                                <div className="space-y-2">
                                  <div className="px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white">
                                    {formData.studio_address || 'No address entered'}
                                  </div>
                          </div>
                        )}
                              
                              {/* Address Actions - Show when address exists */}
                              {formData.studio_address && (
                                <div className="flex gap-2 mt-2">
                                  <button
                                    type="button"
                                    onClick={() => {
                                      const query = encodeURIComponent(`${formData.studio_name || ''} ${formData.studio_address}`.trim())
                                      window.open(`https://www.google.com/maps/search/?api=1&query=${query}`, '_blank')
                                    }}
                                    className="flex items-center gap-1 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium rounded-md transition-all duration-200"
                                  >
                                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                    View on Maps
                                  </button>
                                  
                                  <button
                                    type="button"
                                    onClick={() => {
                                      const query = encodeURIComponent(`${formData.studio_name || ''} ${formData.studio_address}`.trim())
                                      window.open(`https://www.google.com/search?q=${query}`, '_blank')
                                    }}
                                    className="flex items-center gap-1 px-3 py-1.5 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium rounded-md transition-all duration-200"
                                  >
                                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                    Google Search
                                  </button>
                                </div>
                              )}
                            </div>

                            {/* Studio Type Indicator */}
                            <div className="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
                              <div className="w-2 h-2 bg-indigo-500 rounded-full"></div>
                              <span>This information helps clients verify your studio location</span>
                            </div>

                            {/* Debug info - Remove in production */}
                            <div className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 p-2 rounded">
                              <div>Debug - Studio Data:</div>
                              <div>has_studio: {formData.has_studio ? 'true' : 'false'}</div>
                              <div>studio_name: "{formData.studio_name || 'empty'}"</div>
                              <div>studio_address: "{formData.studio_address || 'empty'}"</div>
                              <div>show_studio_address: {showStudioAddress ? 'true' : 'false'}</div>
                              <div>editing_studio_name: {editingStudioName ? 'true' : 'false'}</div>
                              <div>editing_studio_address: {editingStudioAddress ? 'true' : 'false'}</div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Turnaround Time */}
                    <div className="bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-xl p-4 border border-orange-100 dark:border-orange-800/50">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-3">
                        <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                          <Clock className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-orange-800 dark:text-orange-200">
                            Typical Turnaround
                        </label>
                      </div>
                        <div className="flex items-center gap-1">
                          <span className="text-xs text-gray-600 dark:text-gray-400">Units:</span>
                          <button
                            type="button"
                            onClick={() => setFormData({ 
                              ...formData, 
                              turnaround_unit_preference: 'days' 
                            })}
                            className={`px-2 py-1 text-xs rounded transition-all duration-200 ${
                              formData.turnaround_unit_preference === 'days'
                                ? 'bg-orange-600 text-white'
                                : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                            }`}
                          >
                            days
                          </button>
                          <button
                            type="button"
                            onClick={() => setFormData({ 
                              ...formData, 
                              turnaround_unit_preference: 'weeks' 
                            })}
                            className={`px-2 py-1 text-xs rounded transition-all duration-200 ${
                              formData.turnaround_unit_preference === 'weeks'
                                ? 'bg-orange-600 text-white'
                                : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                            }`}
                          >
                            weeks
                          </button>
                          <button
                            type="button"
                            onClick={() => setFormData({ 
                              ...formData, 
                              turnaround_unit_preference: 'months' 
                            })}
                            className={`px-2 py-1 text-xs rounded transition-all duration-200 ${
                              formData.turnaround_unit_preference === 'months'
                                ? 'bg-orange-600 text-white'
                                : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                            }`}
                          >
                            months
                          </button>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="text-center">
                          <span className="text-lg font-semibold text-orange-600 dark:text-orange-400">
                            {(() => {
                              const days = formData.typical_turnaround_days || 0
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              
                              if (unitPref === 'weeks') {
                                const weeks = Math.round(days / 7 * 10) / 10
                                return `${weeks} ${weeks === 1 ? 'week' : 'weeks'}`
                              } else if (unitPref === 'months') {
                                const months = Math.round(days / 30 * 10) / 10
                                return `${months} ${months === 1 ? 'month' : 'months'}`
                              } else {
                                return `${days} ${days === 1 ? 'day' : 'days'}`
                              }
                            })()}
                          </span>
                        </div>
                        <div className="relative">
                      <input
                            type="range"
                            min={(() => {
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              if (unitPref === 'weeks') return 1
                              if (unitPref === 'months') return 1
                              return 1
                            })()}
                            max={(() => {
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              if (unitPref === 'weeks') return 4
                              if (unitPref === 'months') return 12
                              return 30
                            })()}
                            value={(() => {
                              const days = formData.typical_turnaround_days || 1
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              
                              if (unitPref === 'weeks') {
                                const weeks = Math.round(days / 7 * 10) / 10
                                return Math.max(1, Math.min(4, weeks))
                              } else if (unitPref === 'months') {
                                const months = Math.round(days / 30 * 10) / 10
                                return Math.max(1, Math.min(12, months))
                              } else {
                                return Math.max(1, Math.min(30, days))
                              }
                            })()}
                            onChange={(e) => {
                              const value = parseInt(e.target.value)
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              
                              let days
                              if (unitPref === 'weeks') {
                                days = Math.round(value * 7)
                              } else if (unitPref === 'months') {
                                days = Math.round(value * 30)
                              } else {
                                days = value
                              }
                              
                              setFormData({ ...formData, typical_turnaround_days: days })
                            }}
                            className="w-full h-2 bg-orange-200 dark:bg-orange-700 rounded-lg appearance-none cursor-pointer slider"
                            style={{
                              background: `linear-gradient(to right, #ea580c 0%, #ea580c ${(() => {
                                const days = formData.typical_turnaround_days || 1
                                const unitPref = formData.turnaround_unit_preference || 'days'
                                
                                let currentValue, maxValue
                                if (unitPref === 'weeks') {
                                  currentValue = Math.round(days / 7 * 10) / 10
                                  maxValue = 4
                                } else if (unitPref === 'months') {
                                  currentValue = Math.round(days / 30 * 10) / 10
                                  maxValue = 12
                                } else {
                                  currentValue = days
                                  maxValue = 30
                                }
                                
                                return ((currentValue - 1) / (maxValue - 1)) * 100
                              })()}%, #e5e7eb ${(() => {
                                const days = formData.typical_turnaround_days || 1
                                const unitPref = formData.turnaround_unit_preference || 'days'
                                
                                let currentValue, maxValue
                                if (unitPref === 'weeks') {
                                  currentValue = Math.round(days / 7 * 10) / 10
                                  maxValue = 4
                                } else if (unitPref === 'months') {
                                  currentValue = Math.round(days / 30 * 10) / 10
                                  maxValue = 12
                                } else {
                                  currentValue = days
                                  maxValue = 30
                                }
                                
                                return ((currentValue - 1) / (maxValue - 1)) * 100
                              })()}%, #e5e7eb 100%)`
                            }}
                          />
                        </div>
                        <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                          <span>
                            {(() => {
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              if (unitPref === 'weeks') {
                                return '1 week'
                              } else if (unitPref === 'months') {
                                return '1 month'
                              } else {
                                return '1 day'
                              }
                            })()}
                          </span>
                          <span>
                            {(() => {
                              const unitPref = formData.turnaround_unit_preference || 'days'
                              if (unitPref === 'weeks') {
                                return '4 weeks'
                              } else if (unitPref === 'months') {
                                return '12 months'
                              } else {
                                return '30 days'
                              }
                            })()}
                          </span>
                        </div>
                      </div>
                      <style jsx>{`
                        .slider::-webkit-slider-thumb {
                          appearance: none;
                          height: 20px;
                          width: 20px;
                          border-radius: 50%;
                          background: #ea580c;
                          cursor: pointer;
                          border: 2px solid white;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                        }
                        .slider::-moz-range-thumb {
                          height: 20px;
                          width: 20px;
                          border-radius: 50%;
                          background: #ea580c;
                          cursor: pointer;
                          border: 2px solid white;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                        }
                      `}</style>
                    </div>

                    {/* Social Media Links */}
                    <div className="bg-gradient-to-r from-cyan-50 to-teal-50 dark:from-cyan-900/20 dark:to-teal-900/20 rounded-xl p-4 border border-cyan-100 dark:border-cyan-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-cyan-500 rounded-full flex items-center justify-center">
                          <Globe className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-cyan-800 dark:text-cyan-200">
                          Social Media & Portfolio
                        </label>
                      </div>
                      <div className="space-y-2">
                        <input
                          type="text"
                          value={formData.instagram_handle || ''}
                          onChange={(e) => setFormData({ ...formData, instagram_handle: e.target.value })}
                          className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-cyan-200 dark:border-cyan-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500 text-gray-900 dark:text-white transition-all duration-200"
                          placeholder="Instagram handle (without @)"
                        />
                        <input
                          type="text"
                          value={formData.tiktok_handle || ''}
                          onChange={(e) => setFormData({ ...formData, tiktok_handle: e.target.value })}
                          className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-cyan-200 dark:border-cyan-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500 text-gray-900 dark:text-white transition-all duration-200"
                          placeholder="TikTok handle (without @)"
                        />
                        <input
                          type="url"
                          value={formData.website_url || ''}
                          onChange={(e) => setFormData({ ...formData, website_url: e.target.value })}
                          className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-cyan-200 dark:border-cyan-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500 text-gray-900 dark:text-white transition-all duration-200"
                          placeholder="Website URL"
                        />
                        <input
                          type="url"
                          value={formData.portfolio_url || ''}
                          onChange={(e) => setFormData({ ...formData, portfolio_url: e.target.value })}
                          className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-cyan-200 dark:border-cyan-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500 text-gray-900 dark:text-white transition-all duration-200"
                          placeholder="Portfolio URL"
                        />
                      </div>
                    </div>

                    {/* Equipment */}
                    <div className="bg-gradient-to-r from-slate-50 to-gray-50 dark:from-slate-900/20 dark:to-gray-900/20 rounded-xl p-4 border border-slate-100 dark:border-slate-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-slate-500 rounded-full flex items-center justify-center">
                          <Camera className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-slate-800 dark:text-slate-200">
                          Equipment
                        </label>
                      </div>
                      <div className="space-y-4">
                        {/* Current Equipment */}
                        {userEquipment && userEquipment.length > 0 ? (
                          <div className="space-y-3">
                            {Object.entries(
                              userEquipment.reduce((acc, equipment: any) => {
                                const category = equipment.equipment_category
                                if (!acc[category]) acc[category] = []
                                acc[category].push(equipment)
                                return acc
                              }, {} as Record<string, any[]>)
                            ).map(([category, equipmentList]) => (
                              <div key={category}>
                                <div className="text-xs font-medium text-slate-600 dark:text-slate-400 mb-2 uppercase tracking-wide">
                                  {category}
                                </div>
                                <div className="flex flex-wrap gap-2">
                                  {(equipmentList as any[]).map((equipment: any) => (
                                    <span
                                      key={equipment.id}
                                      className="inline-flex items-center gap-1 px-3 py-1 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 text-sm rounded-full border border-slate-200 dark:border-slate-700"
                                    >
                                      <span className="text-xs">{equipment.equipment_type_icon}</span>
                                      <span>
                                        {equipment.brand && equipment.brand.trim() 
                                          ? `${equipment.brand} ${equipment.model}`
                                          : equipment.model
                                        }
                                      </span>
                                      {equipment.is_primary && (
                                        <span className="text-xs text-blue-600 dark:text-blue-400">★</span>
                                      )}
                                      <button
                                        onClick={() => removeEquipment(equipment.id)}
                                        className="hover:text-red-600 dark:hover:text-red-400 transition-colors ml-1"
                                      >
                                        <X className="w-3 h-3" />
                                      </button>
                                    </span>
                                  ))}
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <span className="text-sm text-gray-500 italic">No equipment added</span>
                        )}

                        {/* Add Equipment Form */}
                        <div className="space-y-3 p-3 bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-slate-700">
                          <div className="text-sm font-medium text-slate-700 dark:text-slate-300">Add New Equipment</div>
                          
                          {/* Equipment Type Selection */}
                          <div className="relative">
                            <button
                              type="button"
                              onClick={() => setShowEquipmentTypeDropdown(!showEquipmentTypeDropdown)}
                              className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white transition-all duration-200 text-left flex items-center justify-between"
                            >
                              <span>
                                {selectedEquipmentType ? (
                                  (() => {
                                    const type = equipmentTypes.find(t => t.id === selectedEquipmentType)
                                    return type ? (
                                      <>
                                        <span className="mr-2">{type.icon}</span>
                                        {type.display_name}
                                      </>
                                    ) : 'Select equipment type...'
                                  })()
                                ) : (
                                  'Select equipment type...'
                                )}
                              </span>
                              <ChevronDown className="w-4 h-4" />
                            </button>
                            
                            {showEquipmentTypeDropdown && (
                              <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                {Object.entries(
                                  equipmentTypes.reduce((acc, type: any) => {
                                    if (!acc[type.category]) acc[type.category] = []
                                    acc[type.category].push(type)
                                    return acc
                                  }, {} as Record<string, any[]>)
                                ).map(([category, types]: [string, any]) => (
                                  <div key={category}>
                                    <div className="px-3 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 uppercase tracking-wide">
                                      {category}
                                    </div>
                                    {(types as any[]).map((type: any) => (
                                      <button
                                        key={type.id}
                                        onClick={() => {
                                          setSelectedEquipmentType(type.id)
                                          setShowEquipmentTypeDropdown(false)
                                        }}
                                        className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
                                      >
                                        <span>{type.icon}</span>
                                        <span>{type.display_name}</span>
                                      </button>
                                    ))}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Brand Selection */}
                          {selectedEquipmentType && !allowCustomModel && (
                            <div className="relative">
                              <button
                                type="button"
                                onClick={() => setShowEquipmentBrandDropdown(!showEquipmentBrandDropdown)}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white transition-all duration-200 text-left flex items-center justify-between"
                              >
                                <span>
                                  {selectedEquipmentBrand ? getBrandDisplayName(selectedEquipmentBrand) : 'Select brand...'}
                                </span>
                                <ChevronDown className="w-4 h-4" />
                              </button>
                              
                              {showEquipmentBrandDropdown && (
                                <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                  {getBrandsForType(selectedEquipmentType).map((brand: any) => (
                                    <button
                                      key={brand.id}
                                      onClick={() => {
                                        setSelectedEquipmentBrand(brand.id)
                                        setSelectedEquipmentModel('') // Reset model when brand changes
                                        setShowEquipmentBrandDropdown(false)
                                      }}
                                      className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between"
                                    >
                                      <span>{brand.display_name}</span>
                                      {brand.is_popular && <span className="text-xs text-blue-600 dark:text-blue-400">★</span>}
                                    </button>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}

                          {/* Model Selection */}
                          {selectedEquipmentBrand && !allowCustomModel && (
                            <div className="relative">
                              <button
                                type="button"
                                onClick={() => setShowEquipmentModelDropdown(!showEquipmentModelDropdown)}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white transition-all duration-200 text-left flex items-center justify-between"
                              >
                                <span>
                                  {selectedEquipmentModel ? getModelDisplayName(selectedEquipmentModel) : 'Select model...'}
                                </span>
                                <ChevronDown className="w-4 h-4" />
                              </button>
                              
                              {showEquipmentModelDropdown && (
                                <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                  {getModelsForBrand(selectedEquipmentBrand).map((model: any) => (
                                    <button
                                      key={model.id}
                                      onClick={() => {
                                        setSelectedEquipmentModel(model.id)
                                        setShowEquipmentModelDropdown(false)
                                      }}
                                      className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between"
                                    >
                                      <span>{model.model_name}</span>
                                      {model.is_popular && <span className="text-xs text-blue-600 dark:text-blue-400">★</span>}
                                    </button>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}

                          {/* Custom Input Fields (shown when toggle is on) */}
                          {allowCustomModel && (
                            <>
                              {/* Brand Input */}
                              <input
                                type="text"
                                value={newEquipmentBrand}
                                onChange={(e) => setNewEquipmentBrand(e.target.value)}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Enter custom brand name"
                                maxLength={100}
                              />

                              {/* Model Input */}
                              <input
                                type="text"
                                value={newEquipmentModel}
                                onChange={(e) => setNewEquipmentModel(e.target.value)}
                                className="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Enter custom model name"
                                maxLength={200}
                              />
                            </>
                          )}

                          {/* Custom Model Toggle Button */}
                          <button
                            type="button"
                            onClick={() => {
                              setAllowCustomModel(!allowCustomModel)
                              setEquipmentValidationError(null)
                              // Reset selections when switching modes
                              if (!allowCustomModel) {
                                setSelectedEquipmentBrand('')
                                setSelectedEquipmentModel('')
                                setNewEquipmentBrand('')
                                setNewEquipmentModel('')
                              }
                            }}
                            className={`w-full px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center gap-2 ${
                              allowCustomModel
                                ? 'bg-green-600 hover:bg-green-700 text-white shadow-md hover:shadow-lg'
                                : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300'
                            }`}
                          >
                            {allowCustomModel ? (
                              <>
                                <span className="w-4 h-4">✓</span>
                                Enter Custom (custom)
                              </>
                            ) : (
                              <>
                                <span className="w-4 h-4">+</span>
                                Enter Custom
                              </>
                            )}
                          </button>

                          {/* Error Display */}
                          {equipmentValidationError && (
                            <div className="px-3 py-2 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                              <p className="text-sm text-red-600 dark:text-red-400">{equipmentValidationError}</p>
                            </div>
                          )}

                          {/* Add Button */}
                          <button
                            onClick={addEquipment}
                            disabled={
                              !selectedEquipmentType || 
                              (!allowCustomModel && (!selectedEquipmentBrand || !selectedEquipmentModel)) ||
                              (allowCustomModel && (!newEquipmentBrand.trim() || !newEquipmentModel.trim()))
                            }
                            className="w-full px-4 py-2 bg-slate-600 hover:bg-slate-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed flex items-center justify-center gap-2"
                          >
                            <Plus className="w-4 h-4" />
                            Add Equipment
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Specializations */}
                    <div className="md:col-span-2 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-purple-100 dark:border-purple-800/50">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                          <Target className="w-3 h-3 text-white" />
                        </div>
                        <label className="text-sm font-medium text-purple-800 dark:text-purple-200">
                          Specializations
                        </label>
                      </div>
                      <div className="space-y-4">
                        {/* Current Specializations */}
                        <div className="flex flex-wrap gap-2">
                          {formData.specializations.map((spec, index) => (
                            <span
                              key={index}
                              className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 text-sm rounded-full border border-purple-200 dark:border-purple-700"
                            >
                              {spec}
                              <button
                                onClick={() => setFormData({ 
                                  ...formData, 
                                  specializations: formData.specializations.filter((_, i) => i !== index) 
                                })}
                                className="hover:text-purple-900 dark:hover:text-purple-100 transition-colors"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </span>
                          ))}
                          {formData.specializations.length === 0 && (
                            <span className="text-sm text-gray-500 italic">No specializations selected</span>
                          )}
                        </div>

                        {/* Predefined Specializations - Shadcn Dropdowns */}
                        <div>
                          <h4 className="text-sm font-medium text-purple-700 dark:text-purple-300 mb-4">Popular Specializations</h4>
                          {loadingPredefinedOptions ? (
                            <div className="flex items-center justify-center py-8">
                              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
                              <span className="ml-2 text-sm text-gray-600">Loading specializations...</span>
                            </div>
                          ) : (
                            <div className="grid grid-cols-2 gap-4">
                              {/* Category Selection Dropdown */}
                              <div>
                                <label className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wide mb-2 block">Category</label>
                                <div className="relative dropdown-container">
                                  <button
                                    onClick={() => setShowSpecializationCategoryDropdown(!showSpecializationCategoryDropdown)}
                                    className="w-full px-3 py-2 text-left bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 flex items-center justify-between"
                                  >
                                    <span className="flex items-center">
                                      {selectedSpecializationCategory ? (
                                        <>
                                          <span className="mr-2">
                                            {selectedSpecializationCategory === 'Photography' && '📸'}
                                            {selectedSpecializationCategory === 'Technical Skills' && '⚙️'}
                                            {selectedSpecializationCategory === 'Industry' && '🏢'}
                                            {selectedSpecializationCategory === 'Equipment & Techniques' && '📷'}
                                            {selectedSpecializationCategory === 'Business & Marketing' && '💼'}
                                            {selectedSpecializationCategory === 'Creative Styles' && '🎨'}
                                            {selectedSpecializationCategory === 'Other' && '➕'}
                                          </span>
                                          {selectedSpecializationCategory}
                                        </>
                                      ) : (
                                        'Select category...'
                                      )}
                                    </span>
                                    <ChevronDown className="h-4 w-4 text-gray-400" />
                                  </button>
                                  
                                  {showSpecializationCategoryDropdown && (
                                    <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                      {[
                                        { name: 'Photography', icon: '📸' },
                                        { name: 'Technical Skills', icon: '⚙️' },
                                        { name: 'Industry', icon: '🏢' },
                                        { name: 'Equipment & Techniques', icon: '📷' },
                                        { name: 'Business & Marketing', icon: '💼' },
                                        { name: 'Creative Styles', icon: '🎨' },
                                        { name: 'Other', icon: '➕' }
                                      ].map((category) => (
                                        <button
                                          key={category.name}
                                          onClick={() => {
                                            setSelectedSpecializationCategory(category.name)
                                            setShowSpecializationCategoryDropdown(false)
                                          }}
                                          className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center"
                                        >
                                          <span className="mr-2">{category.icon}</span>
                                          {category.name}
                                        </button>
                                      ))}
                                    </div>
                                  )}
                                </div>
                              </div>

                              {/* Options Dropdown */}
                              <div>
                                <label className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wide mb-2 block">Options</label>
                                <div className="relative dropdown-container">
                                  <button
                                    onClick={() => setShowSpecializationOptionsDropdown(!showSpecializationOptionsDropdown)}
                                    className="w-full px-3 py-2 text-left bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 flex items-center justify-between"
                                    disabled={!selectedSpecializationCategory}
                                  >
                                    <span>
                                      {selectedSpecializationCategory ? `${selectedSpecializationCategory} Options` : 'Select category first'}
                                    </span>
                                    <ChevronDown className="h-4 w-4 text-gray-400" />
                                  </button>
                                  
                                  {showSpecializationOptionsDropdown && selectedSpecializationCategory && (
                                    <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                      {(() => {
                                        let filteredOptions: string[] = []
                                        switch (selectedSpecializationCategory) {
                                          case 'Photography':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Photography') && !s.includes('Expert') && !s.includes('Industry') && !s.includes('Style')
                                            )
                                            break
                                          case 'Technical Skills':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Expert') || s.includes('Operation') || s.includes('Grading') || s.includes('Retouching') || s.includes('Editing') || s.includes('Modeling') || s.includes('Streaming') || s.includes('Recording')
                                            )
                                            break
                                          case 'Industry':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Industry') || s.includes('Corporate') || s.includes('Event') || s.includes('Sports') || s.includes('Music') || s.includes('Film') || s.includes('Advertising') || s.includes('Magazine') || s.includes('Social Media') || s.includes('E-commerce') || s.includes('Real Estate') || s.includes('Food') || s.includes('Travel') || s.includes('Pet')
                                            )
                                            break
                                          case 'Equipment & Techniques':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Specialist') || s.includes('Format') || s.includes('Film') || s.includes('Digital') || s.includes('Mirrorless') || s.includes('DSLR') || s.includes('Mobile') || s.includes('Action Camera') || s.includes('360') || s.includes('Virtual Reality') || s.includes('Augmented Reality') || s.includes('Live Event') || s.includes('Behind-the-Scenes')
                                            )
                                            break
                                          case 'Business & Marketing':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Brand') || s.includes('Product') || s.includes('Lifestyle') || s.includes('Editorial') || s.includes('Commercial') || s.includes('Portfolio') || s.includes('Strategy') || s.includes('Development') || s.includes('Marketing') || s.includes('PR') || s.includes('Press') || s.includes('Trade Show') || s.includes('Conference') || s.includes('Workshop') || s.includes('Educational')
                                            )
                                            break
                                          case 'Creative Styles':
                                            filteredOptions = predefinedSpecializations.filter(s => 
                                              s.includes('Style') || s.includes('Conceptual') || s.includes('Abstract') || s.includes('Surreal') || s.includes('Experimental')
                                            )
                                            break
                                          case 'Other':
                                            filteredOptions = predefinedSpecializations.filter(s => s === 'Other')
                                            break
                                          default:
                                            filteredOptions = []
                                        }
                                        return filteredOptions.map((specialization) => (
                                          <button
                                            key={specialization}
                                            onClick={() => {
                                              toggleSpecialization(specialization)
                                              setShowSpecializationOptionsDropdown(false)
                                            }}
                                            disabled={specialization !== 'Other' && formData.specializations.length >= 15}
                                            className={`w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between disabled:opacity-50 disabled:cursor-not-allowed ${
                                              formData.specializations.includes(specialization) ? 'bg-purple-50 dark:bg-purple-900/20' : ''
                                            }`}
                                          >
                                            <span>{specialization}</span>
                                            {formData.specializations.includes(specialization) && (
                                              <span className="text-purple-600 dark:text-purple-400">✓</span>
                                            )}
                                          </button>
                                        ))
                                      })()}
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Custom Input for "Other" */}
                        {formData.specializations.includes('Other') && (
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-purple-700 dark:text-purple-300">
                              Specify Custom Specialization
                            </label>
                        <div className="flex gap-2">
                          <input
                            type="text"
                            value={newSpecialization}
                                onChange={(e) => {
                                  setNewSpecialization(e.target.value)
                                  if (specializationError) setSpecializationError(null)
                                }}
                                className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-purple-200 dark:border-purple-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-900 dark:text-white transition-all duration-200"
                                placeholder="Enter custom specialization"
                                maxLength={50}
                          />
                          <button
                                onClick={addCustomSpecialization}
                                disabled={specializationValidating || !newSpecialization.trim()}
                                className="px-4 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                              >
                                {specializationValidating ? (
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                ) : (
                            <Plus className="w-4 h-4" />
                                )}
                          </button>
                        </div>
                            {specializationError && (
                              <p className="text-sm text-red-600 dark:text-red-400">{specializationError}</p>
                            )}
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Talent-Specific Fields */}
                    {isTalent && (
                      <>
                        <div className="bg-gradient-to-r from-rose-50 to-pink-50 dark:from-rose-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-rose-100 dark:border-rose-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-rose-500 rounded-full flex items-center justify-center">
                              <User className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-rose-800 dark:text-rose-200">
                              Height
                            </label>
                          </div>
                          
                          {/* Height Display */}
                          <div className="mb-4 text-center">
                            <div className="text-2xl font-bold text-rose-800 dark:text-rose-200 mb-1">
                              {formData.height_cm || 170} cm
                            </div>
                            <div className="text-sm text-rose-600 dark:text-rose-400">
                              {(() => {
                                const cm = formData.height_cm || 170
                                const feet = Math.floor(cm / 30.48)
                                const inches = Math.round((cm % 30.48) / 2.54)
                                return `${feet}'${inches}"`
                              })()}
                            </div>
                          </div>

                          {/* Height Slider */}
                          <div className="space-y-3">
                            <div className="relative">
                          <input
                                type="range"
                                min="120"
                                max="220"
                                step="1"
                                value={formData.height_cm || 170}
                                onChange={(e) => setFormData({ ...formData, height_cm: parseInt(e.target.value) })}
                                className="w-full h-2 bg-rose-200 dark:bg-rose-800 rounded-lg appearance-none cursor-pointer slider"
                                style={{
                                  background: `linear-gradient(to right, #f43f5e 0%, #f43f5e ${((formData.height_cm || 170) - 120) / (220 - 120) * 100}%, #fecaca ${((formData.height_cm || 170) - 120) / (220 - 120) * 100}%, #fecaca 100%)`
                                }}
                              />
                              <style jsx>{`
                                .slider::-webkit-slider-thumb {
                                  appearance: none;
                                  height: 20px;
                                  width: 20px;
                                  border-radius: 50%;
                                  background: #f43f5e;
                                  cursor: pointer;
                                  border: 2px solid #ffffff;
                                  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
                                }
                                .slider::-moz-range-thumb {
                                  height: 20px;
                                  width: 20px;
                                  border-radius: 50%;
                                  background: #f43f5e;
                                  cursor: pointer;
                                  border: 2px solid #ffffff;
                                  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
                                }
                              `}</style>
                            </div>
                            
                            {/* Height Range Labels */}
                            <div className="flex justify-between text-xs text-rose-600 dark:text-rose-400">
                              <span>120cm (3'11")</span>
                              <span>220cm (7'3")</span>
                            </div>
                          </div>

                          {/* Quick Height Buttons */}
                          <div className="mt-4">
                            <div className="text-xs font-medium text-rose-700 dark:text-rose-300 mb-2">Quick Select:</div>
                            <div className="flex flex-wrap gap-2">
                              {[
                                { label: 'Short', cm: 150, desc: "4'11\"" },
                                { label: 'Average', cm: 170, desc: "5'7\"" },
                                { label: 'Tall', cm: 185, desc: "6'1\"" },
                                { label: 'Very Tall', cm: 200, desc: "6'7\"" }
                              ].map((option) => (
                                <button
                                  key={option.label}
                                  onClick={() => setFormData({ ...formData, height_cm: option.cm })}
                                  className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
                                    formData.height_cm === option.cm
                                      ? 'bg-rose-500 text-white shadow-md'
                                      : 'bg-rose-100 dark:bg-rose-800/30 text-rose-700 dark:text-rose-300 hover:bg-rose-200 dark:hover:bg-rose-700/50'
                                  }`}
                                >
                                  {option.label} ({option.desc})
                                </button>
                              ))}
                            </div>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-violet-50 to-purple-50 dark:from-violet-900/20 dark:to-purple-900/20 rounded-xl p-4 border border-violet-100 dark:border-violet-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-violet-500 rounded-full flex items-center justify-center">
                              <Eye className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-violet-800 dark:text-violet-200">
                              Eye Color
                            </label>
                          </div>
                          
                          {/* Selected Eye Color Display */}
                          <div className="mb-3">
                            <div className="flex flex-wrap gap-2">
                              {formData.eye_color && (
                                <span className="px-3 py-1 bg-violet-100 dark:bg-violet-900/30 text-violet-800 dark:text-violet-200 rounded-lg text-sm font-medium border border-violet-200 dark:border-violet-700 flex items-center gap-2">
                                  {formData.eye_color}
                                  <button
                                    onClick={() => setFormData({ ...formData, eye_color: '' })}
                                    className="text-violet-600 dark:text-violet-400 hover:text-violet-800 dark:hover:text-violet-200"
                                  >
                                    ×
                                  </button>
                                </span>
                              )}
                              {!formData.eye_color && (
                                <span className="text-sm text-gray-500 italic">No eye color selected</span>
                              )}
                            </div>
                          </div>

                          {/* Predefined Eye Colors */}
                          <div>
                            <h4 className="text-sm font-medium text-violet-700 dark:text-violet-300 mb-4">Eye Colors</h4>
                            {loadingPredefinedOptions ? (
                              <div className="flex items-center justify-center py-8">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-violet-500"></div>
                                <span className="ml-2 text-sm text-gray-600">Loading eye colors...</span>
                              </div>
                            ) : (
                              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                                {predefinedEyeColors.map((color) => (
                                  <button
                                    key={color}
                                    onClick={() => setFormData({ ...formData, eye_color: color })}
                                    className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 text-left border ${
                                      formData.eye_color === color
                                        ? 'bg-violet-100 dark:bg-violet-900/30 text-violet-800 dark:text-violet-200 border-violet-300 dark:border-violet-600 shadow-sm'
                                        : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-violet-50 dark:hover:bg-violet-800/20 border-violet-200 dark:border-violet-700 hover:border-violet-300'
                                    }`}
                                  >
                                    {formData.eye_color === color ? '✓ Selected' : color}
                                  </button>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Custom Input for "Other" */}
                          {formData.eye_color === 'Other' && (
                            <div className="space-y-2 mt-4">
                              <label className="text-sm font-medium text-violet-700 dark:text-violet-300">
                                Specify Custom Eye Color
                              </label>
                              <div className="flex gap-2">
                          <input
                            type="text"
                                  value={newEyeColor}
                                  onChange={(e) => setNewEyeColor(e.target.value)}
                                  className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-violet-200 dark:border-violet-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-500 text-gray-900 dark:text-white transition-all duration-200"
                                  placeholder="Enter custom eye color"
                                  maxLength={50}
                                />
                                <button
                                  onClick={addCustomEyeColor}
                                  disabled={eyeColorValidating || !newEyeColor.trim()}
                                  className="px-4 py-2 bg-violet-600 hover:bg-violet-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                                >
                                  {eyeColorValidating ? (
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                  ) : (
                                    '+'
                                  )}
                                </button>
                              </div>
                              {eyeColorError && (
                                <p className="text-sm text-red-600 dark:text-red-400">{eyeColorError}</p>
                              )}
                            </div>
                          )}
                        </div>

                        <div className="bg-gradient-to-r from-amber-50 to-yellow-50 dark:from-amber-900/20 dark:to-yellow-900/20 rounded-xl p-4 border border-amber-100 dark:border-amber-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-amber-500 rounded-full flex items-center justify-center">
                              <Palette className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-amber-800 dark:text-amber-200">
                              Hair Color
                            </label>
                          </div>
                          
                          {/* Selected Hair Color Display */}
                          <div className="mb-3">
                            <div className="flex flex-wrap gap-2">
                              {formData.hair_color && (
                                <span className="px-3 py-1 bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 rounded-lg text-sm font-medium border border-amber-200 dark:border-amber-700 flex items-center gap-2">
                                  {formData.hair_color}
                                  <button
                                    onClick={() => setFormData({ ...formData, hair_color: '' })}
                                    className="text-amber-600 dark:text-amber-400 hover:text-amber-800 dark:hover:text-amber-200"
                                  >
                                    ×
                                  </button>
                                </span>
                              )}
                              {!formData.hair_color && (
                                <span className="text-sm text-gray-500 italic">No hair color selected</span>
                              )}
                            </div>
                          </div>

                          {/* Predefined Hair Colors */}
                          <div>
                            <h4 className="text-sm font-medium text-amber-700 dark:text-amber-300 mb-4">Hair Colors</h4>
                            {loadingPredefinedOptions ? (
                              <div className="flex items-center justify-center py-8">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-500"></div>
                                <span className="ml-2 text-sm text-gray-600">Loading hair colors...</span>
                              </div>
                            ) : (
                              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                                {predefinedHairColors.map((color) => (
                                  <button
                                    key={color}
                                    onClick={() => setFormData({ ...formData, hair_color: color })}
                                    className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 text-left border ${
                                      formData.hair_color === color
                                        ? 'bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 border-amber-300 dark:border-amber-600 shadow-sm'
                                        : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-amber-50 dark:hover:bg-amber-800/20 border-amber-200 dark:border-amber-700 hover:border-amber-300'
                                    }`}
                                  >
                                    {formData.hair_color === color ? '✓ Selected' : color}
                                  </button>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Custom Input for "Other" */}
                          {formData.hair_color === 'Other' && (
                            <div className="space-y-2 mt-4">
                              <label className="text-sm font-medium text-amber-700 dark:text-amber-300">
                                Specify Custom Hair Color
                              </label>
                              <div className="flex gap-2">
                          <input
                            type="text"
                                  value={newHairColor}
                                  onChange={(e) => setNewHairColor(e.target.value)}
                                  className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-amber-200 dark:border-amber-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 text-gray-900 dark:text-white transition-all duration-200"
                                  placeholder="Enter custom hair color"
                                  maxLength={50}
                                />
                                <button
                                  onClick={addCustomHairColor}
                                  disabled={hairColorValidating || !newHairColor.trim()}
                                  className="px-4 py-2 bg-amber-600 hover:bg-amber-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                                >
                                  {hairColorValidating ? (
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                  ) : (
                                    '+'
                                  )}
                                </button>
                              </div>
                              {hairColorError && (
                                <p className="text-sm text-red-600 dark:text-red-400">{hairColorError}</p>
                              )}
                            </div>
                          )}
                        </div>

                        <div className="bg-gradient-to-r from-slate-50 to-gray-50 dark:from-slate-900/20 dark:to-gray-900/20 rounded-xl p-4 border border-slate-100 dark:border-slate-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-slate-500 rounded-full flex items-center justify-center">
                              <Target className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-slate-800 dark:text-slate-200">
                              Body Measurements
                            </label>
                          </div>
                          
                          {/* Current Measurements Display */}
                          <div className="mb-4">
                            <div className="text-xs font-medium text-slate-700 dark:text-slate-300 mb-2">Current Measurements:</div>
                            <div className="space-y-2">
                              {userMeasurements.length > 0 ? (
                                userMeasurements.map((measurement) => (
                                  <div key={measurement.id} className="flex items-center justify-between bg-slate-100 dark:bg-slate-800/50 rounded-lg px-3 py-2">
                                    <div className="flex items-center gap-2">
                                      <span className="text-sm font-medium text-slate-800 dark:text-slate-200 capitalize">
                                        {measurement.measurement_type}
                                      </span>
                                      <span className="text-sm text-slate-600 dark:text-slate-400">
                                        {measurement.measurement_value} {measurement.unit}
                                      </span>
                                    </div>
                                    <button
                                      onClick={() => deleteMeasurement(measurement.id)}
                                      className="text-slate-500 hover:text-red-500 transition-colors"
                                    >
                                      ×
                                    </button>
                                  </div>
                                ))
                              ) : (
                                <span className="text-sm text-slate-500 italic">No measurements added yet</span>
                              )}
                            </div>
                          </div>

                          {/* Add New Measurement */}
                          <div className="space-y-3">
                            <div className="text-xs font-medium text-slate-700 dark:text-slate-300">Add Measurement:</div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                              <select
                                value={newMeasurementType}
                                onChange={(e) => setNewMeasurementType(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white text-sm"
                              >
                                <option value="">Select type</option>
                                <option value="bust">Bust</option>
                                <option value="waist">Waist</option>
                                <option value="hips">Hips</option>
                                <option value="chest">Chest</option>
                                <option value="inseam">Inseam</option>
                                <option value="sleeve">Sleeve</option>
                                <option value="neck">Neck</option>
                                <option value="custom">Custom</option>
                              </select>
                              
                          <input
                                type="number"
                                step="0.1"
                                value={newMeasurementValue}
                                onChange={(e) => setNewMeasurementValue(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white text-sm"
                                placeholder="Value"
                              />
                              
                              <select
                                value={newMeasurementUnit}
                                onChange={(e) => setNewMeasurementUnit(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-slate-500 text-gray-900 dark:text-white text-sm"
                              >
                                <option value="cm">cm</option>
                                <option value="in">inches</option>
                                <option value="mm">mm</option>
                              </select>
                            </div>
                            
                            <button
                              onClick={addMeasurement}
                              disabled={!newMeasurementType || !newMeasurementValue}
                              className="w-full px-4 py-2 bg-slate-600 hover:bg-slate-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                            >
                              Add Measurement
                            </button>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-emerald-50 to-green-50 dark:from-emerald-900/20 dark:to-green-900/20 rounded-xl p-4 border border-emerald-100 dark:border-emerald-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-emerald-500 rounded-full flex items-center justify-center">
                              <User className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-emerald-800 dark:text-emerald-200">
                              Shoe Sizes
                            </label>
                          </div>
                          
                          {/* Current Shoe Sizes Display */}
                          <div className="mb-4">
                            <div className="text-xs font-medium text-emerald-700 dark:text-emerald-300 mb-2">Current Shoe Sizes:</div>
                            <div className="space-y-2">
                              {userShoeSizes.length > 0 ? (
                                userShoeSizes.map((shoeSize) => {
                                  const system = shoeSizeSystems.find(s => s.id === shoeSize.size_system_id)
                                  return (
                                    <div key={shoeSize.id} className="flex items-center justify-between bg-emerald-100 dark:bg-emerald-800/50 rounded-lg px-3 py-2">
                                      <div className="flex items-center gap-2">
                                        <span className="text-sm font-medium text-emerald-800 dark:text-emerald-200">
                                          {system?.system_name || 'Unknown System'}
                                        </span>
                                        <span className="text-sm text-emerald-600 dark:text-emerald-400">
                                          Size {shoeSize.size_value}
                                        </span>
                                      </div>
                                      <button
                                        onClick={() => deleteShoeSize(shoeSize.id)}
                                        className="text-emerald-500 hover:text-red-500 transition-colors"
                                      >
                                        ×
                                      </button>
                                    </div>
                                  )
                                })
                              ) : (
                                <span className="text-sm text-emerald-500 italic">No shoe sizes added yet</span>
                              )}
                            </div>
                          </div>

                          {/* Add New Shoe Size */}
                          <div className="space-y-3">
                            <div className="text-xs font-medium text-emerald-700 dark:text-emerald-300">Add Shoe Size:</div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                              <select
                                value={newShoeSizeSystem}
                                onChange={(e) => setNewShoeSizeSystem(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-emerald-200 dark:border-emerald-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 dark:text-white text-sm"
                              >
                                <option value="">Select size system</option>
                                {shoeSizeSystems.map((system) => (
                                  <option key={system.id} value={system.id}>
                                    {system.system_name} ({system.region})
                                  </option>
                                ))}
                              </select>
                              
                              <select
                                value={newShoeSizeValue}
                                onChange={(e) => setNewShoeSizeValue(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-emerald-200 dark:border-emerald-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 dark:text-white text-sm"
                                disabled={!newShoeSizeSystem}
                              >
                                <option value="">Select size</option>
                                {newShoeSizeSystem && shoeSizes
                                  .filter(size => size.size_system_id === parseInt(newShoeSizeSystem))
                                  .map((size) => (
                                    <option key={size.id} value={size.size_value}>
                                      {size.size_value}
                                    </option>
                                  ))}
                              </select>
                            </div>
                            
                            <button
                              onClick={addShoeSize}
                              disabled={!newShoeSizeSystem || !newShoeSizeValue}
                              className="w-full px-4 py-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                            >
                              Add Shoe Size
                            </button>
                          </div>
                        </div>

                        <div className="bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-900/20 dark:to-cyan-900/20 rounded-xl p-4 border border-teal-100 dark:border-teal-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-teal-500 rounded-full flex items-center justify-center">
                              <User className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-teal-800 dark:text-teal-200">
                              Clothing Sizes
                            </label>
                          </div>
                          {/* Current Clothing Sizes Display */}
                          <div className="mb-4">
                            <div className="text-xs font-medium text-teal-700 dark:text-teal-300 mb-2">Current Clothing Sizes:</div>
                            <div className="space-y-2">
                              {userClothingSizes.length > 0 ? (
                                userClothingSizes.map((clothingSize) => {
                                  const system = clothingSizeSystems.find(s => s.id === clothingSize.size_system_id)
                                  return (
                                    <div key={clothingSize.id} className="flex items-center justify-between bg-teal-100 dark:bg-teal-800/50 rounded-lg px-3 py-2">
                                      <div className="flex items-center gap-2">
                                        <span className="text-sm font-medium text-teal-800 dark:text-teal-200 capitalize">
                                          {clothingSize.clothing_type}
                                        </span>
                                        <span className="text-sm text-teal-600 dark:text-teal-400">
                                          {clothingSize.size_system_id ? 
                                            `${system?.system_name || 'Unknown System'}: ${clothingSize.size_value}` : 
                                            `Custom: ${clothingSize.size_value}`
                                          }
                                        </span>
                                      </div>
                                      <button
                                        onClick={() => deleteClothingSize(clothingSize.id)}
                                        className="text-teal-500 hover:text-red-500 transition-colors"
                                      >
                                        ×
                                      </button>
                                    </div>
                                  )
                                })
                              ) : (
                                <span className="text-sm text-teal-500 italic">No clothing sizes added yet</span>
                              )}
                            </div>
                          </div>

                          {/* Add New Clothing Size */}
                          <div className="space-y-3">
                            <div className="text-xs font-medium text-teal-700 dark:text-teal-300">Add Clothing Size:</div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                              <select
                                value={newClothingType}
                                onChange={(e) => setNewClothingType(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-white text-sm"
                              >
                                <option value="">Select clothing type</option>
                                <option value="tops">Tops</option>
                                <option value="bottoms">Bottoms</option>
                                <option value="dresses">Dresses</option>
                                <option value="jackets">Jackets</option>
                                <option value="shoes">Shoes</option>
                                <option value="accessories">Accessories</option>
                                <option value="underwear">Underwear</option>
                                <option value="swimwear">Swimwear</option>
                                <option value="custom">Custom</option>
                              </select>
                              
                              <select
                                value={newClothingSizeSystem}
                                onChange={(e) => setNewClothingSizeSystem(e.target.value)}
                                className="px-3 py-2 bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-white text-sm"
                              >
                                <option value="">Select size system</option>
                                {clothingSizeSystems.map((system) => (
                                  <option key={system.id} value={system.id}>
                                    {system.system_name} ({system.region})
                                  </option>
                                ))}
                              </select>
                              
                              {newClothingType === 'custom' ? (
                                <input
                                  type="text"
                                  value={newClothingSizeValue}
                                  onChange={(e) => setNewClothingSizeValue(e.target.value)}
                                  placeholder="Enter custom size (e.g., 32W x 34L)"
                                  className="px-3 py-2 bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-white text-sm"
                                />
                              ) : (
                                <select
                                  value={newClothingSizeValue}
                                  onChange={(e) => setNewClothingSizeValue(e.target.value)}
                                  className="px-3 py-2 bg-white dark:bg-gray-700 border border-teal-200 dark:border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-white text-sm"
                                  disabled={!newClothingSizeSystem}
                                >
                                  <option value="">Select size</option>
                                  {newClothingSizeSystem && clothingSizes
                                    .filter(size => size.size_system_id == newClothingSizeSystem)
                                    .map((size) => (
                                      <option key={size.id} value={size.size_value}>
                                        {size.size_value} - {size.size_label}
                                      </option>
                                    ))}
                                  {newClothingSizeSystem && clothingSizes
                                    .filter(size => size.size_system_id == newClothingSizeSystem)
                                    .length === 0 && (
                                    <option value="" disabled>
                                      No sizes available for this system
                                    </option>
                                  )}
                                </select>
                              )}
                            </div>
                            
                            <button
                              onClick={addClothingSize}
                              disabled={!newClothingType || !newClothingSizeValue || (newClothingType !== 'custom' && !newClothingSizeSystem)}
                              className="w-full px-4 py-2 bg-teal-600 hover:bg-teal-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                            >
                              Add Clothing Size
                            </button>
                          </div>
                        </div>

                        <div className="md:col-span-2 bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-900/20 dark:to-slate-900/20 rounded-xl p-4 border border-gray-100 dark:border-gray-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center">
                              <User className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-gray-800 dark:text-gray-200">
                              Physical Features
                            </label>
                          </div>
                          <div className="space-y-4">
                            {/* Has Tattoos Toggle */}
                            <div className="flex items-center justify-between">
                              <span className="text-sm font-medium text-gray-800 dark:text-gray-200">Has Tattoos</span>
                              <button
                                type="button"
                                onClick={() => setFormData({ ...formData, tattoos: !formData.tattoos })}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 ${
                                  formData.tattoos ? 'bg-gray-600' : 'bg-gray-200 dark:bg-gray-700'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                    formData.tattoos ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>

                            {/* Has Piercings Toggle */}
                            <div className="flex items-center justify-between">
                              <span className="text-sm font-medium text-gray-800 dark:text-gray-200">Has Piercings</span>
                              <button
                                type="button"
                                onClick={() => setFormData({ ...formData, piercings: !formData.piercings })}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 ${
                                  formData.piercings ? 'bg-gray-600' : 'bg-gray-200 dark:bg-gray-700'
                                }`}
                              >
                                <span
                                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                    formData.piercings ? 'translate-x-6' : 'translate-x-1'
                                  }`}
                                />
                              </button>
                            </div>
                          </div>
                        </div>

                        <div className="md:col-span-2 bg-gradient-to-r from-fuchsia-50 to-pink-50 dark:from-fuchsia-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-fuchsia-100 dark:border-fuchsia-800/50">
                          <div className="flex items-center gap-3 mb-3">
                            <div className="w-6 h-6 bg-fuchsia-500 rounded-full flex items-center justify-center">
                              <Star className="w-3 h-3 text-white" />
                            </div>
                            <label className="text-sm font-medium text-fuchsia-800 dark:text-fuchsia-200">
                              Talent Categories
                            </label>
                          </div>
                          <div className="space-y-4">
                            {/* Current Talent Categories */}
                            <div className="flex flex-wrap gap-2">
                              {formData.talent_categories.map((category, index) => (
                                <span
                                  key={index}
                                  className="inline-flex items-center gap-1 px-3 py-1 bg-fuchsia-100 dark:bg-fuchsia-800 text-fuchsia-800 dark:text-fuchsia-200 text-sm rounded-full border border-fuchsia-200 dark:border-fuchsia-700"
                                >
                                  {category}
                                  <button
                                    onClick={() => setFormData({ 
                                      ...formData, 
                                      talent_categories: formData.talent_categories.filter((_, i) => i !== index) 
                                    })}
                                    className="hover:text-fuchsia-900 dark:hover:text-fuchsia-100 transition-colors"
                                  >
                                    <X className="w-3 h-3" />
                                  </button>
                                </span>
                              ))}
                              {formData.talent_categories.length === 0 && (
                                <span className="text-sm text-gray-500 italic">No talent categories selected</span>
                              )}
                            </div>

                            {/* Predefined Talent Categories - Shadcn Dropdowns */}
                            <div>
                              <h4 className="text-sm font-medium text-fuchsia-700 dark:text-fuchsia-300 mb-4">Popular Talent Categories</h4>
                              {loadingPredefinedOptions ? (
                                <div className="flex items-center justify-center py-8">
                                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-fuchsia-500"></div>
                                  <span className="ml-2 text-sm text-gray-600">Loading categories...</span>
                                </div>
                              ) : (
                                <div className="grid grid-cols-2 gap-4">
                                  {/* Category Selection Dropdown */}
                                  <div>
                                    <label className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wide mb-2 block">Category</label>
                                    <div className="relative dropdown-container">
                              <button
                                        onClick={() => setShowTalentCategoryDropdown(!showTalentCategoryDropdown)}
                                        className="w-full px-3 py-2 text-left bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-fuchsia-500 focus:border-fuchsia-500 flex items-center justify-between"
                                      >
                                        <span className="flex items-center">
                                          {selectedTalentCategory ? (
                                            <>
                                              <span className="mr-2">
                                                {selectedTalentCategory === 'Photography' && '📸'}
                                                {selectedTalentCategory === 'Modeling' && '👤'}
                                                {selectedTalentCategory === 'Videography & Film' && '🎬'}
                                                {selectedTalentCategory === 'Hair & Makeup' && '💄'}
                                                {selectedTalentCategory === 'Styling & Design' && '👗'}
                                                {selectedTalentCategory === 'Other Creative Roles' && '🎭'}
                                              </span>
                                              {selectedTalentCategory}
                                            </>
                                          ) : (
                                            'Select category...'
                                          )}
                                        </span>
                                        <ChevronDown className="h-4 w-4 text-gray-400" />
                                      </button>
                                      
                                      {showTalentCategoryDropdown && (
                                        <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                          {[
                                            { name: 'Photography', icon: '📸' },
                                            { name: 'Modeling', icon: '👤' },
                                            { name: 'Videography & Film', icon: '🎬' },
                                            { name: 'Hair & Makeup', icon: '💄' },
                                            { name: 'Styling & Design', icon: '👗' },
                                            { name: 'Other Creative Roles', icon: '🎭' }
                                          ].map((category) => (
                                            <button
                                              key={category.name}
                                onClick={() => {
                                                setSelectedTalentCategory(category.name)
                                                setShowTalentCategoryDropdown(false)
                                              }}
                                              className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center"
                                            >
                                              <span className="mr-2">{category.icon}</span>
                                              {category.name}
                              </button>
                                          ))}
                            </div>
                                      )}
              </div>
            </div>

                                  {/* Options Dropdown */}
                                  <div>
                                    <label className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wide mb-2 block">Options</label>
                                    <div className="relative dropdown-container">
                  <button
                                        onClick={() => setShowTalentOptionsDropdown(!showTalentOptionsDropdown)}
                                        className="w-full px-3 py-2 text-left bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-fuchsia-500 focus:border-fuchsia-500 flex items-center justify-between"
                                        disabled={!selectedTalentCategory}
                                      >
                                        <span>
                                          {selectedTalentCategory ? `${selectedTalentCategory} Options` : 'Select category first'}
                                        </span>
                                        <ChevronDown className="h-4 w-4 text-gray-400" />
                  </button>
                                      
                                      {showTalentOptionsDropdown && selectedTalentCategory && (
                                        <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                          {(() => {
                                            let filteredOptions: string[] = []
                                            switch (selectedTalentCategory) {
                                              case 'Photography':
                                                filteredOptions = predefinedTalentCategories.filter(c => c.includes('Photographer'))
                                                break
                                              case 'Modeling':
                                                filteredOptions = predefinedTalentCategories.filter(c => c.includes('Model'))
                                                break
                                              case 'Videography & Film':
                                                filteredOptions = predefinedTalentCategories.filter(c => 
                                                  c.includes('Videographer') || c.includes('Cinematographer') || c.includes('Filmmaker') || c.includes('Director') || c.includes('Producer') || c.includes('Editor')
                                                )
                                                break
                                              case 'Hair & Makeup':
                                                filteredOptions = predefinedTalentCategories.filter(c => 
                                                  c.includes('Hair') || c.includes('Makeup') || c.includes('Effects')
                                                )
                                                break
                                              case 'Styling & Design':
                                                filteredOptions = predefinedTalentCategories.filter(c => 
                                                  c.includes('Stylist') || c.includes('Designer') || c.includes('Director')
                                                )
                                                break
                                              case 'Other Creative Roles':
                                                filteredOptions = predefinedTalentCategories.filter(c => 
                                                  c.includes('Creative') || c.includes('Graphic') || c.includes('Web') || c.includes('Social Media') || c.includes('Content') || c.includes('Influencer') || c.includes('Brand') || c.includes('Voice') || c.includes('Actor') || c.includes('Dancer') || c.includes('Performer') || c === 'Other'
                                                )
                                                break
                                              default:
                                                filteredOptions = []
                                            }
                                            return filteredOptions.map((category) => (
                  <button
                                                key={category}
                                                onClick={() => {
                                                  toggleTalentCategory(category)
                                                  setShowTalentOptionsDropdown(false)
                                                }}
                                                disabled={category !== 'Other' && formData.talent_categories.length >= 10}
                                                className={`w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between disabled:opacity-50 disabled:cursor-not-allowed ${
                                                  formData.talent_categories.includes(category) ? 'bg-fuchsia-50 dark:bg-fuchsia-900/20' : ''
                                                }`}
                                              >
                                                <span>{category}</span>
                                                {formData.talent_categories.includes(category) && (
                                                  <span className="text-fuchsia-600 dark:text-fuchsia-400">✓</span>
                                                )}
                </button>
                                            ))
                                          })()}
              </div>
                                      )}
            </div>
                   </div>
                 </div>
                              )}
                    </div>

                            {/* Custom Input for "Other" */}
                            {formData.talent_categories.includes('Other') && (
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-fuchsia-700 dark:text-fuchsia-300">
                                  Specify Custom Talent Category
                                </label>
                                <div className="flex gap-2">
                                  <input
                                    type="text"
                                    value={newTalentCategory}
                                    onChange={(e) => {
                                      setNewTalentCategory(e.target.value)
                                      if (talentCategoryError) setTalentCategoryError(null)
                                    }}
                                    className="flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-fuchsia-200 dark:border-fuchsia-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-fuchsia-500 text-gray-900 dark:text-white transition-all duration-200"
                                    placeholder="Enter custom talent category"
                                    maxLength={50}
                                  />
                                  <button
                                    onClick={addCustomTalentCategory}
                                    disabled={talentCategoryValidating || !newTalentCategory.trim()}
                                    className="px-4 py-2 bg-fuchsia-600 hover:bg-fuchsia-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:cursor-not-allowed"
                                  >
                                    {talentCategoryValidating ? (
                                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                    ) : (
                                      <Plus className="w-4 h-4" />
                                    )}
                                  </button>
                                </div>
                                {talentCategoryError && (
                                  <p className="text-sm text-red-600 dark:text-red-400">{talentCategoryError}</p>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                )}
              </div>
            </div>
          </div>
        )}
        </div>
      </main>
    </div>
  )
}


// Wrapper component with Suspense for useSearchParams
export default function ProfilePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-emerald-500"></div>
      </div>
    }>
      <ProfilePageContent />
    </Suspense>
  )
}
