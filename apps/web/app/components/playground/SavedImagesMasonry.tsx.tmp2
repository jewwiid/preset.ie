'use client'

import { useState, useEffect, useRef } from 'react'
import { Plus, Download, Trash2, Info, ChevronDown, ChevronUp, Play, Pause, Maximize2, ChevronLeft, ChevronRight, Share, Sparkles, ArrowUp } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import ProgressiveImage from '../ui/ProgressiveImage'
import ProgressiveVideo from '../ui/ProgressiveVideo'
import { usePagination } from '../../hooks/usePagination'
import { useAuth } from '../../../lib/auth-context'
import { useImageGalleryState } from '../../../hooks/useImageGalleryState'
import { useImageAnalysis } from '../../../hooks/useImageAnalysis'
import { getImageGridStyle, getAspectRatioLabel } from '../../../lib/utils/aspect-ratio-utils'

interface SavedMedia {
  id: string
  media_type: 'image' | 'video'
  image_url?: string
  video_url?: string
  thumbnail_url: string
  title: string
  description?: string
  tags: string[]
  created_at: string
  width: number
  height: number
  // Video-specific fields
  video_duration?: number
  video_resolution?: string
  video_format?: string
  generation_metadata?: {
    prompt: string
    style: string
    aspect_ratio: string
    resolution: string
    consistency_level: string
    enhanced_prompt: string
    style_applied: string
    style_prompt: string
    custom_style_preset?: any
    generation_mode?: string
    base_image?: string
    api_endpoint?: string
    credits_used: number
    generated_at: string
    // Cinematic parameters
    cinematic_parameters?: any
    include_technical_details?: boolean
    include_style_references?: boolean
    // Video-specific metadata
    duration?: number
    camera_movement?: string
  }
  project_id?: string
}

interface SavedMediaMasonryProps {
  images: SavedMedia[]
  onImageSelect?: (media: SavedMedia) => void
  onDownload?: (url: string, title: string) => void
  onDelete?: (id: string) => void
  onPromote?: (id: string) => void
  onReusePrompt?: (prompt: string) => void
  onReuseGenerationSettings?: (metadata: SavedMedia['generation_metadata']) => void
  onSaveAsPreset?: (metadata: SavedMedia['generation_metadata'], imageUrl: string) => void
  onAddImageToPreview?: (mediaUrl: string) => void
  deletingImage?: string | null
  promotingImage?: string | null
  selectedImageUrl?: string | null
  onExpandMedia?: (media: SavedMedia) => void
  currentTab?: string
  onRefresh?: () => void
}

export default function SavedMediaMasonry({
  images,
  onImageSelect,
  onDownload,
  onDelete,
  onPromote,
  onReusePrompt,
  onReuseGenerationSettings,
  onSaveAsPreset,
  onAddImageToPreview,
  deletingImage,
  promotingImage,
  selectedImageUrl,
  onExpandMedia,
  currentTab = 'generate',
  onRefresh
}: SavedMediaMasonryProps) {
  const { session } = useAuth()

  // Initialize gallery state hook
  const galleryState = useImageGalleryState()

  // Initialize AI analysis hook
  const imageAnalysis = useImageAnalysis({
    accessToken: session?.access_token,
    onDescriptionAnalyzed: (description) => {
      galleryState.setEditableDescription(description)
    },
    onTagsAnalyzed: (tags) => {
      galleryState.setEditableTags(tags)
    }
  })
  
  // Pagination for performance optimization
  const {
    currentPage,
    totalPages,
    pageSize,
    paginatedItems: paginatedImages,
    hasNextPage,
    hasPreviousPage,
    nextPage,
    previousPage,
    goToPage,
    isLoading: paginationLoading,
    setIsLoading: setPaginationLoading
  } = usePagination(images, { pageSize: 16, initialPage: 1 })

  // Handle image loading
  const handleImageLoad = (imageId: string) => {
    setImagesLoaded(prev => {
      const newMap = new Map(prev)
      newMap.set(imageId, true)
      return newMap
    })
  }

  // Handle video play/pause
  const handleVideoPlay = (imageId: string) => {
    setPlayingVideos(prev => new Set(prev).add(imageId))
  }

  const handleVideoPause = (imageId: string) => {
    setPlayingVideos(prev => {
      const newSet = new Set(prev)
      newSet.delete(imageId)
      return newSet
    })
  }

  // Update images per row based on screen size
  useEffect(() => {
    const updateImagesPerRow = () => {
      if (window.innerWidth >= 1024) {
        setImagesPerRow(4) // lg:grid-cols-4
      } else if (window.innerWidth >= 768) {
        setImagesPerRow(3) // md:grid-cols-3
      } else {
        setImagesPerRow(2) // grid-cols-2
      }
    }

    updateImagesPerRow()
    window.addEventListener('resize', updateImagesPerRow)
    return () => window.removeEventListener('resize', updateImagesPerRow)
  }, [])

  // Calculate aspect ratio and determine column span
  const getImageStyle = (image: SavedMedia) => {
    const aspectRatio = image.width / image.height
    
    // Determine column span based on aspect ratio
    let colSpan = 1
    if (aspectRatio > 1.5) {
      colSpan = 2 // Wide images span 2 columns
    } else if (aspectRatio < 0.7) {
      colSpan = 1 // Tall images span 1 column
    } else {
      colSpan = 1 // Square images span 1 column
    }
    
    return {
      gridColumn: `span ${colSpan}`,
      aspectRatio: aspectRatio.toString()
    }
  }

  // Convert aspect ratio to readable format
  const getAspectRatioLabel = (width: number, height: number): string => {
    // Handle invalid or missing dimensions
    if (!width || !height || width <= 0 || height <= 0) {
      return '1:1'
    }
    
    const aspectRatio = width / height
    
    // Common aspect ratios with more generous tolerance
    if (Math.abs(aspectRatio - 1) < 0.05) return '1:1'
    if (Math.abs(aspectRatio - 16/9) < 0.05) return '16:9'
    if (Math.abs(aspectRatio - 9/16) < 0.05) return '9:16'
    if (Math.abs(aspectRatio - 4/3) < 0.05) return '4:3'
    if (Math.abs(aspectRatio - 3/4) < 0.05) return '3:4'
    if (Math.abs(aspectRatio - 21/9) < 0.05) return '21:9'
    if (Math.abs(aspectRatio - 3/2) < 0.05) return '3:2'
    if (Math.abs(aspectRatio - 2/3) < 0.05) return '2:3'
    if (Math.abs(aspectRatio - 5/4) < 0.05) return '5:4'
    if (Math.abs(aspectRatio - 4/5) < 0.05) return '4:5'
    
    // For other ratios, find the closest simple ratio
    const gcd = (a: number, b: number): number => b === 0 ? a : gcd(b, a % b)
    const divisor = gcd(width, height)
    const w = Math.round(width / divisor)
    const h = Math.round(height / divisor)
    
    // If the ratio is too complex, show decimal
    if (w > 32 || h > 32) {
      return aspectRatio.toFixed(2) + ':1'
    }
    
    return `${w}:${h}`
  }

  // Initialize editable description when modal opens
  useEffect(() => {
    if (selectedImageForInfo) {
      setEditableDescription(selectedImageForInfo.description || '')
      
      // Debug: Check what dimensions are actually stored (only log once per modal open)
      console.log('üìä Image metadata debug:', {
        storedDimensions: { width: selectedImageForInfo.width, height: selectedImageForInfo.height },
        hasGenerationMetadata: !!selectedImageForInfo.generation_metadata,
        generationResolution: selectedImageForInfo.generation_metadata?.resolution,
        generationAspectRatio: selectedImageForInfo.generation_metadata?.aspect_ratio,
        actualDimensions: {
          actual_width: (selectedImageForInfo.generation_metadata as any)?.actual_width,
          actual_height: (selectedImageForInfo.generation_metadata as any)?.actual_height
        }
      })
    }
  }, [selectedImageForInfo])

  // Generate contextual description from metadata
  const generateContextualDescription = (metadata: any) => {
    if (!metadata) {
      return 'A beautiful AI-generated image with artistic composition and natural lighting.'
    }

    const context = []
    
    if (metadata.generation_mode === 'image-to-image') {
      context.push('An AI-edited image with enhanced visual elements')
    } else {
      context.push('An AI-generated image created from text')
    }
    
    if (metadata.style) {
      context.push(`featuring ${metadata.style} styling`)
    }
    
    if (metadata.cinematic_parameters) {
      const params = metadata.cinematic_parameters
      const cinematicDetails = []
      if (params.lensType) cinematicDetails.push(`${params.lensType} lens`)
      if (params.shotSize) cinematicDetails.push(`${params.shotSize} shot`)
      if (params.timeSetting) cinematicDetails.push(`${params.timeSetting} lighting`)
      if (params.locationType) cinematicDetails.push(`${params.locationType} setting`)
      if (params.directorStyle) cinematicDetails.push(`in the style of ${params.directorStyle}`)
      
      if (cinematicDetails.length > 0) {
        context.push(`with ${cinematicDetails.join(', ')}`)
      }
    }
    
    if (context.length > 0) {
      return context.join(' ') + '. Professional quality with attention to composition, lighting, and artistic detail.'
    }
    
    return 'A beautiful AI-generated image with artistic composition and natural lighting.'
  }

  // AI analyze image description only
  const analyzeImageDescription = async (imageUrl: string) => {
    console.log('üîç AI Analyze Description button clicked!', { 
      imageUrl, 
      hasSession: !!session,
      hasAccessToken: !!session?.access_token,
      selectedImageId: selectedImageForInfo?.id 
    })
    
    setAnalyzingDescription(true)
    
    // First, try to generate a smart contextual description
    const contextualDescription = generateContextualDescription(selectedImageForInfo?.generation_metadata)
    
    try {
      console.log('üöÄ Making API call to /api/ai-image-analysis...')
      console.log('üì§ Request payload:', {
        imageUrl,
        generationMetadata: selectedImageForInfo?.generation_metadata
      })
      
      // Try OpenAI API for enhanced analysis, but don't fail if it doesn't work
      const response = await fetch('/api/ai-image-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session?.access_token}`
        },
        body: JSON.stringify({
          imageUrl,
          generationMetadata: selectedImageForInfo?.generation_metadata
        })
      })
      
      console.log('üì• API Response:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      })

      if (response.ok) {
        const data = await response.json()
        console.log('üìä API Response Data:', data)
        
        if (data.success && data.description && !data.fallback) {
          // Use OpenAI description if available and not a fallback
          console.log('‚úÖ AI description analysis completed successfully')
          setEditableDescription(data.description)
          setAnalyzingDescription(false) // ‚úÖ Ensure we stop the loading state
          return
        } else {
          console.log('‚ö†Ô∏è API returned fallback or failed:', {
            success: data.success,
            hasDescription: !!data.description,
            isFallback: data.fallback,
            error: data.error
          })
        }
      } else {
        console.error('‚ùå API call failed:', {
          status: response.status,
          statusText: response.statusText
        })
      }
    } catch (error) {
      console.log('üîÑ OpenAI API unavailable, using contextual description')
      console.error('‚ùå Full error details:', error)
    }
    
    // Always use the contextual description as it's more reliable
    console.log('üìù Setting description to:', contextualDescription)
    setEditableDescription(contextualDescription)
    console.log('üèÅ AI description analysis finished, setting analyzingDescription to false')
    setAnalyzingDescription(false)
  }

  // AI analyze image tags only
  const analyzeImageTags = async (imageUrl: string) => {
    console.log('üè∑Ô∏è AI Analyze Tags button clicked!', { 
      imageUrl, 
      hasSession: !!session,
      hasAccessToken: !!session?.access_token,
      selectedImageId: selectedImageForInfo?.id 
    })
    
    setAnalyzingTags(true)
    
    try {
      console.log('üöÄ Making API call to /api/ai-image-analysis for tags...')
      console.log('üì§ Request payload:', {
        imageUrl,
        generationMetadata: selectedImageForInfo?.generation_metadata
      })
      
      const response = await fetch('/api/ai-image-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session?.access_token}`
        },
        body: JSON.stringify({
          imageUrl,
          generationMetadata: selectedImageForInfo?.generation_metadata
        })
      })
      
      console.log('üì• API Response:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      })

      if (response.ok) {
        const data = await response.json()
        console.log('üìä API Response Data:', data)
        
        if (data.success && data.tags && Array.isArray(data.tags)) {
          console.log('‚úÖ AI tags analysis completed successfully')
          console.log('üè∑Ô∏è AI generated tags:', data.tags)
          
          // Merge new AI tags with existing tags, removing duplicates
          const existingTags = editableTags || []
          const newTags = data.tags || []
          const mergedTags = [...existingTags]
          
          newTags.forEach((tag: string) => {
            if (!mergedTags.includes(tag)) {
              mergedTags.push(tag)
            }
          })
          
          console.log('üè∑Ô∏è Merged tags:', { existing: existingTags, new: newTags, merged: mergedTags })
          setEditableTags(mergedTags)
          setAnalyzingTags(false)
          return
        } else {
          console.log('‚ö†Ô∏è API returned fallback or failed:', {
            success: data.success,
            hasTags: !!data.tags,
            isFallback: data.fallback,
            error: data.error
          })
        }
      } else {
        console.error('‚ùå API call failed:', {
          status: response.status,
          statusText: response.statusText
        })
      }
    } catch (error) {
      console.log('üîÑ OpenAI API unavailable for tags')
      console.error('‚ùå Full error details:', error)
    }
    
    console.log('üèÅ AI tags analysis finished, setting analyzingTags to false')
    setAnalyzingTags(false)
  }

  // Save updated description and tags
  const saveUpdatedDescription = async () => {
    if (!selectedImageForInfo || !editableDescription.trim()) {
      console.log('‚ùå Cannot save: missing image info or description')
      return
    }

    console.log('üíæ Starting save process...', {
      itemId: selectedImageForInfo.id,
      descriptionLength: editableDescription.trim().length,
      description: editableDescription.trim(),
      tagsCount: editableTags.length,
      tags: editableTags,
      hasSession: !!session?.access_token,
      currentDescription: selectedImageForInfo.description,
      currentTags: selectedImageForInfo.tags
    })

    setSavingDescription(true)
    try {
      const response = await fetch('/api/playground/update-gallery-item', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session?.access_token}`
        },
        body: JSON.stringify({
          itemId: selectedImageForInfo.id,
          description: editableDescription.trim(),
          tags: editableTags
        })
      })

      console.log('üíæ Save API Response:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      })

      if (response.ok) {
        const responseData = await response.json()
        console.log('‚úÖ Save successful:', responseData)
        
        // Update the local state
        setSelectedImageForInfo(prev => prev ? {
          ...prev,
          description: editableDescription.trim(),
          tags: editableTags
        } : null)
        
        // Refresh the saved media list to show updated description
        if (onRefresh) {
          console.log('üîÑ Refreshing media list...')
          onRefresh()
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        console.error('‚ùå Failed to update description:', {
          status: response.status,
          error: errorData
        })
      }
    } catch (error) {
      console.error('‚ùå Error saving description:', error)
    } finally {
      console.log('üèÅ Save process finished')
      setSavingDescription(false)
    }
  }

  return (
    <div className="space-y-4">
      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={previousPage}
              disabled={!hasPreviousPage || paginationLoading}
            >
              <ChevronLeft className="h-4 w-4" />
              Previous
            </Button>
            <span className="text-sm text-muted-foreground">
              Page {currentPage} of {totalPages}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={nextPage}
              disabled={!hasNextPage || paginationLoading}
            >
              Next
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
          <div className="text-sm text-muted-foreground">
            Showing {paginatedImages.length} of {images.length} items
          </div>
        </div>
      )}
      
      <div 
        ref={containerRef}
        className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-[minmax(120px,auto)]"
      >
        {paginatedImages.map((image: SavedMedia) => {
        const isLoaded = imagesLoaded.get(image.id)
        const style = getImageStyle(image)
        
        return (
          <div
            key={image.id}
            className={`group relative rounded-lg overflow-hidden border transition-all duration-200 cursor-pointer ${
              selectedImageUrl === (image.image_url || image.video_url)
                ? 'border-primary ring-2 ring-primary/20' 
                : 'border-border hover:border-primary/50'
            }`}
            style={style}
            onClick={() => onImageSelect?.(image)}
          >
            {/* Media */}
            <div className="relative w-full h-full">
              {image.media_type === 'video' ? (
                <ProgressiveVideo
                  src={image.video_url || ''}
                  poster={image.thumbnail_url && image.thumbnail_url !== image.video_url ? image.thumbnail_url : undefined}
                  className="w-full h-full"
                  onLoad={() => handleImageLoad(image.id)}
                  onError={() => handleImageLoad(image.id)}
                  onPlay={() => handleVideoPlay(image.id)}
                  onPause={() => handleVideoPause(image.id)}
                  onEnded={() => handleVideoPause(image.id)}
                  preload="metadata"
                  muted
                />
              ) : (
                <ProgressiveImage
                  src={image.thumbnail_url || image.image_url || ''}
                  alt={image.title}
                  className="w-full h-full"
                  onLoad={() => handleImageLoad(image.id)}
                  loading="lazy"
                  quality={75}
                />
              )}
              
              {/* Playing indicator */}
              {image.media_type === 'video' && playingVideos.has(image.id) && (
                <div className="absolute top-2 left-2 bg-primary text-primary-foreground text-xs px-2 py-1 rounded flex items-center gap-1 shadow-sm">
                  <div className="w-2 h-2 bg-primary-foreground rounded-full animate-pulse"></div>
                  <span>Playing</span>
                </div>
              )}
              
              {/* Aspect ratio and media type badges */}
              <div className="absolute top-2 right-2 flex items-center gap-1.5">
                <Badge variant="secondary" className="text-xs bg-primary/90 backdrop-blur-sm text-primary-foreground border-0 shadow-sm">
                  {getAspectRatioLabel(image.width, image.height)}
                </Badge>
                {image.media_type === 'video' && (
                  <Badge className="text-xs bg-primary/80 backdrop-blur-sm text-primary-foreground border-0 shadow-sm">
                    Video
                  </Badge>
                )}
              </div>
              
              {/* Overlay with actions */}
              <div className="absolute inset-0 bg-backdrop bg-opacity-0 group-hover:bg-opacity-60 transition-all duration-200 flex items-center justify-center">
                <div className="opacity-0 group-hover:opacity-100 transition-opacity flex gap-2">
                  {/* Play button for videos */}
                  {image.media_type === 'video' && (
                    <Button
                      size="sm"
                      variant="secondary"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-primary/10 hover:shadow-md hover:text-primary"
                      onClick={(e) => {
                        e.stopPropagation()
                        // Play video in place
                        const video = e.currentTarget.closest('.group')?.querySelector('video') as HTMLVideoElement
                        if (video) {
                          if (video.paused) {
                            video.play().catch(error => {
                              console.error('Error playing video:', error)
                            })
                          } else {
                            video.pause()
                          }
                        }
                      }}
                      title={playingVideos.has(image.id) ? "Pause video" : "Play video"}
                    >
                      {playingVideos.has(image.id) ? (
                        <Pause className="h-4 w-4" />
                      ) : (
                        <Play className="h-4 w-4" />
                      )}
                    </Button>
                  )}
                  
                  {/* Expand button for all media */}
                  {onExpandMedia && (
                    <Button
                      size="sm"
                      variant="secondary"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-accent/80 hover:shadow-md"
                      onClick={(e) => {
                        e.stopPropagation()
                        onExpandMedia(image)
                      }}
                      title="Expand to full size"
                    >
                      <Maximize2 className="h-4 w-4" />
                    </Button>
                  )}
                  
                  {onAddImageToPreview && (
                    <Button
                      size="sm"
                      variant="secondary"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-primary/10 hover:shadow-md hover:text-primary"
                      onClick={(e) => {
                        e.stopPropagation()
                        onAddImageToPreview(image.image_url || image.video_url || '')
                      }}
                      title={currentTab === 'video' ? 'Add to video preview' : 'Add to preview'}
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  )}
                  <Button
                    size="sm"
                    variant="secondary"
                    className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-primary/10 hover:shadow-md hover:text-primary"
                    onClick={(e) => {
                      e.stopPropagation()
                      setSelectedImageForInfo(image)
                    }}
                    title="View metadata"
                  >
                    <Info className="h-4 w-4" />
                  </Button>
                  {onDownload && (
                    <Button
                      size="sm"
                      variant="secondary"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-primary/10 hover:shadow-md hover:text-primary"
                      onClick={(e) => {
                        e.stopPropagation()
                        onDownload(image.image_url || image.video_url || '', image.title)
                      }}
                      title="Download"
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                  )}
                  {onDelete && (
                    <Button
                      size="sm"
                      variant="destructive"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-destructive/80 hover:shadow-md"
                      onClick={(e) => {
                        e.stopPropagation()
                        onDelete(image.id)
                      }}
                      disabled={deletingImage === image.id}
                      title="Delete"
                    >
                      {deletingImage === image.id ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-border"></div>
                      ) : (
                        <Trash2 className="h-4 w-4" />
                      )}
                    </Button>
                  )}
                  {onPromote && (
                    <Button
                      size="sm"
                      variant="default"
                      className="h-8 w-8 p-0 transition-all duration-200 hover:scale-110 hover:bg-primary/90 hover:shadow-md bg-primary"
                      onClick={(e) => {
                        e.stopPropagation()
                        onPromote(image.id)
                      }}
                      disabled={promotingImage === image.id}
                      title="Promote to Media"
                    >
                      {promotingImage === image.id ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-border"></div>
                      ) : (
                        <ArrowUp className="h-4 w-4" />
                      )}
                    </Button>
                  )}
                </div>
              </div>
            </div>
            
            {/* Media info overlay */}
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent backdrop-blur-sm p-3 opacity-0 group-hover:opacity-100 transition-opacity">
              <div className="flex items-center justify-between gap-2">
                <div className="flex-1 min-w-0">
                  <h4 className="text-white text-sm font-medium truncate">{image.title}</h4>
                  <p className="text-white/80 text-xs truncate">{image.description}</p>
                </div>
              </div>
            </div>
          </div>
        )
      })}
      </div>
      
      
      {/* Metadata Popup Modal */}
      {selectedImageForInfo && (
        <div className="fixed inset-0 z-[9999] flex items-center justify-center p-4 modal-backdrop">
          <Card className="w-full max-w-4xl max-h-[90vh] overflow-hidden popover-fixed">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">Image Metadata</CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedImageForInfo(null)}
                  className="h-8 w-8 p-0"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="p-0">
              {/* 2-Column Layout */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
                {/* Left Column - Image */}
                <div className="space-y-4">
                  <div className="aspect-square rounded-lg overflow-hidden border">
                    {selectedImageForInfo.media_type === 'video' ? (
                      <video
                        src={selectedImageForInfo.video_url}
                        poster={selectedImageForInfo.thumbnail_url && selectedImageForInfo.thumbnail_url !== selectedImageForInfo.video_url ? selectedImageForInfo.thumbnail_url : undefined}
                        className="w-full h-full object-cover"
                        controls
                        preload="metadata"
                        loop
                      />
                    ) : (
                      <img
                        src={selectedImageForInfo.image_url}
                        alt={selectedImageForInfo.title}
                        className="w-full h-full object-cover"
                      />
                    )}
                  </div>
                  
                  {/* Quick Actions */}
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" className="flex-1">
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                    <Button variant="outline" size="sm" className="flex-1">
                      <Share className="h-4 w-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </div>
                
                {/* Right Column - Metadata */}
                <div className="space-y-4 overflow-y-auto max-h-[60vh]">
                  {/* Basic Info */}
                  <div className="space-y-3">
                    <div>
                      <label className="text-sm font-medium text-muted-foreground">Title</label>
                      <p className="text-sm font-medium">{selectedImageForInfo.title}</p>
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-medium text-muted-foreground">Description</label>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => analyzeImageDescription(selectedImageForInfo.image_url || '')}
                          disabled={analyzingDescription}
                          className="h-6 px-2 text-xs"
                        >
                          {analyzingDescription ? (
                            <>
                              <div className="animate-spin rounded-full h-3 w-3 border-b border-current mr-1"></div>
                              Analyzing...
                            </>
                          ) : (
                            <>
                              <Sparkles className="h-3 w-3 mr-1" />
                              AI Analyze
                            </>
                          )}
                        </Button>
                      </div>
                      <textarea
                        value={editableDescription}
                        onChange={(e) => setEditableDescription(e.target.value)}
                        placeholder="Click 'AI Analyze' to generate a description, or write your own..."
                        className="w-full text-sm p-2 border rounded-md resize-none"
                        rows={3}
                      />
                      {editableDescription !== selectedImageForInfo.description && (
                        <div className="flex gap-2 mt-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => saveUpdatedDescription()}
                            disabled={savingDescription}
                            className="text-xs"
                          >
                            {savingDescription ? 'Saving...' : 'Save Changes'}
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setEditableDescription(selectedImageForInfo.description || '')
                              setEditableTags(selectedImageForInfo.tags || [])
                            }}
                            className="text-xs"
                          >
                            Cancel
                          </Button>
                        </div>
                      )}
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-medium text-muted-foreground">Tags</label>
                        <div className="flex gap-1">
                          {editableTags.length > 0 && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setEditableTags([])}
                              className="h-6 px-2 text-xs text-muted-foreground hover:text-destructive"
                            >
                              Clear All
                            </Button>
                          )}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => analyzeImageTags(selectedImageForInfo.image_url || '')}
                            disabled={analyzingTags}
                            className="h-6 px-2 text-xs"
                          >
                            {analyzingTags ? (
                              <>
                                <div className="animate-spin rounded-full h-3 w-3 border-b border-current mr-1"></div>
                                Analyzing...
                              </>
                            ) : (
                              <>
                                <Sparkles className="h-3 w-3 mr-1" />
                                AI Add Tags
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                      <div className="flex flex-wrap gap-1 p-2 border rounded-md min-h-[2rem]">
                        {editableTags.length > 0 ? (
                          editableTags.map((tag, index) => {
                            const isAiGenerated = tag === 'ai-generated'
                            return (
                              <Badge
                                key={index}
                                variant="secondary"
                                className={`text-xs ${!isAiGenerated ? 'cursor-pointer hover:bg-destructive hover:text-destructive-foreground' : 'cursor-not-allowed opacity-70'}`}
                                onClick={() => {
                                  if (!isAiGenerated) {
                                    const newTags = editableTags.filter((_, i) => i !== index)
                                    setEditableTags(newTags)
                                  }
                                }}
                              >
                                {tag} {!isAiGenerated && '√ó'}
                              </Badge>
                            )
                          })
                        ) : (
                          <span className="text-xs text-muted-foreground">No tags yet. Click "AI Generate Tags" to add some!</span>
                        )}
                      </div>
                      {editableTags.length > 0 && (
                        <div className="flex gap-2 mt-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => saveUpdatedDescription()}
                            disabled={savingDescription}
                            className="text-xs"
                          >
                            {savingDescription ? 'Saving...' : 'Save Tags'}
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditableTags(selectedImageForInfo.tags || [])}
                            className="text-xs"
                          >
                            Cancel
                          </Button>
                        </div>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium text-muted-foreground">Dimensions</label>
                        <p className="text-sm">{selectedImageForInfo.width} √ó {selectedImageForInfo.height}</p>
                      </div>
                      
                      <div>
                        <label className="text-sm font-medium text-muted-foreground">Aspect Ratio</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge variant="secondary" className="text-sm">
                            {getAspectRatioLabel(selectedImageForInfo.width, selectedImageForInfo.height)}
                          </Badge>
                          <span className="text-sm text-muted-foreground">
                            ({selectedImageForInfo.media_type === 'video' ? 'Video' : 'Image'})
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium text-muted-foreground">Created</label>
                      <p className="text-sm">{new Date(selectedImageForInfo.created_at).toLocaleString()}</p>
                    </div>
                
                    {/* Tags */}
                    {selectedImageForInfo.tags && selectedImageForInfo.tags.length > 0 && (
                      <div>
                        <label className="text-sm font-medium text-muted-foreground">Tags</label>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {selectedImageForInfo.tags.map((tag, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Generation Metadata */}
                  {selectedImageForInfo.generation_metadata && (
                    <div className="border-t pt-4">
                      <h3 className="text-sm font-medium text-foreground mb-3">Generation Settings</h3>
                      <div className="space-y-3 text-sm">
                        <div>
                          <label className="text-sm font-medium text-muted-foreground">Prompt</label>
                          <p className="text-sm mt-1 bg-muted p-2 rounded border">
                            {(selectedImageForInfo.generation_metadata as any).prompt || 'Not available'}
                          </p>
                        </div>

                        {/* Generation Method */}
                        {((selectedImageForInfo.generation_metadata as any).generation_provider || (selectedImageForInfo.generation_metadata as any).generation_model) && (
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Generation Method</label>
                            <p className="text-sm">
                              {(() => {
                                const provider = (selectedImageForInfo.generation_metadata as any).generation_provider;
                                const model = (selectedImageForInfo.generation_metadata as any).generation_model;
                                
                                if (model) {
                                  const formatName = (name: string) => {
                                    return name
                                      .replace(/-v\d+/g, ' V$&'.replace('-v', ''))
                                      .replace(/seedream/gi, 'Seedream')
                                      .replace(/nanobanana/gi, 'Nanobanana')
                                      .replace(/wavespeed/gi, 'Wavespeed')
                                      .replace(/dalle/gi, 'DALL-E')
                                      .replace(/midjourney/gi, 'Midjourney');
                                  };
                                  return formatName(model);
                                }
                                if (provider) {
                                  return provider.replace(/wavespeed-nanobanan/gi, 'Nanobanana').replace(/seedream/gi, 'Seedream');
                                }
                                return 'Unknown';
                              })()}
                            </p>
                          </div>
                        )}

                        <div className="grid grid-cols-2 gap-3">
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Style</label>
                            <p className="text-sm">
                              {(() => {
                                const style = (selectedImageForInfo.generation_metadata as any).style;
                                if (!style) return 'Not available';
                                return style
                                  .split('_')
                                  .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
                                  .join(' ');
                              })()}
                            </p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Resolution</label>
                            <p className="text-sm">{(selectedImageForInfo.generation_metadata as any).resolution || 'Not available'}</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Aspect Ratio</label>
                            <p className="text-sm">{(selectedImageForInfo.generation_metadata as any).aspect_ratio || 'Not available'}</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Consistency</label>
                            <p className="text-sm">{(selectedImageForInfo.generation_metadata as any).consistency_level || 'Not available'}</p>
                          </div>
                        </div>

                        {(selectedImageForInfo.generation_metadata as any).custom_style_preset && (
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Style Preset</label>
                            <p className="text-sm">{(selectedImageForInfo.generation_metadata as any).custom_style_preset.name}</p>
                          </div>
                        )}
                        
                        {(selectedImageForInfo.generation_metadata as any).generation_mode && (
                          <div>
                            <label className="text-sm font-medium text-muted-foreground">Generation Mode</label>
                            <p className="text-sm">
                              {(selectedImageForInfo.generation_metadata as any).generation_mode === 'image-to-image' ? 'üñºÔ∏è Image-to-Image' : 'üìù Text-to-Image'}
                            </p>
                          </div>
                        )}

                        {/* Subject Information */}
                        {(() => {
                          const metadata = selectedImageForInfo.generation_metadata as any;
                          let subject = metadata.subject;
                          
                          // If no subject field, try to extract from prompt
                          if (!subject && metadata.prompt) {
                            // Look for common subject patterns in the prompt
                            const prompt = metadata.prompt.toLowerCase();
                            if (prompt.includes('of a ')) {
                              const match = metadata.prompt.match(/of a ([^,]+)/i);
                              if (match) subject = match[1].trim();
                            } else if (prompt.includes('of an ')) {
                              const match = metadata.prompt.match(/of an ([^,]+)/i);
                              if (match) subject = match[1].trim();
                            } else if (prompt.includes('of ')) {
                              const match = metadata.prompt.match(/of ([^,]+)/i);
                              if (match) subject = match[1].trim();
                            }
                          }
                          
                          return subject ? (
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Subject</label>
                              <p className="text-sm">{subject}</p>
                            </div>
                          ) : null;
                        })()}

                        {/* Preset Information */}
                        {(() => {
                          const metadata = selectedImageForInfo.generation_metadata as any;
                          const presetId = metadata.custom_style_preset?.id || metadata.preset_id;
                          const presetName = metadata.custom_style_preset?.name || metadata.preset_name || 'Custom Preset';
                          
                          return presetId ? (
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Preset Used</label>
                              <p className="text-sm">
                                <a 
                                  href={`/presets/${presetId}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-primary hover:text-primary/80 underline font-medium transition-colors"
                                >
                                  {presetName}
                                </a>
                              </p>
                            </div>
                          ) : null;
                        })()}
                      {(() => {
                        const metadata = selectedImageForInfo.generation_metadata as any;
                        // Check for both base_image and original_image_url for backwards compatibility
                        const sourceImage = metadata.base_image || metadata.original_image_url;
                        const sourceType = metadata.source_type || 'unknown';
                        const hasSourceImage = metadata.has_source_image || !!sourceImage;
                        
                        return (
                          <div>
                            <span className="font-medium">Source Image:</span>
                            <div className="mt-1">
                              {sourceImage ? (
                                <div className="flex items-center gap-2">
                                  <img 
                                    src={sourceImage} 
                                    alt="Source/Base image" 
                                    className="w-16 h-16 object-cover rounded border"
                                  />
                                  {sourceType === 'moodboard_image' && (
                                    <div className="text-xs text-muted-foreground">
                                      <div>üìã From Moodboard</div>
                                      <div className="text-xs opacity-75">Image-to-Image</div>
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <div className="w-16 h-16 bg-muted rounded border flex items-center justify-center text-xs text-muted-foreground">
                                  {hasSourceImage ? 'üñºÔ∏è Image-to-Image' : 'üìù Text-to-Image'}
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })()}
                      {(selectedImageForInfo.generation_metadata as any).cinematic_parameters && (
                        <div>
                          <span className="font-medium">Cinematic Parameters:</span>
                          <div className="mt-2 space-y-1">
                            {Object.entries((selectedImageForInfo.generation_metadata as any).cinematic_parameters).map(([key, value]) => (
                              value ? (
                                <div key={key} className="flex justify-between text-xs">
                                  <span className="text-muted-foreground capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>
                                  <span className="text-foreground font-medium">{String(value).replace(/-/g, ' ')}</span>
                                </div>
                              ) : null
                            ))}
                          </div>
                        </div>
                      )}
                      {(selectedImageForInfo.generation_metadata as any).include_technical_details !== undefined && (
                        <div>
                          <span className="font-medium">Technical Details:</span>
                          <span className="text-foreground ml-2">{(selectedImageForInfo.generation_metadata as any).include_technical_details ? 'Enabled' : 'Disabled'}</span>
                        </div>
                      )}
                      {(selectedImageForInfo.generation_metadata as any).include_style_references !== undefined && (
                        <div>
                          <span className="font-medium">Style References:</span>
                          <span className="text-foreground ml-2">{(selectedImageForInfo.generation_metadata as any).include_style_references ? 'Enabled' : 'Disabled'}</span>
                        </div>
                      )}
                      <div className="text-xs text-muted-foreground">
                        Generated: {(selectedImageForInfo.generation_metadata as any).generated_at 
                          ? new Date((selectedImageForInfo.generation_metadata as any).generated_at).toLocaleString()
                          : 'Unknown'
                        }
                      </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Actions */}
              <div className="flex gap-2 pt-4 border-t px-6 pb-6">
                {onReusePrompt && (
                  <Button
                    onClick={() => {
                      onReusePrompt(selectedImageForInfo.generation_metadata?.prompt || selectedImageForInfo.title)
                      setSelectedImageForInfo(null)
                    }}
                    className="flex-1"
                    variant="outline"
                  >
                    Reuse Prompt
                  </Button>
                )}
                {onReuseGenerationSettings && selectedImageForInfo.generation_metadata && (
                  <Button
                    onClick={() => {
                      onReuseGenerationSettings(selectedImageForInfo.generation_metadata)
                      setSelectedImageForInfo(null)
                    }}
                    className="flex-1"
                  >
                    Reuse All Settings
                  </Button>
                )}
                {onSaveAsPreset && selectedImageForInfo.generation_metadata && (
                  <Button
                    onClick={() => {
                      onSaveAsPreset(selectedImageForInfo.generation_metadata, selectedImageForInfo.image_url || '')
                      setSelectedImageForInfo(null)
                    }}
                    className="flex-1"
                    variant="outline"
                  >
                    Save as Preset
                  </Button>
                )}
                {onImageSelect && (
                  <Button
                    variant="outline"
                    onClick={() => {
                      onImageSelect(selectedImageForInfo)
                      setSelectedImageForInfo(null)
                    }}
                    className="flex-1"
                  >
                    Use Image
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
